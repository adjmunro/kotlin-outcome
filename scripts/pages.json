[{"name":"abstract fun complete()","description":"nz.adjmunro.knomadic.raise.RaiseScope.complete","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/complete.html","searchKeys":["complete","abstract fun complete()","nz.adjmunro.knomadic.raise.RaiseScope.complete"]},{"name":"abstract fun raised(error: Error): Nothing","description":"nz.adjmunro.knomadic.raise.RaiseScope.raised","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/raised.html","searchKeys":["raised","abstract fun raised(error: Error): Nothing","nz.adjmunro.knomadic.raise.RaiseScope.raised"]},{"name":"annotation class KnomadicDsl","description":"nz.adjmunro.knomadic.KnomadicDsl","location":"knomadic/nz.adjmunro.knomadic/-knomadic-dsl/index.html","searchKeys":["KnomadicDsl","annotation class KnomadicDsl","nz.adjmunro.knomadic.KnomadicDsl"]},{"name":"class DefaultRaise<in Error : Any> : RaiseScope<Error> ","description":"nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-default-raise/index.html","searchKeys":["DefaultRaise","class DefaultRaise<in Error : Any> : RaiseScope<Error> ","nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise"]},{"name":"class SafeFetchFlow<T : Any> : AbstractFlow<Fetch<T>> , Flow<Fetch<T>> ","description":"nz.adjmunro.knomadic.fetch.SafeFetchFlow","location":"knomadic/nz.adjmunro.knomadic.fetch/-safe-fetch-flow/index.html","searchKeys":["SafeFetchFlow","class SafeFetchFlow<T : Any> : AbstractFlow<Fetch<T>> , Flow<Fetch<T>> ","nz.adjmunro.knomadic.fetch.SafeFetchFlow"]},{"name":"constructor(error: Error)","description":"nz.adjmunro.knomadic.outcome.Outcome.Failure.Failure","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-failure/-failure.html","searchKeys":["Failure","constructor(error: Error)","nz.adjmunro.knomadic.outcome.Outcome.Failure.Failure"]},{"name":"constructor(error: Error, cache: Ok? = null)","description":"nz.adjmunro.knomadic.fetch.ErrorWithCache.ErrorWithCache","location":"knomadic/nz.adjmunro.knomadic.fetch/-error-with-cache/-error-with-cache.html","searchKeys":["ErrorWithCache","constructor(error: Error, cache: Ok? = null)","nz.adjmunro.knomadic.fetch.ErrorWithCache.ErrorWithCache"]},{"name":"constructor(result: T)","description":"nz.adjmunro.knomadic.fetch.Fetch.Finished.Finished","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-finished/-finished.html","searchKeys":["Finished","constructor(result: T)","nz.adjmunro.knomadic.fetch.Fetch.Finished.Finished"]},{"name":"constructor(value: Ok)","description":"nz.adjmunro.knomadic.outcome.Outcome.Success.Success","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-success/-success.html","searchKeys":["Success","constructor(value: Ok)","nz.adjmunro.knomadic.outcome.Outcome.Success.Success"]},{"name":"data class ErrorWithCache<out Ok : Any, out Error : Any>(val error: Error, val cache: Ok? = null)","description":"nz.adjmunro.knomadic.fetch.ErrorWithCache","location":"knomadic/nz.adjmunro.knomadic.fetch/-error-with-cache/index.html","searchKeys":["ErrorWithCache","data class ErrorWithCache<out Ok : Any, out Error : Any>(val error: Error, val cache: Ok? = null)","nz.adjmunro.knomadic.fetch.ErrorWithCache"]},{"name":"data object Fetching : Fetch<Nothing> ","description":"nz.adjmunro.knomadic.fetch.Fetch.Fetching","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-fetching/index.html","searchKeys":["Fetching","data object Fetching : Fetch<Nothing> ","nz.adjmunro.knomadic.fetch.Fetch.Fetching"]},{"name":"data object Initial : Fetch<Nothing> ","description":"nz.adjmunro.knomadic.fetch.Fetch.Initial","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-initial/index.html","searchKeys":["Initial","data object Initial : Fetch<Nothing> ","nz.adjmunro.knomadic.fetch.Fetch.Initial"]},{"name":"fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> Outcome<Ok, Error>.collapse(): Ancestor","description":"nz.adjmunro.knomadic.outcome.members.collapse","location":"knomadic/nz.adjmunro.knomadic.outcome.members/collapse.html","searchKeys":["collapse","fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> Outcome<Ok, Error>.collapse(): Ancestor","nz.adjmunro.knomadic.outcome.members.collapse"]},{"name":"fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> OutcomeFlow<Ok, Error>.collapse(): Flow<Ancestor>","description":"nz.adjmunro.knomadic.outcome.members.collapse","location":"knomadic/nz.adjmunro.knomadic.outcome.members/collapse.html","searchKeys":["collapse","fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> OutcomeFlow<Ok, Error>.collapse(): Flow<Ancestor>","nz.adjmunro.knomadic.outcome.members.collapse"]},{"name":"fun <Error : Throwable> Error.nonFatalOrThrow(): Error","description":"nz.adjmunro.knomadic.util.nonFatalOrThrow","location":"knomadic/nz.adjmunro.knomadic.util/non-fatal-or-throw.html","searchKeys":["nonFatalOrThrow","fun <Error : Throwable> Error.nonFatalOrThrow(): Error","nz.adjmunro.knomadic.util.nonFatalOrThrow"]},{"name":"fun <Ok : Any, EmbeddedError : AncestorError, OuterError : AncestorError, AncestorError : Any> Outcome<Outcome<Ok, EmbeddedError>, OuterError>.flattenNestedSuccess(): Outcome<Ok, AncestorError>","description":"nz.adjmunro.knomadic.outcome.members.flattenNestedSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome.members/flatten-nested-success.html","searchKeys":["flattenNestedSuccess","fun <Ok : Any, EmbeddedError : AncestorError, OuterError : AncestorError, AncestorError : Any> Outcome<Outcome<Ok, EmbeddedError>, OuterError>.flattenNestedSuccess(): Outcome<Ok, AncestorError>","nz.adjmunro.knomadic.outcome.members.flattenNestedSuccess"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrNull(): Error?","description":"nz.adjmunro.knomadic.outcome.members.errorOrNull","location":"knomadic/nz.adjmunro.knomadic.outcome.members/error-or-null.html","searchKeys":["errorOrNull","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrNull(): Error?","nz.adjmunro.knomadic.outcome.members.errorOrNull"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrThrow(): Error","description":"nz.adjmunro.knomadic.outcome.members.errorOrThrow","location":"knomadic/nz.adjmunro.knomadic.outcome.members/error-or-throw.html","searchKeys":["errorOrThrow","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrThrow(): Error","nz.adjmunro.knomadic.outcome.members.errorOrThrow"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrNull(): Ok?","description":"nz.adjmunro.knomadic.outcome.members.getOrNull","location":"knomadic/nz.adjmunro.knomadic.outcome.members/get-or-null.html","searchKeys":["getOrNull","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrNull(): Ok?","nz.adjmunro.knomadic.outcome.members.getOrNull"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrThrow(): Ok","description":"nz.adjmunro.knomadic.outcome.members.getOrThrow","location":"knomadic/nz.adjmunro.knomadic.outcome.members/get-or-throw.html","searchKeys":["getOrThrow","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrThrow(): Ok","nz.adjmunro.knomadic.outcome.members.getOrThrow"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.invert(): Outcome<Error, Ok>","description":"nz.adjmunro.knomadic.outcome.members.invert","location":"knomadic/nz.adjmunro.knomadic.outcome.members/invert.html","searchKeys":["invert","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.invert(): Outcome<Error, Ok>","nz.adjmunro.knomadic.outcome.members.invert"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(): Boolean","description":"nz.adjmunro.knomadic.outcome.members.isFailure","location":"knomadic/nz.adjmunro.knomadic.outcome.members/is-failure.html","searchKeys":["isFailure","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(): Boolean","nz.adjmunro.knomadic.outcome.members.isFailure"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(): Boolean","description":"nz.adjmunro.knomadic.outcome.members.isSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome.members/is-success.html","searchKeys":["isSuccess","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(): Boolean","nz.adjmunro.knomadic.outcome.members.isSuccess"]},{"name":"fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.filterOnlyFailure(): Flow<Error>","description":"nz.adjmunro.knomadic.outcome.members.filterOnlyFailure","location":"knomadic/nz.adjmunro.knomadic.outcome.members/filter-only-failure.html","searchKeys":["filterOnlyFailure","fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.filterOnlyFailure(): Flow<Error>","nz.adjmunro.knomadic.outcome.members.filterOnlyFailure"]},{"name":"fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.filterOnlySuccess(): Flow<Ok>","description":"nz.adjmunro.knomadic.outcome.members.filterOnlySuccess","location":"knomadic/nz.adjmunro.knomadic.outcome.members/filter-only-success.html","searchKeys":["filterOnlySuccess","fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.filterOnlySuccess(): Flow<Ok>","nz.adjmunro.knomadic.outcome.members.filterOnlySuccess"]},{"name":"fun <OuterOk : AncestorOk, EmbeddedOk : AncestorOk, Error : Any, AncestorOk : Any> Outcome<OuterOk, Outcome<EmbeddedOk, Error>>.flattenNestedFailure(): Outcome<AncestorOk, Error>","description":"nz.adjmunro.knomadic.outcome.members.flattenNestedFailure","location":"knomadic/nz.adjmunro.knomadic.outcome.members/flatten-nested-failure.html","searchKeys":["flattenNestedFailure","fun <OuterOk : AncestorOk, EmbeddedOk : AncestorOk, Error : Any, AncestorOk : Any> Outcome<OuterOk, Outcome<EmbeddedOk, Error>>.flattenNestedFailure(): Outcome<AncestorOk, Error>","nz.adjmunro.knomadic.outcome.members.flattenNestedFailure"]},{"name":"fun <SuccessOk : AncestorOk, SuccessError : AncestorError, FailureOk : AncestorOk, FailureError : AncestorError, AncestorOk : Any, AncestorError : Any> Outcome<Outcome<SuccessOk, SuccessError>, Outcome<FailureOk, FailureError>>.flattenNestedBoth(): Outcome<AncestorOk, AncestorError>","description":"nz.adjmunro.knomadic.outcome.members.flattenNestedBoth","location":"knomadic/nz.adjmunro.knomadic.outcome.members/flatten-nested-both.html","searchKeys":["flattenNestedBoth","fun <SuccessOk : AncestorOk, SuccessError : AncestorError, FailureOk : AncestorOk, FailureError : AncestorError, AncestorOk : Any, AncestorError : Any> Outcome<Outcome<SuccessOk, SuccessError>, Outcome<FailureOk, FailureError>>.flattenNestedBoth(): Outcome<AncestorOk, AncestorError>","nz.adjmunro.knomadic.outcome.members.flattenNestedBoth"]},{"name":"fun <T : Any> Fetch<T>.getOrNull(): T?","description":"nz.adjmunro.knomadic.fetch.members.getOrNull","location":"knomadic/nz.adjmunro.knomadic.fetch.members/get-or-null.html","searchKeys":["getOrNull","fun <T : Any> Fetch<T>.getOrNull(): T?","nz.adjmunro.knomadic.fetch.members.getOrNull"]},{"name":"fun <T : Any> Fetch<T>.getOrThrow(): T","description":"nz.adjmunro.knomadic.fetch.members.getOrThrow","location":"knomadic/nz.adjmunro.knomadic.fetch.members/get-or-throw.html","searchKeys":["getOrThrow","fun <T : Any> Fetch<T>.getOrThrow(): T","nz.adjmunro.knomadic.fetch.members.getOrThrow"]},{"name":"fun <T : Any> Fetch<T>.isFinished(): Boolean","description":"nz.adjmunro.knomadic.fetch.members.isFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.members/is-finished.html","searchKeys":["isFinished","fun <T : Any> Fetch<T>.isFinished(): Boolean","nz.adjmunro.knomadic.fetch.members.isFinished"]},{"name":"fun <T : Any> FetchFlow<Fetch<T>>.flatten(): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.flow.flatten","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/flatten.html","searchKeys":["flatten","fun <T : Any> FetchFlow<Fetch<T>>.flatten(): FetchFlow<T>","nz.adjmunro.knomadic.fetch.flow.flatten"]},{"name":"fun <T : Any> FetchFlow<T>.fetchOrNull(): Flow<T?>","description":"nz.adjmunro.knomadic.fetch.flow.fetchOrNull","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/fetch-or-null.html","searchKeys":["fetchOrNull","fun <T : Any> FetchFlow<T>.fetchOrNull(): Flow<T?>","nz.adjmunro.knomadic.fetch.flow.fetchOrNull"]},{"name":"fun <T : Any> FetchFlow<T>.fetchOrThrow(): Flow<T>","description":"nz.adjmunro.knomadic.fetch.flow.fetchOrThrow","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/fetch-or-throw.html","searchKeys":["fetchOrThrow","fun <T : Any> FetchFlow<T>.fetchOrThrow(): Flow<T>","nz.adjmunro.knomadic.fetch.flow.fetchOrThrow"]},{"name":"fun <T : Any> FetchFlow<T>.filterOnlyFinished(): Flow<T>","description":"nz.adjmunro.knomadic.fetch.flow.filterOnlyFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/filter-only-finished.html","searchKeys":["filterOnlyFinished","fun <T : Any> FetchFlow<T>.filterOnlyFinished(): Flow<T>","nz.adjmunro.knomadic.fetch.flow.filterOnlyFinished"]},{"name":"fun <T : Any> FetchFlow<T>.onEachFetch(initial: suspend Fetch.Initial.() -> Unit = {}, fetching: suspend Fetch.Fetching.() -> Unit = {}, fetched: suspend Fetch.Finished<T>.(T) -> Unit = {}): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.flow.onEachFetch","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/on-each-fetch.html","searchKeys":["onEachFetch","fun <T : Any> FetchFlow<T>.onEachFetch(initial: suspend Fetch.Initial.() -> Unit = {}, fetching: suspend Fetch.Fetching.() -> Unit = {}, fetched: suspend Fetch.Finished<T>.(T) -> Unit = {}): FetchFlow<T>","nz.adjmunro.knomadic.fetch.flow.onEachFetch"]},{"name":"fun <T : Any> fetch(timeout: Duration = Duration.INFINITE, recover: FetchCollector<T>.(Throwable) -> Fetch<T> = { throw it }, block: suspend FetchCollector<T>.() -> T): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.fetch","location":"knomadic/nz.adjmunro.knomadic.fetch/fetch.html","searchKeys":["fetch","fun <T : Any> fetch(timeout: Duration = Duration.INFINITE, recover: FetchCollector<T>.(Throwable) -> Fetch<T> = { throw it }, block: suspend FetchCollector<T>.() -> T): FetchFlow<T>","nz.adjmunro.knomadic.fetch.fetch"]},{"name":"fun <T> T.wrapOutcome(): Outcome<T & Any, Throwable>","description":"nz.adjmunro.knomadic.outcome.wrapOutcome","location":"knomadic/nz.adjmunro.knomadic.outcome/wrap-outcome.html","searchKeys":["wrapOutcome","fun <T> T.wrapOutcome(): Outcome<T & Any, Throwable>","nz.adjmunro.knomadic.outcome.wrapOutcome"]},{"name":"fun Throwable.isFatal(): Boolean","description":"nz.adjmunro.knomadic.util.isFatal","location":"knomadic/nz.adjmunro.knomadic.util/is-fatal.html","searchKeys":["isFatal","fun Throwable.isFatal(): Boolean","nz.adjmunro.knomadic.util.isFatal"]},{"name":"infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrDefault(default: Error): Error","description":"nz.adjmunro.knomadic.outcome.members.errorOrDefault","location":"knomadic/nz.adjmunro.knomadic.outcome.members/error-or-default.html","searchKeys":["errorOrDefault","infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrDefault(default: Error): Error","nz.adjmunro.knomadic.outcome.members.errorOrDefault"]},{"name":"infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrDefault(default: Ok): Ok","description":"nz.adjmunro.knomadic.outcome.members.getOrDefault","location":"knomadic/nz.adjmunro.knomadic.outcome.members/get-or-default.html","searchKeys":["getOrDefault","infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrDefault(default: Ok): Ok","nz.adjmunro.knomadic.outcome.members.getOrDefault"]},{"name":"infix fun <T : Any> Fetch<T>.getOrDefault(default: T): T","description":"nz.adjmunro.knomadic.fetch.members.getOrDefault","location":"knomadic/nz.adjmunro.knomadic.fetch.members/get-or-default.html","searchKeys":["getOrDefault","infix fun <T : Any> Fetch<T>.getOrDefault(default: T): T","nz.adjmunro.knomadic.fetch.members.getOrDefault"]},{"name":"infix fun <T : Any> FetchFlow<T>.fetchOrDefault(default: T): Flow<T>","description":"nz.adjmunro.knomadic.fetch.flow.fetchOrDefault","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/fetch-or-default.html","searchKeys":["fetchOrDefault","infix fun <T : Any> FetchFlow<T>.fetchOrDefault(default: T): Flow<T>","nz.adjmunro.knomadic.fetch.flow.fetchOrDefault"]},{"name":"infix inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.flatMapSuccess(transform: (In) -> Outcome<Out, Error>): Outcome<Out, Error>","description":"nz.adjmunro.knomadic.outcome.members.flatMapSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome.members/flat-map-success.html","searchKeys":["flatMapSuccess","infix inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.flatMapSuccess(transform: (In) -> Outcome<Out, Error>): Outcome<Out, Error>","nz.adjmunro.knomadic.outcome.members.flatMapSuccess"]},{"name":"infix inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.mapSuccess(transform: (In) -> Out): Outcome<Out, Error>","description":"nz.adjmunro.knomadic.outcome.members.mapSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome.members/map-success.html","searchKeys":["mapSuccess","infix inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.mapSuccess(transform: (In) -> Out): Outcome<Out, Error>","nz.adjmunro.knomadic.outcome.members.mapSuccess"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToFailure(falter: (Ok) -> Error): Outcome.Failure<Error>","description":"nz.adjmunro.knomadic.outcome.members.coerceToFailure","location":"knomadic/nz.adjmunro.knomadic.outcome.members/coerce-to-failure.html","searchKeys":["coerceToFailure","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToFailure(falter: (Ok) -> Error): Outcome.Failure<Error>","nz.adjmunro.knomadic.outcome.members.coerceToFailure"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToSuccess(recover: (Error) -> Ok): Outcome.Success<Ok>","description":"nz.adjmunro.knomadic.outcome.members.coerceToSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome.members/coerce-to-success.html","searchKeys":["coerceToSuccess","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToSuccess(recover: (Error) -> Ok): Outcome.Success<Ok>","nz.adjmunro.knomadic.outcome.members.coerceToSuccess"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrElse(faulter: (Ok) -> Error): Error","description":"nz.adjmunro.knomadic.outcome.members.errorOrElse","location":"knomadic/nz.adjmunro.knomadic.outcome.members/error-or-else.html","searchKeys":["errorOrElse","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrElse(faulter: (Ok) -> Error): Error","nz.adjmunro.knomadic.outcome.members.errorOrElse"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.falter(transform: (Ok) -> Error): Outcome.Failure<Error>","description":"nz.adjmunro.knomadic.outcome.members.falter","location":"knomadic/nz.adjmunro.knomadic.outcome.members/falter.html","searchKeys":["falter","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.falter(transform: (Ok) -> Error): Outcome.Failure<Error>","nz.adjmunro.knomadic.outcome.members.falter"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrElse(recover: (Error) -> Ok): Ok","description":"nz.adjmunro.knomadic.outcome.members.getOrElse","location":"knomadic/nz.adjmunro.knomadic.outcome.members/get-or-else.html","searchKeys":["getOrElse","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrElse(recover: (Error) -> Ok): Ok","nz.adjmunro.knomadic.outcome.members.getOrElse"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(predicate: (Error) -> Boolean): Boolean","description":"nz.adjmunro.knomadic.outcome.members.isFailure","location":"knomadic/nz.adjmunro.knomadic.outcome.members/is-failure.html","searchKeys":["isFailure","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(predicate: (Error) -> Boolean): Boolean","nz.adjmunro.knomadic.outcome.members.isFailure"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(predicate: (Ok) -> Boolean): Boolean","description":"nz.adjmunro.knomadic.outcome.members.isSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome.members/is-success.html","searchKeys":["isSuccess","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(predicate: (Ok) -> Boolean): Boolean","nz.adjmunro.knomadic.outcome.members.isSuccess"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onFailure(block: (Error) -> Unit): Outcome<Ok, Error>","description":"nz.adjmunro.knomadic.outcome.members.onFailure","location":"knomadic/nz.adjmunro.knomadic.outcome.members/on-failure.html","searchKeys":["onFailure","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onFailure(block: (Error) -> Unit): Outcome<Ok, Error>","nz.adjmunro.knomadic.outcome.members.onFailure"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onSuccess(block: (Ok) -> Unit): Outcome<Ok, Error>","description":"nz.adjmunro.knomadic.outcome.members.onSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome.members/on-success.html","searchKeys":["onSuccess","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onSuccess(block: (Ok) -> Unit): Outcome<Ok, Error>","nz.adjmunro.knomadic.outcome.members.onSuccess"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.recover(transform: (Error) -> Ok): Outcome.Success<Ok>","description":"nz.adjmunro.knomadic.outcome.members.recover","location":"knomadic/nz.adjmunro.knomadic.outcome.members/recover.html","searchKeys":["recover","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.recover(transform: (Error) -> Ok): Outcome.Success<Ok>","nz.adjmunro.knomadic.outcome.members.recover"]},{"name":"infix inline fun <Ok : Any, Error> Outcome<Ok, Error & Any>.unwrapError(faulter: (Ok) -> Error = { error(\"Outcome::unwrapError threw! Got: $this\") }): Error","description":"nz.adjmunro.knomadic.outcome.members.unwrapError","location":"knomadic/nz.adjmunro.knomadic.outcome.members/unwrap-error.html","searchKeys":["unwrapError","infix inline fun <Ok : Any, Error> Outcome<Ok, Error & Any>.unwrapError(faulter: (Ok) -> Error = { error(\"Outcome::unwrapError threw! Got: $this\") }): Error","nz.adjmunro.knomadic.outcome.members.unwrapError"]},{"name":"infix inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.flatMapFailure(transform: (ErrorIn) -> Outcome<Ok, ErrorOut>): Outcome<Ok, ErrorOut>","description":"nz.adjmunro.knomadic.outcome.members.flatMapFailure","location":"knomadic/nz.adjmunro.knomadic.outcome.members/flat-map-failure.html","searchKeys":["flatMapFailure","infix inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.flatMapFailure(transform: (ErrorIn) -> Outcome<Ok, ErrorOut>): Outcome<Ok, ErrorOut>","nz.adjmunro.knomadic.outcome.members.flatMapFailure"]},{"name":"infix inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.mapFailure(transform: (ErrorIn) -> ErrorOut): Outcome<Ok, ErrorOut>","description":"nz.adjmunro.knomadic.outcome.members.mapFailure","location":"knomadic/nz.adjmunro.knomadic.outcome.members/map-failure.html","searchKeys":["mapFailure","infix inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.mapFailure(transform: (ErrorIn) -> ErrorOut): Outcome<Ok, ErrorOut>","nz.adjmunro.knomadic.outcome.members.mapFailure"]},{"name":"infix inline fun <Ok, Error : Any> Outcome<Ok & Any, Error>.unwrap(recover: (Error) -> Ok = { error(\"Outcome::unwrap threw! Got: $this\") }): Ok","description":"nz.adjmunro.knomadic.outcome.members.unwrap","location":"knomadic/nz.adjmunro.knomadic.outcome.members/unwrap.html","searchKeys":["unwrap","infix inline fun <Ok, Error : Any> Outcome<Ok & Any, Error>.unwrap(recover: (Error) -> Ok = { error(\"Outcome::unwrap threw! Got: $this\") }): Ok","nz.adjmunro.knomadic.outcome.members.unwrap"]},{"name":"infix inline fun <T : Any> T?.fallback(none: (NullPointerException) -> T = ::rethrow): T","description":"nz.adjmunro.knomadic.util.fallback","location":"knomadic/nz.adjmunro.knomadic.util/fallback.html","searchKeys":["fallback","infix inline fun <T : Any> T?.fallback(none: (NullPointerException) -> T = ::rethrow): T","nz.adjmunro.knomadic.util.fallback"]},{"name":"infix inline fun <T, R> T?.exists(block: T & Any.() -> R): R?","description":"nz.adjmunro.knomadic.util.exists","location":"knomadic/nz.adjmunro.knomadic.util/exists.html","searchKeys":["exists","infix inline fun <T, R> T?.exists(block: T & Any.() -> R): R?","nz.adjmunro.knomadic.util.exists"]},{"name":"inline fun <Error : Any> RaiseScope<Error>.ensure(condition: Boolean, raise: () -> Error)","description":"nz.adjmunro.knomadic.raise.RaiseScope.Companion.ensure","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-companion/ensure.html","searchKeys":["ensure","inline fun <Error : Any> RaiseScope<Error>.ensure(condition: Boolean, raise: () -> Error)","nz.adjmunro.knomadic.raise.RaiseScope.Companion.ensure"]},{"name":"inline fun <Error : Any> RaiseScope<Error>.raise(error: () -> Error): Nothing","description":"nz.adjmunro.knomadic.raise.RaiseScope.Companion.raise","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-companion/raise.html","searchKeys":["raise","inline fun <Error : Any> RaiseScope<Error>.raise(error: () -> Error): Nothing","nz.adjmunro.knomadic.raise.RaiseScope.Companion.raise"]},{"name":"inline fun <Error : Any> failureOf(error: Error): Outcome.Failure<Error>","description":"nz.adjmunro.knomadic.outcome.failureOf","location":"knomadic/nz.adjmunro.knomadic.outcome/failure-of.html","searchKeys":["failureOf","inline fun <Error : Any> failureOf(error: Error): Outcome.Failure<Error>","nz.adjmunro.knomadic.outcome.failureOf"]},{"name":"inline fun <Error : Any> faultyOf(catch: (throwable: Throwable) -> Faulty<Error> = ::rethrow, block: RaiseScope<Error>.() -> Unit): Faulty<Error>","description":"nz.adjmunro.knomadic.outcome.faultyOf","location":"knomadic/nz.adjmunro.knomadic.outcome/faulty-of.html","searchKeys":["faultyOf","inline fun <Error : Any> faultyOf(catch: (throwable: Throwable) -> Faulty<Error> = ::rethrow, block: RaiseScope<Error>.() -> Unit): Faulty<Error>","nz.adjmunro.knomadic.outcome.faultyOf"]},{"name":"inline fun <Error : Throwable> Error.wrapFaulty(): Faulty<Error>","description":"nz.adjmunro.knomadic.outcome.wrapFaulty","location":"knomadic/nz.adjmunro.knomadic.outcome/wrap-faulty.html","searchKeys":["wrapFaulty","inline fun <Error : Throwable> Error.wrapFaulty(): Faulty<Error>","nz.adjmunro.knomadic.outcome.wrapFaulty"]},{"name":"inline fun <I, O> KotlinResult<I>.andThen(onSuccess: (I) -> O): KotlinResult<O>","description":"nz.adjmunro.knomadic.util.andThen","location":"knomadic/nz.adjmunro.knomadic.util/and-then.html","searchKeys":["andThen","inline fun <I, O> KotlinResult<I>.andThen(onSuccess: (I) -> O): KotlinResult<O>","nz.adjmunro.knomadic.util.andThen"]},{"name":"inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.andThen(catch: (throwable: Throwable) -> Outcome<Out, Error> = ::rethrow, success: RaiseScope<Error>.(In) -> Out): Outcome<Out, Error>","description":"nz.adjmunro.knomadic.outcome.members.andThen","location":"knomadic/nz.adjmunro.knomadic.outcome.members/and-then.html","searchKeys":["andThen","inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.andThen(catch: (throwable: Throwable) -> Outcome<Out, Error> = ::rethrow, success: RaiseScope<Error>.(In) -> Out): Outcome<Out, Error>","nz.adjmunro.knomadic.outcome.members.andThen"]},{"name":"inline fun <In : Any, Out : Any, Error : Any> OutcomeFlow<In, Error>.mapEachSuccess(crossinline transform: suspend (In) -> Out): OutcomeFlow<Out, Error>","description":"nz.adjmunro.knomadic.outcome.members.mapEachSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome.members/map-each-success.html","searchKeys":["mapEachSuccess","inline fun <In : Any, Out : Any, Error : Any> OutcomeFlow<In, Error>.mapEachSuccess(crossinline transform: suspend (In) -> Out): OutcomeFlow<Out, Error>","nz.adjmunro.knomadic.outcome.members.mapEachSuccess"]},{"name":"inline fun <In : Any, Out : Any, Error : Any> RaiseScope<Error>.fold(block: (scope: RaiseScope<Error>) -> In, catch: (throwable: Throwable) -> Out = ::rethrow, recover: (error: Error) -> Out, transform: (value: In) -> Out): Out","description":"nz.adjmunro.knomadic.raise.RaiseScope.Companion.fold","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-companion/fold.html","searchKeys":["fold","inline fun <In : Any, Out : Any, Error : Any> RaiseScope<Error>.fold(block: (scope: RaiseScope<Error>) -> In, catch: (throwable: Throwable) -> Out = ::rethrow, recover: (error: Error) -> Out, transform: (value: In) -> Out): Out","nz.adjmunro.knomadic.raise.RaiseScope.Companion.fold"]},{"name":"inline fun <In : Any, Out : Any, ErrorIn : Any, ErrorOut : Any> Outcome<In, ErrorIn>.map(success: (In) -> Out, failure: (ErrorIn) -> ErrorOut): Outcome<Out, ErrorOut>","description":"nz.adjmunro.knomadic.outcome.members.map","location":"knomadic/nz.adjmunro.knomadic.outcome.members/map.html","searchKeys":["map","inline fun <In : Any, Out : Any, ErrorIn : Any, ErrorOut : Any> Outcome<In, ErrorIn>.map(success: (In) -> Out, failure: (ErrorIn) -> ErrorOut): Outcome<Out, ErrorOut>","nz.adjmunro.knomadic.outcome.members.map"]},{"name":"inline fun <In : Any, Out : Any> Fetch<In>.flatMapFinished(transform: (result: In) -> Fetch<Out>): Fetch<Out>","description":"nz.adjmunro.knomadic.fetch.members.flatMapFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.members/flat-map-finished.html","searchKeys":["flatMapFinished","inline fun <In : Any, Out : Any> Fetch<In>.flatMapFinished(transform: (result: In) -> Fetch<Out>): Fetch<Out>","nz.adjmunro.knomadic.fetch.members.flatMapFinished"]},{"name":"inline fun <In : Any, Out : Any> Fetch<In>.mapFinished(transform: (result: In) -> Out): Fetch<Out>","description":"nz.adjmunro.knomadic.fetch.members.mapFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.members/map-finished.html","searchKeys":["mapFinished","inline fun <In : Any, Out : Any> Fetch<In>.mapFinished(transform: (result: In) -> Out): Fetch<Out>","nz.adjmunro.knomadic.fetch.members.mapFinished"]},{"name":"inline fun <In : Any, Out : Any> Fetch<In>.mapToFinished(initial: () -> Out, fetching: () -> Out, finished: (result: In) -> Out): Fetch.Finished<Out>","description":"nz.adjmunro.knomadic.fetch.members.mapToFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.members/map-to-finished.html","searchKeys":["mapToFinished","inline fun <In : Any, Out : Any> Fetch<In>.mapToFinished(initial: () -> Out, fetching: () -> Out, finished: (result: In) -> Out): Fetch.Finished<Out>","nz.adjmunro.knomadic.fetch.members.mapToFinished"]},{"name":"inline fun <In : Any, Out : Any> FetchFlow<In>.flatMapFinished(crossinline transform: suspend (result: In) -> Fetch<Out>): FetchFlow<Out>","description":"nz.adjmunro.knomadic.fetch.flow.flatMapFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/flat-map-finished.html","searchKeys":["flatMapFinished","inline fun <In : Any, Out : Any> FetchFlow<In>.flatMapFinished(crossinline transform: suspend (result: In) -> Fetch<Out>): FetchFlow<Out>","nz.adjmunro.knomadic.fetch.flow.flatMapFinished"]},{"name":"inline fun <In : Any, Out : Any> FetchFlow<In>.mapFinished(crossinline transform: suspend (result: In) -> Out): FetchFlow<Out>","description":"nz.adjmunro.knomadic.fetch.flow.mapFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/map-finished.html","searchKeys":["mapFinished","inline fun <In : Any, Out : Any> FetchFlow<In>.mapFinished(crossinline transform: suspend (result: In) -> Out): FetchFlow<Out>","nz.adjmunro.knomadic.fetch.flow.mapFinished"]},{"name":"inline fun <In : Any, Out : Any> FetchFlow<In>.mapToFinished(crossinline initial: suspend () -> Out, crossinline fetching: suspend () -> Out, crossinline finished: suspend (result: In) -> Out): Flow<Fetch.Finished<Out>>","description":"nz.adjmunro.knomadic.fetch.flow.mapToFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/map-to-finished.html","searchKeys":["mapToFinished","inline fun <In : Any, Out : Any> FetchFlow<In>.mapToFinished(crossinline initial: suspend () -> Out, crossinline fetching: suspend () -> Out, crossinline finished: suspend (result: In) -> Out): Flow<Fetch.Finished<Out>>","nz.adjmunro.knomadic.fetch.flow.mapToFinished"]},{"name":"inline fun <In, Out> In.nullfold(none: (NullPointerException) -> Out, some: (In & Any) -> Out): Out","description":"nz.adjmunro.knomadic.util.nullfold","location":"knomadic/nz.adjmunro.knomadic.util/nullfold.html","searchKeys":["nullfold","inline fun <In, Out> In.nullfold(none: (NullPointerException) -> Out, some: (In & Any) -> Out): Out","nz.adjmunro.knomadic.util.nullfold"]},{"name":"inline fun <In, Out> In.throwfold(throws: (Throwable) -> Out, pass: (In) -> Out): Out","description":"nz.adjmunro.knomadic.util.throwfold","location":"knomadic/nz.adjmunro.knomadic.util/throwfold.html","searchKeys":["throwfold","inline fun <In, Out> In.throwfold(throws: (Throwable) -> Out, pass: (In) -> Out): Out","nz.adjmunro.knomadic.util.throwfold"]},{"name":"inline fun <In, Out> KotlinResult<In>.flatMap(onSuccess: (In) -> KotlinResult<Out>): KotlinResult<Out>","description":"nz.adjmunro.knomadic.util.flatMap","location":"knomadic/nz.adjmunro.knomadic.util/flat-map.html","searchKeys":["flatMap","inline fun <In, Out> KotlinResult<In>.flatMap(onSuccess: (In) -> KotlinResult<Out>): KotlinResult<Out>","nz.adjmunro.knomadic.util.flatMap"]},{"name":"inline fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.fold(success: (Ok) -> Output, failure: (Error) -> Output): Output","description":"nz.adjmunro.knomadic.outcome.members.fold","location":"knomadic/nz.adjmunro.knomadic.outcome.members/fold.html","searchKeys":["fold","inline fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.fold(success: (Ok) -> Output, failure: (Error) -> Output): Output","nz.adjmunro.knomadic.outcome.members.fold"]},{"name":"inline fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.rfold(failure: (Error) -> Output, success: (Ok) -> Output): Output","description":"nz.adjmunro.knomadic.outcome.members.rfold","location":"knomadic/nz.adjmunro.knomadic.outcome.members/rfold.html","searchKeys":["rfold","inline fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.rfold(failure: (Error) -> Output, success: (Ok) -> Output): Output","nz.adjmunro.knomadic.outcome.members.rfold"]},{"name":"inline fun <Ok : Any, Error : Any, Output> OutcomeFlow<Ok, Error>.collapse(crossinline success: suspend (Ok) -> Output, crossinline failure: suspend (Error) -> Output): Flow<Output>","description":"nz.adjmunro.knomadic.outcome.members.collapse","location":"knomadic/nz.adjmunro.knomadic.outcome.members/collapse.html","searchKeys":["collapse","inline fun <Ok : Any, Error : Any, Output> OutcomeFlow<Ok, Error>.collapse(crossinline success: suspend (Ok) -> Output, crossinline failure: suspend (Error) -> Output): Flow<Output>","nz.adjmunro.knomadic.outcome.members.collapse"]},{"name":"inline fun <Ok : Any, Error : Any> Iterable<Outcome<Ok, Error>>.aggregate(reduce: (List<Error>) -> Error): Outcome<List<Ok>, Error>","description":"nz.adjmunro.knomadic.outcome.members.aggregate","location":"knomadic/nz.adjmunro.knomadic.outcome.members/aggregate.html","searchKeys":["aggregate","inline fun <Ok : Any, Error : Any> Iterable<Outcome<Ok, Error>>.aggregate(reduce: (List<Error>) -> Error): Outcome<List<Ok>, Error>","nz.adjmunro.knomadic.outcome.members.aggregate"]},{"name":"inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.andIf(predicate: (Ok) -> Boolean, catch: (throwable: Throwable) -> Outcome<Ok, Error> = ::rethrow, success: RaiseScope<Error>.(Ok) -> Ok): Outcome<Ok, Error>","description":"nz.adjmunro.knomadic.outcome.members.andIf","location":"knomadic/nz.adjmunro.knomadic.outcome.members/and-if.html","searchKeys":["andIf","inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.andIf(predicate: (Ok) -> Boolean, catch: (throwable: Throwable) -> Outcome<Ok, Error> = ::rethrow, success: RaiseScope<Error>.(Ok) -> Ok): Outcome<Ok, Error>","nz.adjmunro.knomadic.outcome.members.andIf"]},{"name":"inline fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.onEachFailure(crossinline block: suspend (Error) -> Unit): OutcomeFlow<Ok, Error>","description":"nz.adjmunro.knomadic.outcome.members.onEachFailure","location":"knomadic/nz.adjmunro.knomadic.outcome.members/on-each-failure.html","searchKeys":["onEachFailure","inline fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.onEachFailure(crossinline block: suspend (Error) -> Unit): OutcomeFlow<Ok, Error>","nz.adjmunro.knomadic.outcome.members.onEachFailure"]},{"name":"inline fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.onEachSuccess(crossinline block: suspend (Ok) -> Unit): OutcomeFlow<Ok, Error>","description":"nz.adjmunro.knomadic.outcome.members.onEachSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome.members/on-each-success.html","searchKeys":["onEachSuccess","inline fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.onEachSuccess(crossinline block: suspend (Ok) -> Unit): OutcomeFlow<Ok, Error>","nz.adjmunro.knomadic.outcome.members.onEachSuccess"]},{"name":"inline fun <Ok : Any, Error : Any> RaiseScope.Companion.default(action: RaiseScope<Error>.() -> Ok): Ok","description":"nz.adjmunro.knomadic.raise.RaiseScope.Companion.default","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-companion/default.html","searchKeys":["default","inline fun <Ok : Any, Error : Any> RaiseScope.Companion.default(action: RaiseScope<Error>.() -> Ok): Ok","nz.adjmunro.knomadic.raise.RaiseScope.Companion.default"]},{"name":"inline fun <Ok : Any, Error : Any> RaiseScope<Error>.catch(catch: (throwable: Throwable) -> Error = ::rethrow, block: RaiseScope<Error>.() -> Ok): Ok","description":"nz.adjmunro.knomadic.raise.RaiseScope.Companion.catch","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-companion/catch.html","searchKeys":["catch","inline fun <Ok : Any, Error : Any> RaiseScope<Error>.catch(catch: (throwable: Throwable) -> Error = ::rethrow, block: RaiseScope<Error>.() -> Ok): Ok","nz.adjmunro.knomadic.raise.RaiseScope.Companion.catch"]},{"name":"inline fun <Ok : Any, Error : Any> RaiseScope<Error>.ensureNotNull(value: Ok?, raise: () -> Error): Ok","description":"nz.adjmunro.knomadic.raise.RaiseScope.Companion.ensureNotNull","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-companion/ensure-not-null.html","searchKeys":["ensureNotNull","inline fun <Ok : Any, Error : Any> RaiseScope<Error>.ensureNotNull(value: Ok?, raise: () -> Error): Ok","nz.adjmunro.knomadic.raise.RaiseScope.Companion.ensureNotNull"]},{"name":"inline fun <Ok : Any, Error : Any> outcomeOf(catch: (throwable: Throwable) -> Outcome<Ok, Error> = ::rethrow, block: RaiseScope<Error>.() -> Ok): Outcome<Ok, Error>","description":"nz.adjmunro.knomadic.outcome.outcomeOf","location":"knomadic/nz.adjmunro.knomadic.outcome/outcome-of.html","searchKeys":["outcomeOf","inline fun <Ok : Any, Error : Any> outcomeOf(catch: (throwable: Throwable) -> Outcome<Ok, Error> = ::rethrow, block: RaiseScope<Error>.() -> Ok): Outcome<Ok, Error>","nz.adjmunro.knomadic.outcome.outcomeOf"]},{"name":"inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.tryRecover(catch: (throwable: Throwable) -> Outcome<Ok, ErrorOut> = ::rethrow, failure: RaiseScope<ErrorOut>.(ErrorIn) -> Ok): Outcome<Ok, ErrorOut>","description":"nz.adjmunro.knomadic.outcome.members.tryRecover","location":"knomadic/nz.adjmunro.knomadic.outcome.members/try-recover.html","searchKeys":["tryRecover","inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.tryRecover(catch: (throwable: Throwable) -> Outcome<Ok, ErrorOut> = ::rethrow, failure: RaiseScope<ErrorOut>.(ErrorIn) -> Ok): Outcome<Ok, ErrorOut>","nz.adjmunro.knomadic.outcome.members.tryRecover"]},{"name":"inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> OutcomeFlow<Ok, ErrorIn>.mapEachFailure(crossinline transform: suspend (ErrorIn) -> ErrorOut): OutcomeFlow<Ok, ErrorOut>","description":"nz.adjmunro.knomadic.outcome.members.mapEachFailure","location":"knomadic/nz.adjmunro.knomadic.outcome.members/map-each-failure.html","searchKeys":["mapEachFailure","inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> OutcomeFlow<Ok, ErrorIn>.mapEachFailure(crossinline transform: suspend (ErrorIn) -> ErrorOut): OutcomeFlow<Ok, ErrorOut>","nz.adjmunro.knomadic.outcome.members.mapEachFailure"]},{"name":"inline fun <Ok : Any> maybeOf(catch: (throwable: Throwable) -> Maybe<Ok> = ::rethrow, block: RaiseScope<Any>.() -> Ok): Maybe<Ok>","description":"nz.adjmunro.knomadic.outcome.maybeOf","location":"knomadic/nz.adjmunro.knomadic.outcome/maybe-of.html","searchKeys":["maybeOf","inline fun <Ok : Any> maybeOf(catch: (throwable: Throwable) -> Maybe<Ok> = ::rethrow, block: RaiseScope<Any>.() -> Ok): Maybe<Ok>","nz.adjmunro.knomadic.outcome.maybeOf"]},{"name":"inline fun <Ok : Any> successOf(value: Ok): Outcome.Success<Ok>","description":"nz.adjmunro.knomadic.outcome.successOf","location":"knomadic/nz.adjmunro.knomadic.outcome/success-of.html","searchKeys":["successOf","inline fun <Ok : Any> successOf(value: Ok): Outcome.Success<Ok>","nz.adjmunro.knomadic.outcome.successOf"]},{"name":"inline fun <T : Any, Output> Fetch<T>.fold(initial: () -> Output, fetching: () -> Output, finished: (result: T) -> Output): Output","description":"nz.adjmunro.knomadic.fetch.members.fold","location":"knomadic/nz.adjmunro.knomadic.fetch.members/fold.html","searchKeys":["fold","inline fun <T : Any, Output> Fetch<T>.fold(initial: () -> Output, fetching: () -> Output, finished: (result: T) -> Output): Output","nz.adjmunro.knomadic.fetch.members.fold"]},{"name":"inline fun <T : Any, Output> FetchFlow<T>.fold(crossinline initial: suspend () -> Output, crossinline fetching: suspend () -> Output, crossinline finished: suspend (result: T) -> Output): Flow<Output>","description":"nz.adjmunro.knomadic.fetch.flow.fold","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/fold.html","searchKeys":["fold","inline fun <T : Any, Output> FetchFlow<T>.fold(crossinline initial: suspend () -> Output, crossinline fetching: suspend () -> Output, crossinline finished: suspend (result: T) -> Output): Flow<Output>","nz.adjmunro.knomadic.fetch.flow.fold"]},{"name":"inline fun <T : Any> Fetch<T>.flatMapFetching(transform: () -> Fetch<T>): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.members.flatMapFetching","location":"knomadic/nz.adjmunro.knomadic.fetch.members/flat-map-fetching.html","searchKeys":["flatMapFetching","inline fun <T : Any> Fetch<T>.flatMapFetching(transform: () -> Fetch<T>): Fetch<T>","nz.adjmunro.knomadic.fetch.members.flatMapFetching"]},{"name":"inline fun <T : Any> Fetch<T>.flatMapInitial(transform: () -> Fetch<T>): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.members.flatMapInitial","location":"knomadic/nz.adjmunro.knomadic.fetch.members/flat-map-initial.html","searchKeys":["flatMapInitial","inline fun <T : Any> Fetch<T>.flatMapInitial(transform: () -> Fetch<T>): Fetch<T>","nz.adjmunro.knomadic.fetch.members.flatMapInitial"]},{"name":"inline fun <T : Any> Fetch<T>.getOrElse(recover: (Fetch<T>) -> T): T","description":"nz.adjmunro.knomadic.fetch.members.getOrElse","location":"knomadic/nz.adjmunro.knomadic.fetch.members/get-or-else.html","searchKeys":["getOrElse","inline fun <T : Any> Fetch<T>.getOrElse(recover: (Fetch<T>) -> T): T","nz.adjmunro.knomadic.fetch.members.getOrElse"]},{"name":"inline fun <T : Any> Fetch<T>.isFinished(predicate: (T) -> Boolean): Boolean","description":"nz.adjmunro.knomadic.fetch.members.isFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.members/is-finished.html","searchKeys":["isFinished","inline fun <T : Any> Fetch<T>.isFinished(predicate: (T) -> Boolean): Boolean","nz.adjmunro.knomadic.fetch.members.isFinished"]},{"name":"inline fun <T : Any> Fetch<T>.mapFetchingToFinished(transform: () -> T): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.members.mapFetchingToFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.members/map-fetching-to-finished.html","searchKeys":["mapFetchingToFinished","inline fun <T : Any> Fetch<T>.mapFetchingToFinished(transform: () -> T): Fetch<T>","nz.adjmunro.knomadic.fetch.members.mapFetchingToFinished"]},{"name":"inline fun <T : Any> Fetch<T>.mapInitialToFinished(transform: () -> T): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.members.mapInitialToFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.members/map-initial-to-finished.html","searchKeys":["mapInitialToFinished","inline fun <T : Any> Fetch<T>.mapInitialToFinished(transform: () -> T): Fetch<T>","nz.adjmunro.knomadic.fetch.members.mapInitialToFinished"]},{"name":"inline fun <T : Any> Fetch<T>.onFetching(action: Fetch.Fetching.() -> Unit): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.members.onFetching","location":"knomadic/nz.adjmunro.knomadic.fetch.members/on-fetching.html","searchKeys":["onFetching","inline fun <T : Any> Fetch<T>.onFetching(action: Fetch.Fetching.() -> Unit): Fetch<T>","nz.adjmunro.knomadic.fetch.members.onFetching"]},{"name":"inline fun <T : Any> Fetch<T>.onFinished(action: (T) -> Unit): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.members.onFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.members/on-finished.html","searchKeys":["onFinished","inline fun <T : Any> Fetch<T>.onFinished(action: (T) -> Unit): Fetch<T>","nz.adjmunro.knomadic.fetch.members.onFinished"]},{"name":"inline fun <T : Any> Fetch<T>.onFinished(predicate: (result: T) -> Boolean, action: (T) -> Unit): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.members.onFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.members/on-finished.html","searchKeys":["onFinished","inline fun <T : Any> Fetch<T>.onFinished(predicate: (result: T) -> Boolean, action: (T) -> Unit): Fetch<T>","nz.adjmunro.knomadic.fetch.members.onFinished"]},{"name":"inline fun <T : Any> Fetch<T>.onFinished(predicate: Boolean, action: Fetch.Finished<T>.() -> Unit): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.members.onFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.members/on-finished.html","searchKeys":["onFinished","inline fun <T : Any> Fetch<T>.onFinished(predicate: Boolean, action: Fetch.Finished<T>.() -> Unit): Fetch<T>","nz.adjmunro.knomadic.fetch.members.onFinished"]},{"name":"inline fun <T : Any> Fetch<T>.onInitial(action: Fetch.Initial.() -> Unit): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.members.onInitial","location":"knomadic/nz.adjmunro.knomadic.fetch.members/on-initial.html","searchKeys":["onInitial","inline fun <T : Any> Fetch<T>.onInitial(action: Fetch.Initial.() -> Unit): Fetch<T>","nz.adjmunro.knomadic.fetch.members.onInitial"]},{"name":"inline fun <T : Any> FetchFlow<T>.fetchOrElse(crossinline recover: suspend (Fetch<T>) -> T): Flow<T>","description":"nz.adjmunro.knomadic.fetch.flow.fetchOrElse","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/fetch-or-else.html","searchKeys":["fetchOrElse","inline fun <T : Any> FetchFlow<T>.fetchOrElse(crossinline recover: suspend (Fetch<T>) -> T): Flow<T>","nz.adjmunro.knomadic.fetch.flow.fetchOrElse"]},{"name":"inline fun <T : Any> FetchFlow<T>.flatMapFetching(crossinline transform: suspend () -> Fetch<T>): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.flow.flatMapFetching","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/flat-map-fetching.html","searchKeys":["flatMapFetching","inline fun <T : Any> FetchFlow<T>.flatMapFetching(crossinline transform: suspend () -> Fetch<T>): FetchFlow<T>","nz.adjmunro.knomadic.fetch.flow.flatMapFetching"]},{"name":"inline fun <T : Any> FetchFlow<T>.flatMapInitial(crossinline transform: suspend () -> Fetch<T>): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.flow.flatMapInitial","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/flat-map-initial.html","searchKeys":["flatMapInitial","inline fun <T : Any> FetchFlow<T>.flatMapInitial(crossinline transform: suspend () -> Fetch<T>): FetchFlow<T>","nz.adjmunro.knomadic.fetch.flow.flatMapInitial"]},{"name":"inline fun <T : Any> FetchFlow<T>.mapFetchingToFinished(crossinline transform: suspend () -> T): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.flow.mapFetchingToFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/map-fetching-to-finished.html","searchKeys":["mapFetchingToFinished","inline fun <T : Any> FetchFlow<T>.mapFetchingToFinished(crossinline transform: suspend () -> T): FetchFlow<T>","nz.adjmunro.knomadic.fetch.flow.mapFetchingToFinished"]},{"name":"inline fun <T : Any> FetchFlow<T>.mapInitialToFinished(crossinline transform: suspend () -> T): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.flow.mapInitialToFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/map-initial-to-finished.html","searchKeys":["mapInitialToFinished","inline fun <T : Any> FetchFlow<T>.mapInitialToFinished(crossinline transform: suspend () -> T): FetchFlow<T>","nz.adjmunro.knomadic.fetch.flow.mapInitialToFinished"]},{"name":"inline fun <T, R> exists(receiver: T?, block: T & Any.() -> R): R?","description":"nz.adjmunro.knomadic.util.exists","location":"knomadic/nz.adjmunro.knomadic.util/exists.html","searchKeys":["exists","inline fun <T, R> exists(receiver: T?, block: T & Any.() -> R): R?","nz.adjmunro.knomadic.util.exists"]},{"name":"inline fun <T> Fetch<T & Any>.unwrap(recover: (Fetch<T & Any>) -> T = { error(\"Fetch has not finished!\") }): T","description":"nz.adjmunro.knomadic.fetch.members.unwrap","location":"knomadic/nz.adjmunro.knomadic.fetch.members/unwrap.html","searchKeys":["unwrap","inline fun <T> Fetch<T & Any>.unwrap(recover: (Fetch<T & Any>) -> T = { error(\"Fetch has not finished!\") }): T","nz.adjmunro.knomadic.fetch.members.unwrap"]},{"name":"inline fun <T> FetchFlow<T & Any>.fetchUnwrap(crossinline recover: suspend (Fetch<T & Any>) -> T = { error(\"Fetch has not finished!\") }): Flow<T>","description":"nz.adjmunro.knomadic.fetch.flow.fetchUnwrap","location":"knomadic/nz.adjmunro.knomadic.fetch.flow/fetch-unwrap.html","searchKeys":["fetchUnwrap","inline fun <T> FetchFlow<T & Any>.fetchUnwrap(crossinline recover: suspend (Fetch<T & Any>) -> T = { error(\"Fetch has not finished!\") }): Flow<T>","nz.adjmunro.knomadic.fetch.flow.fetchUnwrap"]},{"name":"inline fun <T> Iterable<KotlinResult<T>>.aggregate(reduce: (List<Throwable>) -> Throwable): KotlinResult<List<T>>","description":"nz.adjmunro.knomadic.util.aggregate","location":"knomadic/nz.adjmunro.knomadic.util/aggregate.html","searchKeys":["aggregate","inline fun <T> Iterable<KotlinResult<T>>.aggregate(reduce: (List<Throwable>) -> Throwable): KotlinResult<List<T>>","nz.adjmunro.knomadic.util.aggregate"]},{"name":"inline fun <T> KotlinResult<Result<T>>.flatten(): KotlinResult<T>","description":"nz.adjmunro.knomadic.util.flatten","location":"knomadic/nz.adjmunro.knomadic.util/flatten.html","searchKeys":["flatten","inline fun <T> KotlinResult<Result<T>>.flatten(): KotlinResult<T>","nz.adjmunro.knomadic.util.flatten"]},{"name":"inline fun <T> KotlinResult<T>.andIf(predicate: (T) -> Boolean, onSuccess: (T) -> T): KotlinResult<T>","description":"nz.adjmunro.knomadic.util.andIf","location":"knomadic/nz.adjmunro.knomadic.util/and-if.html","searchKeys":["andIf","inline fun <T> KotlinResult<T>.andIf(predicate: (T) -> Boolean, onSuccess: (T) -> T): KotlinResult<T>","nz.adjmunro.knomadic.util.andIf"]},{"name":"inline fun <T> KotlinResult<T>.exceptionOrDefault(default: Throwable): Throwable","description":"nz.adjmunro.knomadic.util.exceptionOrDefault","location":"knomadic/nz.adjmunro.knomadic.util/exception-or-default.html","searchKeys":["exceptionOrDefault","inline fun <T> KotlinResult<T>.exceptionOrDefault(default: Throwable): Throwable","nz.adjmunro.knomadic.util.exceptionOrDefault"]},{"name":"inline fun <T> KotlinResult<T>.exceptionOrElse(onSuccess: (value: T) -> Throwable): Throwable","description":"nz.adjmunro.knomadic.util.exceptionOrElse","location":"knomadic/nz.adjmunro.knomadic.util/exception-or-else.html","searchKeys":["exceptionOrElse","inline fun <T> KotlinResult<T>.exceptionOrElse(onSuccess: (value: T) -> Throwable): Throwable","nz.adjmunro.knomadic.util.exceptionOrElse"]},{"name":"inline fun <T> KotlinResult<T>.exceptionOrThrow(): Throwable","description":"nz.adjmunro.knomadic.util.exceptionOrThrow","location":"knomadic/nz.adjmunro.knomadic.util/exception-or-throw.html","searchKeys":["exceptionOrThrow","inline fun <T> KotlinResult<T>.exceptionOrThrow(): Throwable","nz.adjmunro.knomadic.util.exceptionOrThrow"]},{"name":"inline fun <T> KotlinResult<T>.mapFailure(onFailure: (Throwable) -> Throwable): KotlinResult<T>","description":"nz.adjmunro.knomadic.util.mapFailure","location":"knomadic/nz.adjmunro.knomadic.util/map-failure.html","searchKeys":["mapFailure","inline fun <T> KotlinResult<T>.mapFailure(onFailure: (Throwable) -> Throwable): KotlinResult<T>","nz.adjmunro.knomadic.util.mapFailure"]},{"name":"inline fun <T> KotlinResult<T>.tryRecover(onFailure: (Throwable) -> T): KotlinResult<T>","description":"nz.adjmunro.knomadic.util.tryRecover","location":"knomadic/nz.adjmunro.knomadic.util/try-recover.html","searchKeys":["tryRecover","inline fun <T> KotlinResult<T>.tryRecover(onFailure: (Throwable) -> T): KotlinResult<T>","nz.adjmunro.knomadic.util.tryRecover"]},{"name":"inline fun <T> T.caller(ignore: Any? = null): T","description":"nz.adjmunro.knomadic.util.caller","location":"knomadic/nz.adjmunro.knomadic.util/caller.html","searchKeys":["caller","inline fun <T> T.caller(ignore: Any? = null): T","nz.adjmunro.knomadic.util.caller"]},{"name":"inline fun <T> T.stringCaller(ignore: Any? = null): String","description":"nz.adjmunro.knomadic.util.stringCaller","location":"knomadic/nz.adjmunro.knomadic.util/string-caller.html","searchKeys":["stringCaller","inline fun <T> T.stringCaller(ignore: Any? = null): String","nz.adjmunro.knomadic.util.stringCaller"]},{"name":"inline fun <T> T.wrapFaulty(): Faulty<Throwable>","description":"nz.adjmunro.knomadic.outcome.wrapFaulty","location":"knomadic/nz.adjmunro.knomadic.outcome/wrap-faulty.html","searchKeys":["wrapFaulty","inline fun <T> T.wrapFaulty(): Faulty<Throwable>","nz.adjmunro.knomadic.outcome.wrapFaulty"]},{"name":"inline fun <T> T.wrapMaybe(): Maybe<T & Any>","description":"nz.adjmunro.knomadic.outcome.wrapMaybe","location":"knomadic/nz.adjmunro.knomadic.outcome/wrap-maybe.html","searchKeys":["wrapMaybe","inline fun <T> T.wrapMaybe(): Maybe<T & Any>","nz.adjmunro.knomadic.outcome.wrapMaybe"]},{"name":"inline fun <T> itself(value: T): T","description":"nz.adjmunro.knomadic.util.itself","location":"knomadic/nz.adjmunro.knomadic.util/itself.html","searchKeys":["itself","inline fun <T> itself(value: T): T","nz.adjmunro.knomadic.util.itself"]},{"name":"inline fun <T> nullable(block: () -> T): T?","description":"nz.adjmunro.knomadic.util.nullable","location":"knomadic/nz.adjmunro.knomadic.util/nullable.html","searchKeys":["nullable","inline fun <T> nullable(block: () -> T): T?","nz.adjmunro.knomadic.util.nullable"]},{"name":"inline fun <T> resultOf(block: () -> T): KotlinResult<T>","description":"nz.adjmunro.knomadic.util.resultOf","location":"knomadic/nz.adjmunro.knomadic.util/result-of.html","searchKeys":["resultOf","inline fun <T> resultOf(block: () -> T): KotlinResult<T>","nz.adjmunro.knomadic.util.resultOf"]},{"name":"inline fun <T> stringItself(value: T): String","description":"nz.adjmunro.knomadic.util.stringItself","location":"knomadic/nz.adjmunro.knomadic.util/string-itself.html","searchKeys":["stringItself","inline fun <T> stringItself(value: T): String","nz.adjmunro.knomadic.util.stringItself"]},{"name":"inline fun emptyString(ignore: Any? = null): String","description":"nz.adjmunro.knomadic.util.emptyString","location":"knomadic/nz.adjmunro.knomadic.util/empty-string.html","searchKeys":["emptyString","inline fun emptyString(ignore: Any? = null): String","nz.adjmunro.knomadic.util.emptyString"]},{"name":"inline fun nulls(ignore: Any? = null): Nothing?","description":"nz.adjmunro.knomadic.util.nulls","location":"knomadic/nz.adjmunro.knomadic.util/nulls.html","searchKeys":["nulls","inline fun nulls(ignore: Any? = null): Nothing?","nz.adjmunro.knomadic.util.nulls"]},{"name":"inline fun outcomeFailed(ignore: Any? = null): Outcome.Failure<Unit>","description":"nz.adjmunro.knomadic.outcome.outcomeFailed","location":"knomadic/nz.adjmunro.knomadic.outcome/outcome-failed.html","searchKeys":["outcomeFailed","inline fun outcomeFailed(ignore: Any? = null): Outcome.Failure<Unit>","nz.adjmunro.knomadic.outcome.outcomeFailed"]},{"name":"inline fun outcomePassed(ignore: Any? = null): Outcome.Success<Unit>","description":"nz.adjmunro.knomadic.outcome.outcomePassed","location":"knomadic/nz.adjmunro.knomadic.outcome/outcome-passed.html","searchKeys":["outcomePassed","inline fun outcomePassed(ignore: Any? = null): Outcome.Success<Unit>","nz.adjmunro.knomadic.outcome.outcomePassed"]},{"name":"inline fun rethrow(throwable: Throwable): Nothing","description":"nz.adjmunro.knomadic.util.rethrow","location":"knomadic/nz.adjmunro.knomadic.util/rethrow.html","searchKeys":["rethrow","inline fun rethrow(throwable: Throwable): Nothing","nz.adjmunro.knomadic.util.rethrow"]},{"name":"inline suspend fun <T : Any> FetchCollector<T>.finished(result: T)","description":"nz.adjmunro.knomadic.fetch.finished","location":"knomadic/nz.adjmunro.knomadic.fetch/finished.html","searchKeys":["finished","inline suspend fun <T : Any> FetchCollector<T>.finished(result: T)","nz.adjmunro.knomadic.fetch.finished"]},{"name":"inline suspend fun <T> FlowCollector<T>.emit(recover: FlowCollector<T>.(Throwable) -> T = { throw it }, block: FlowCollector<T>.() -> T)","description":"nz.adjmunro.knomadic.fetch.emit","location":"knomadic/nz.adjmunro.knomadic.fetch/emit.html","searchKeys":["emit","inline suspend fun <T> FlowCollector<T>.emit(recover: FlowCollector<T>.(Throwable) -> T = { throw it }, block: FlowCollector<T>.() -> T)","nz.adjmunro.knomadic.fetch.emit"]},{"name":"inline suspend fun FetchCollector<Nothing>.fetching()","description":"nz.adjmunro.knomadic.fetch.fetching","location":"knomadic/nz.adjmunro.knomadic.fetch/fetching.html","searchKeys":["fetching","inline suspend fun FetchCollector<Nothing>.fetching()","nz.adjmunro.knomadic.fetch.fetching"]},{"name":"inline suspend fun FetchCollector<Nothing>.reset()","description":"nz.adjmunro.knomadic.fetch.reset","location":"knomadic/nz.adjmunro.knomadic.fetch/reset.html","searchKeys":["reset","inline suspend fun FetchCollector<Nothing>.reset()","nz.adjmunro.knomadic.fetch.reset"]},{"name":"object Companion","description":"nz.adjmunro.knomadic.raise.RaiseScope.Companion","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-companion/index.html","searchKeys":["Companion","object Companion","nz.adjmunro.knomadic.raise.RaiseScope.Companion"]},{"name":"open operator fun component1(): Ok?","description":"nz.adjmunro.knomadic.outcome.Outcome.component1","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/component1.html","searchKeys":["component1","open operator fun component1(): Ok?","nz.adjmunro.knomadic.outcome.Outcome.component1"]},{"name":"open operator fun component2(): Error?","description":"nz.adjmunro.knomadic.outcome.Outcome.component2","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/component2.html","searchKeys":["component2","open operator fun component2(): Error?","nz.adjmunro.knomadic.outcome.Outcome.component2"]},{"name":"open operator override fun component1(): Ok","description":"nz.adjmunro.knomadic.outcome.Outcome.Success.component1","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-success/component1.html","searchKeys":["component1","open operator override fun component1(): Ok","nz.adjmunro.knomadic.outcome.Outcome.Success.component1"]},{"name":"open operator override fun component2(): Error","description":"nz.adjmunro.knomadic.outcome.Outcome.Failure.component2","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-failure/component2.html","searchKeys":["component2","open operator override fun component2(): Error","nz.adjmunro.knomadic.outcome.Outcome.Failure.component2"]},{"name":"open override fun complete()","description":"nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise.complete","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-default-raise/complete.html","searchKeys":["complete","open override fun complete()","nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise.complete"]},{"name":"open override fun raised(error: Error): Nothing","description":"nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise.raised","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-default-raise/raised.html","searchKeys":["raised","open override fun raised(error: Error): Nothing","nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise.raised"]},{"name":"open override fun toString(): String","description":"nz.adjmunro.knomadic.fetch.Fetch.Finished.toString","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-finished/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.adjmunro.knomadic.fetch.Fetch.Finished.toString"]},{"name":"open override fun toString(): String","description":"nz.adjmunro.knomadic.outcome.Outcome.Failure.toString","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-failure/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.adjmunro.knomadic.outcome.Outcome.Failure.toString"]},{"name":"open override fun toString(): String","description":"nz.adjmunro.knomadic.outcome.Outcome.Success.toString","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-success/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.adjmunro.knomadic.outcome.Outcome.Success.toString"]},{"name":"open suspend override fun collectSafely(collector: FetchCollector<T>)","description":"nz.adjmunro.knomadic.fetch.SafeFetchFlow.collectSafely","location":"knomadic/nz.adjmunro.knomadic.fetch/-safe-fetch-flow/collect-safely.html","searchKeys":["collectSafely","open suspend override fun collectSafely(collector: FetchCollector<T>)","nz.adjmunro.knomadic.fetch.SafeFetchFlow.collectSafely"]},{"name":"operator fun component1(): T","description":"nz.adjmunro.knomadic.fetch.Fetch.Finished.component1","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-finished/component1.html","searchKeys":["component1","operator fun component1(): T","nz.adjmunro.knomadic.fetch.Fetch.Finished.component1"]},{"name":"sealed interface Fetch<out T : Any>","description":"nz.adjmunro.knomadic.fetch.Fetch","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/index.html","searchKeys":["Fetch","sealed interface Fetch<out T : Any>","nz.adjmunro.knomadic.fetch.Fetch"]},{"name":"sealed interface Outcome<out Ok : Any, out Error : Any>","description":"nz.adjmunro.knomadic.outcome.Outcome","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/index.html","searchKeys":["Outcome","sealed interface Outcome<out Ok : Any, out Error : Any>","nz.adjmunro.knomadic.outcome.Outcome"]},{"name":"sealed interface RaiseScope<in Error : Any>","description":"nz.adjmunro.knomadic.raise.RaiseScope","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/index.html","searchKeys":["RaiseScope","sealed interface RaiseScope<in Error : Any>","nz.adjmunro.knomadic.raise.RaiseScope"]},{"name":"typealias Faulty<Error> = Outcome<Unit, Error>","description":"nz.adjmunro.knomadic.outcome.Faulty","location":"knomadic/nz.adjmunro.knomadic.outcome/-faulty/index.html","searchKeys":["Faulty","typealias Faulty<Error> = Outcome<Unit, Error>","nz.adjmunro.knomadic.outcome.Faulty"]},{"name":"typealias FaultyFetch<Error> = Flow<Fetch<Faulty<Error>>>","description":"nz.adjmunro.knomadic.FaultyFetch","location":"knomadic/nz.adjmunro.knomadic/-faulty-fetch/index.html","searchKeys":["FaultyFetch","typealias FaultyFetch<Error> = Flow<Fetch<Faulty<Error>>>","nz.adjmunro.knomadic.FaultyFetch"]},{"name":"typealias FaultyFlow<Error> = Flow<Faulty<Error>>","description":"nz.adjmunro.knomadic.FaultyFlow","location":"knomadic/nz.adjmunro.knomadic/-faulty-flow/index.html","searchKeys":["FaultyFlow","typealias FaultyFlow<Error> = Flow<Faulty<Error>>","nz.adjmunro.knomadic.FaultyFlow"]},{"name":"typealias FaultyScope<Error> = RaiseScope<Error>.() -> Unit","description":"nz.adjmunro.knomadic.FaultyScope","location":"knomadic/nz.adjmunro.knomadic/-faulty-scope/index.html","searchKeys":["FaultyScope","typealias FaultyScope<Error> = RaiseScope<Error>.() -> Unit","nz.adjmunro.knomadic.FaultyScope"]},{"name":"typealias FetchFlow<T> = Flow<Fetch<T>>","description":"nz.adjmunro.knomadic.FetchFlow","location":"knomadic/nz.adjmunro.knomadic/-fetch-flow/index.html","searchKeys":["FetchFlow","typealias FetchFlow<T> = Flow<Fetch<T>>","nz.adjmunro.knomadic.FetchFlow"]},{"name":"typealias KotlinResult<T> = Result<T>","description":"nz.adjmunro.knomadic.KotlinResult","location":"knomadic/nz.adjmunro.knomadic/-kotlin-result/index.html","searchKeys":["KotlinResult","typealias KotlinResult<T> = Result<T>","nz.adjmunro.knomadic.KotlinResult"]},{"name":"typealias Maybe<Ok> = Outcome<Ok, Unit>","description":"nz.adjmunro.knomadic.outcome.Maybe","location":"knomadic/nz.adjmunro.knomadic.outcome/-maybe/index.html","searchKeys":["Maybe","typealias Maybe<Ok> = Outcome<Ok, Unit>","nz.adjmunro.knomadic.outcome.Maybe"]},{"name":"typealias MaybeFetch<Ok> = Flow<Fetch<Maybe<Ok>>>","description":"nz.adjmunro.knomadic.MaybeFetch","location":"knomadic/nz.adjmunro.knomadic/-maybe-fetch/index.html","searchKeys":["MaybeFetch","typealias MaybeFetch<Ok> = Flow<Fetch<Maybe<Ok>>>","nz.adjmunro.knomadic.MaybeFetch"]},{"name":"typealias MaybeFlow<Ok> = Flow<Maybe<Ok>>","description":"nz.adjmunro.knomadic.MaybeFlow","location":"knomadic/nz.adjmunro.knomadic/-maybe-flow/index.html","searchKeys":["MaybeFlow","typealias MaybeFlow<Ok> = Flow<Maybe<Ok>>","nz.adjmunro.knomadic.MaybeFlow"]},{"name":"typealias MaybeScope<Ok> = RaiseScope<Any>.() -> Ok","description":"nz.adjmunro.knomadic.MaybeScope","location":"knomadic/nz.adjmunro.knomadic/-maybe-scope/index.html","searchKeys":["MaybeScope","typealias MaybeScope<Ok> = RaiseScope<Any>.() -> Ok","nz.adjmunro.knomadic.MaybeScope"]},{"name":"typealias OutcomeFetch<Ok, Error> = Flow<Fetch<Outcome<Ok, Error>>>","description":"nz.adjmunro.knomadic.OutcomeFetch","location":"knomadic/nz.adjmunro.knomadic/-outcome-fetch/index.html","searchKeys":["OutcomeFetch","typealias OutcomeFetch<Ok, Error> = Flow<Fetch<Outcome<Ok, Error>>>","nz.adjmunro.knomadic.OutcomeFetch"]},{"name":"typealias OutcomeFlow<Ok, Error> = Flow<Outcome<Ok, Error>>","description":"nz.adjmunro.knomadic.OutcomeFlow","location":"knomadic/nz.adjmunro.knomadic/-outcome-flow/index.html","searchKeys":["OutcomeFlow","typealias OutcomeFlow<Ok, Error> = Flow<Outcome<Ok, Error>>","nz.adjmunro.knomadic.OutcomeFlow"]},{"name":"typealias OutcomeScope<Ok, Error> = RaiseScope<Error>.() -> Ok","description":"nz.adjmunro.knomadic.OutcomeScope","location":"knomadic/nz.adjmunro.knomadic/-outcome-scope/index.html","searchKeys":["OutcomeScope","typealias OutcomeScope<Ok, Error> = RaiseScope<Error>.() -> Ok","nz.adjmunro.knomadic.OutcomeScope"]},{"name":"typealias ResultFetch<Ok> = Flow<Fetch<KotlinResult<Ok>>>","description":"nz.adjmunro.knomadic.ResultFetch","location":"knomadic/nz.adjmunro.knomadic/-result-fetch/index.html","searchKeys":["ResultFetch","typealias ResultFetch<Ok> = Flow<Fetch<KotlinResult<Ok>>>","nz.adjmunro.knomadic.ResultFetch"]},{"name":"typealias ResultFlow<Ok> = Flow<KotlinResult<Ok>>","description":"nz.adjmunro.knomadic.ResultFlow","location":"knomadic/nz.adjmunro.knomadic/-result-flow/index.html","searchKeys":["ResultFlow","typealias ResultFlow<Ok> = Flow<KotlinResult<Ok>>","nz.adjmunro.knomadic.ResultFlow"]},{"name":"val <Ok : Any, Err : Any, Eri : Err, Ero : Err> Outcome<Outcome<Ok, Eri>, Ero>.flatten: Outcome<Ok, Err>","description":"nz.adjmunro.knomadic.outcome.members.flatten","location":"knomadic/nz.adjmunro.knomadic.outcome.members/flatten.html","searchKeys":["flatten","val <Ok : Any, Err : Any, Eri : Err, Ero : Err> Outcome<Outcome<Ok, Eri>, Ero>.flatten: Outcome<Ok, Err>","nz.adjmunro.knomadic.outcome.members.flatten"]},{"name":"val <Ok : Any, Err : Any, Oki : Ok, Oko : Ok> Outcome<Oko, Outcome<Oki, Err>>.flatten: Outcome<Ok, Err>","description":"nz.adjmunro.knomadic.outcome.members.flatten","location":"knomadic/nz.adjmunro.knomadic.outcome.members/flatten.html","searchKeys":["flatten","val <Ok : Any, Err : Any, Oki : Ok, Oko : Ok> Outcome<Oko, Outcome<Oki, Err>>.flatten: Outcome<Ok, Err>","nz.adjmunro.knomadic.outcome.members.flatten"]},{"name":"val <Ok : Any, Err : Any, Oks : Ok, Ers : Err, Okf : Ok, Erf : Err> Outcome<Outcome<Oks, Ers>, Outcome<Okf, Erf>>.flatten: Outcome<Ok, Err>","description":"nz.adjmunro.knomadic.outcome.members.flatten","location":"knomadic/nz.adjmunro.knomadic.outcome.members/flatten.html","searchKeys":["flatten","val <Ok : Any, Err : Any, Oks : Ok, Ers : Err, Okf : Ok, Erf : Err> Outcome<Outcome<Oks, Ers>, Outcome<Okf, Erf>>.flatten: Outcome<Ok, Err>","nz.adjmunro.knomadic.outcome.members.flatten"]},{"name":"val <T : Any> Fetch<Fetch<T>>.flatten: Fetch<T>","description":"nz.adjmunro.knomadic.fetch.members.flatten","location":"knomadic/nz.adjmunro.knomadic.fetch.members/flatten.html","searchKeys":["flatten","val <T : Any> Fetch<Fetch<T>>.flatten: Fetch<T>","nz.adjmunro.knomadic.fetch.members.flatten"]},{"name":"val <T : Any> Fetch<T>.isFetching: Boolean","description":"nz.adjmunro.knomadic.fetch.members.isFetching","location":"knomadic/nz.adjmunro.knomadic.fetch.members/is-fetching.html","searchKeys":["isFetching","val <T : Any> Fetch<T>.isFetching: Boolean","nz.adjmunro.knomadic.fetch.members.isFetching"]},{"name":"val <T : Any> Fetch<T>.isNotFetching: Boolean","description":"nz.adjmunro.knomadic.fetch.members.isNotFetching","location":"knomadic/nz.adjmunro.knomadic.fetch.members/is-not-fetching.html","searchKeys":["isNotFetching","val <T : Any> Fetch<T>.isNotFetching: Boolean","nz.adjmunro.knomadic.fetch.members.isNotFetching"]},{"name":"val <T : Any> Fetch<T>.isNotFinished: Boolean","description":"nz.adjmunro.knomadic.fetch.members.isNotFinished","location":"knomadic/nz.adjmunro.knomadic.fetch.members/is-not-finished.html","searchKeys":["isNotFinished","val <T : Any> Fetch<T>.isNotFinished: Boolean","nz.adjmunro.knomadic.fetch.members.isNotFinished"]},{"name":"val <T : Any> Fetch<T>.isNotStarted: Boolean","description":"nz.adjmunro.knomadic.fetch.members.isNotStarted","location":"knomadic/nz.adjmunro.knomadic.fetch.members/is-not-started.html","searchKeys":["isNotStarted","val <T : Any> Fetch<T>.isNotStarted: Boolean","nz.adjmunro.knomadic.fetch.members.isNotStarted"]},{"name":"val <T : Any> Fetch<T>.isStarted: Boolean","description":"nz.adjmunro.knomadic.fetch.members.isStarted","location":"knomadic/nz.adjmunro.knomadic.fetch.members/is-started.html","searchKeys":["isStarted","val <T : Any> Fetch<T>.isStarted: Boolean","nz.adjmunro.knomadic.fetch.members.isStarted"]},{"name":"val cache: Ok? = null","description":"nz.adjmunro.knomadic.fetch.ErrorWithCache.cache","location":"knomadic/nz.adjmunro.knomadic.fetch/-error-with-cache/cache.html","searchKeys":["cache","val cache: Ok? = null","nz.adjmunro.knomadic.fetch.ErrorWithCache.cache"]},{"name":"val error: Error","description":"nz.adjmunro.knomadic.fetch.ErrorWithCache.error","location":"knomadic/nz.adjmunro.knomadic.fetch/-error-with-cache/error.html","searchKeys":["error","val error: Error","nz.adjmunro.knomadic.fetch.ErrorWithCache.error"]},{"name":"val error: Error","description":"nz.adjmunro.knomadic.outcome.Outcome.Failure.error","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-failure/error.html","searchKeys":["error","val error: Error","nz.adjmunro.knomadic.outcome.Outcome.Failure.error"]},{"name":"val hasCache: Boolean","description":"nz.adjmunro.knomadic.fetch.ErrorWithCache.hasCache","location":"knomadic/nz.adjmunro.knomadic.fetch/-error-with-cache/has-cache.html","searchKeys":["hasCache","val hasCache: Boolean","nz.adjmunro.knomadic.fetch.ErrorWithCache.hasCache"]},{"name":"val result: T","description":"nz.adjmunro.knomadic.fetch.Fetch.Finished.result","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-finished/result.html","searchKeys":["result","val result: T","nz.adjmunro.knomadic.fetch.Fetch.Finished.result"]},{"name":"val value: Ok","description":"nz.adjmunro.knomadic.outcome.Outcome.Success.value","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-success/value.html","searchKeys":["value","val value: Ok","nz.adjmunro.knomadic.outcome.Outcome.Success.value"]},{"name":"value class Failure<out Error : Any>(val error: Error) : Outcome<Nothing, Error> ","description":"nz.adjmunro.knomadic.outcome.Outcome.Failure","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-failure/index.html","searchKeys":["Failure","value class Failure<out Error : Any>(val error: Error) : Outcome<Nothing, Error> ","nz.adjmunro.knomadic.outcome.Outcome.Failure"]},{"name":"value class Finished<out T : Any>(val result: T) : Fetch<T> ","description":"nz.adjmunro.knomadic.fetch.Fetch.Finished","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-finished/index.html","searchKeys":["Finished","value class Finished<out T : Any>(val result: T) : Fetch<T> ","nz.adjmunro.knomadic.fetch.Fetch.Finished"]},{"name":"value class Success<out Ok : Any>(val value: Ok) : Outcome<Ok, Nothing> ","description":"nz.adjmunro.knomadic.outcome.Outcome.Success","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-success/index.html","searchKeys":["Success","value class Success<out Ok : Any>(val value: Ok) : Outcome<Ok, Nothing> ","nz.adjmunro.knomadic.outcome.Outcome.Success"]}]