[{"name":"abstract fun complete()","description":"nz.adjmunro.outcome.raise.RaiseScope.complete","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/complete.html","searchKeys":["complete","abstract fun complete()","nz.adjmunro.outcome.raise.RaiseScope.complete"]},{"name":"abstract fun raised(error: Error): Nothing","description":"nz.adjmunro.outcome.raise.RaiseScope.raised","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/raised.html","searchKeys":["raised","abstract fun raised(error: Error): Nothing","nz.adjmunro.outcome.raise.RaiseScope.raised"]},{"name":"class DefaultRaise<in Error : Any> : RaiseScope<Error> ","description":"nz.adjmunro.outcome.raise.RaiseScope.DefaultRaise","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/-default-raise/index.html","searchKeys":["DefaultRaise","class DefaultRaise<in Error : Any> : RaiseScope<Error> ","nz.adjmunro.outcome.raise.RaiseScope.DefaultRaise"]},{"name":"class SafeFetchFlow<T : Any> : AbstractFlow<Fetch<T>> , Flow<Fetch<T>> ","description":"nz.adjmunro.outcome.fetch.SafeFetchFlow","location":"outcome/nz.adjmunro.outcome.fetch/-safe-fetch-flow/index.html","searchKeys":["SafeFetchFlow","class SafeFetchFlow<T : Any> : AbstractFlow<Fetch<T>> , Flow<Fetch<T>> ","nz.adjmunro.outcome.fetch.SafeFetchFlow"]},{"name":"constructor(cache: T? = null)","description":"nz.adjmunro.outcome.fetch.Fetching.Fetching","location":"outcome/nz.adjmunro.outcome.fetch/-fetching/-fetching.html","searchKeys":["Fetching","constructor(cache: T? = null)","nz.adjmunro.outcome.fetch.Fetching.Fetching"]},{"name":"constructor(error: Error)","description":"nz.adjmunro.outcome.outcome.Failure.Failure","location":"outcome/nz.adjmunro.outcome.outcome/-failure/-failure.html","searchKeys":["Failure","constructor(error: Error)","nz.adjmunro.outcome.outcome.Failure.Failure"]},{"name":"constructor(error: Error, cache: Ok? = null)","description":"nz.adjmunro.outcome.fetch.ErrorWithCache.ErrorWithCache","location":"outcome/nz.adjmunro.outcome.fetch/-error-with-cache/-error-with-cache.html","searchKeys":["ErrorWithCache","constructor(error: Error, cache: Ok? = null)","nz.adjmunro.outcome.fetch.ErrorWithCache.ErrorWithCache"]},{"name":"constructor(result: T)","description":"nz.adjmunro.outcome.fetch.Finished.Finished","location":"outcome/nz.adjmunro.outcome.fetch/-finished/-finished.html","searchKeys":["Finished","constructor(result: T)","nz.adjmunro.outcome.fetch.Finished.Finished"]},{"name":"constructor(value: Ok)","description":"nz.adjmunro.outcome.outcome.Success.Success","location":"outcome/nz.adjmunro.outcome.outcome/-success/-success.html","searchKeys":["Success","constructor(value: Ok)","nz.adjmunro.outcome.outcome.Success.Success"]},{"name":"data class ErrorWithCache<out Ok : Any, out Error : Any>(val error: Error, val cache: Ok? = null)","description":"nz.adjmunro.outcome.fetch.ErrorWithCache","location":"outcome/nz.adjmunro.outcome.fetch/-error-with-cache/index.html","searchKeys":["ErrorWithCache","data class ErrorWithCache<out Ok : Any, out Error : Any>(val error: Error, val cache: Ok? = null)","nz.adjmunro.outcome.fetch.ErrorWithCache"]},{"name":"data object Prefetch : Fetch<Nothing> ","description":"nz.adjmunro.outcome.fetch.Prefetch","location":"outcome/nz.adjmunro.outcome.fetch/-prefetch/index.html","searchKeys":["Prefetch","data object Prefetch : Fetch<Nothing> ","nz.adjmunro.outcome.fetch.Prefetch"]},{"name":"fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> Outcome<Ok, Error>.collapse(): Ancestor","description":"nz.adjmunro.outcome.outcome.members.collapse","location":"outcome/nz.adjmunro.outcome.outcome.members/collapse.html","searchKeys":["collapse","fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> Outcome<Ok, Error>.collapse(): Ancestor","nz.adjmunro.outcome.outcome.members.collapse"]},{"name":"fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> OutcomeFlow<Ok, Error>.collapse(): Flow<Ancestor>","description":"nz.adjmunro.outcome.outcome.flow.collapse","location":"outcome/nz.adjmunro.outcome.outcome.flow/collapse.html","searchKeys":["collapse","fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> OutcomeFlow<Ok, Error>.collapse(): Flow<Ancestor>","nz.adjmunro.outcome.outcome.flow.collapse"]},{"name":"fun <Error : Throwable> Error.nonFatalOrThrow(): Error","description":"nz.adjmunro.outcome.util.nonFatalOrThrow","location":"outcome/nz.adjmunro.outcome.util/non-fatal-or-throw.html","searchKeys":["nonFatalOrThrow","fun <Error : Throwable> Error.nonFatalOrThrow(): Error","nz.adjmunro.outcome.util.nonFatalOrThrow"]},{"name":"fun <In, Out> Sequence<KotlinResult<In>>.andThenEach(success: (In) -> Out): Sequence<KotlinResult<Out>>","description":"nz.adjmunro.outcome.result.members.andThenEach","location":"outcome/nz.adjmunro.outcome.result.members/and-then-each.html","searchKeys":["andThenEach","fun <In, Out> Sequence<KotlinResult<In>>.andThenEach(success: (In) -> Out): Sequence<KotlinResult<Out>>","nz.adjmunro.outcome.result.members.andThenEach"]},{"name":"fun <In, Out> Sequence<KotlinResult<In>>.foldEach(success: (In) -> Out, failure: (Throwable) -> Out): Sequence<Out>","description":"nz.adjmunro.outcome.result.members.foldEach","location":"outcome/nz.adjmunro.outcome.result.members/fold-each.html","searchKeys":["foldEach","fun <In, Out> Sequence<KotlinResult<In>>.foldEach(success: (In) -> Out, failure: (Throwable) -> Out): Sequence<Out>","nz.adjmunro.outcome.result.members.foldEach"]},{"name":"fun <Ok : Any, EmbeddedError : AncestorError, OuterError : AncestorError, AncestorError : Any> Outcome<Outcome<Ok, EmbeddedError>, OuterError>.flattenNestedSuccess(): Outcome<Ok, AncestorError>","description":"nz.adjmunro.outcome.outcome.members.flattenNestedSuccess","location":"outcome/nz.adjmunro.outcome.outcome.members/flatten-nested-success.html","searchKeys":["flattenNestedSuccess","fun <Ok : Any, EmbeddedError : AncestorError, OuterError : AncestorError, AncestorError : Any> Outcome<Outcome<Ok, EmbeddedError>, OuterError>.flattenNestedSuccess(): Outcome<Ok, AncestorError>","nz.adjmunro.outcome.outcome.members.flattenNestedSuccess"]},{"name":"fun <Ok : Any, Error : Any> Ok.outcome(predicate: Ok.() -> Boolean, faulter: Ok.() -> Error): Outcome<Ok, Error>","description":"nz.adjmunro.outcome.outcome.members.outcome","location":"outcome/nz.adjmunro.outcome.outcome.members/outcome.html","searchKeys":["outcome","fun <Ok : Any, Error : Any> Ok.outcome(predicate: Ok.() -> Boolean, faulter: Ok.() -> Error): Outcome<Ok, Error>","nz.adjmunro.outcome.outcome.members.outcome"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrNull(): Error?","description":"nz.adjmunro.outcome.outcome.members.errorOrNull","location":"outcome/nz.adjmunro.outcome.outcome.members/error-or-null.html","searchKeys":["errorOrNull","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrNull(): Error?","nz.adjmunro.outcome.outcome.members.errorOrNull"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrThrow(): Error","description":"nz.adjmunro.outcome.outcome.members.errorOrThrow","location":"outcome/nz.adjmunro.outcome.outcome.members/error-or-throw.html","searchKeys":["errorOrThrow","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrThrow(): Error","nz.adjmunro.outcome.outcome.members.errorOrThrow"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrNull(): Ok?","description":"nz.adjmunro.outcome.outcome.members.getOrNull","location":"outcome/nz.adjmunro.outcome.outcome.members/get-or-null.html","searchKeys":["getOrNull","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrNull(): Ok?","nz.adjmunro.outcome.outcome.members.getOrNull"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrThrow(): Ok","description":"nz.adjmunro.outcome.outcome.members.getOrThrow","location":"outcome/nz.adjmunro.outcome.outcome.members/get-or-throw.html","searchKeys":["getOrThrow","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrThrow(): Ok","nz.adjmunro.outcome.outcome.members.getOrThrow"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.invert(): Outcome<Error, Ok>","description":"nz.adjmunro.outcome.outcome.members.invert","location":"outcome/nz.adjmunro.outcome.outcome.members/invert.html","searchKeys":["invert","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.invert(): Outcome<Error, Ok>","nz.adjmunro.outcome.outcome.members.invert"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(): Boolean","description":"nz.adjmunro.outcome.outcome.members.isFailure","location":"outcome/nz.adjmunro.outcome.outcome.members/is-failure.html","searchKeys":["isFailure","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(): Boolean","nz.adjmunro.outcome.outcome.members.isFailure"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(): Boolean","description":"nz.adjmunro.outcome.outcome.members.isSuccess","location":"outcome/nz.adjmunro.outcome.outcome.members/is-success.html","searchKeys":["isSuccess","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(): Boolean","nz.adjmunro.outcome.outcome.members.isSuccess"]},{"name":"fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.filterOnlyFailure(): Flow<Error>","description":"nz.adjmunro.outcome.outcome.flow.filterOnlyFailure","location":"outcome/nz.adjmunro.outcome.outcome.flow/filter-only-failure.html","searchKeys":["filterOnlyFailure","fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.filterOnlyFailure(): Flow<Error>","nz.adjmunro.outcome.outcome.flow.filterOnlyFailure"]},{"name":"fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.filterOnlySuccess(): Flow<Ok>","description":"nz.adjmunro.outcome.outcome.flow.filterOnlySuccess","location":"outcome/nz.adjmunro.outcome.outcome.flow/filter-only-success.html","searchKeys":["filterOnlySuccess","fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.filterOnlySuccess(): Flow<Ok>","nz.adjmunro.outcome.outcome.flow.filterOnlySuccess"]},{"name":"fun <Ok : Any> Fetch<Ok>.toMaybe(): Maybe<Ok>","description":"nz.adjmunro.outcome.fetch.members.toMaybe","location":"outcome/nz.adjmunro.outcome.fetch.members/to-maybe.html","searchKeys":["toMaybe","fun <Ok : Any> Fetch<Ok>.toMaybe(): Maybe<Ok>","nz.adjmunro.outcome.fetch.members.toMaybe"]},{"name":"fun <Ok : Any> Fetch<Ok>.toOutcome(): Outcome<Ok, Throwable>","description":"nz.adjmunro.outcome.fetch.members.toOutcome","location":"outcome/nz.adjmunro.outcome.fetch.members/to-outcome.html","searchKeys":["toOutcome","fun <Ok : Any> Fetch<Ok>.toOutcome(): Outcome<Ok, Throwable>","nz.adjmunro.outcome.fetch.members.toOutcome"]},{"name":"fun <Ok : Any> FetchFlow<Ok>.mapToMaybe(): MaybeFlow<Ok>","description":"nz.adjmunro.outcome.fetch.flow.mapToMaybe","location":"outcome/nz.adjmunro.outcome.fetch.flow/map-to-maybe.html","searchKeys":["mapToMaybe","fun <Ok : Any> FetchFlow<Ok>.mapToMaybe(): MaybeFlow<Ok>","nz.adjmunro.outcome.fetch.flow.mapToMaybe"]},{"name":"fun <Ok : Any> FetchFlow<Ok>.mapToOutcome(): OutcomeFlow<Ok, Throwable>","description":"nz.adjmunro.outcome.fetch.flow.mapToOutcome","location":"outcome/nz.adjmunro.outcome.fetch.flow/map-to-outcome.html","searchKeys":["mapToOutcome","fun <Ok : Any> FetchFlow<Ok>.mapToOutcome(): OutcomeFlow<Ok, Throwable>","nz.adjmunro.outcome.fetch.flow.mapToOutcome"]},{"name":"fun <OuterOk : AncestorOk, EmbeddedOk : AncestorOk, Error : Any, AncestorOk : Any> Outcome<OuterOk, Outcome<EmbeddedOk, Error>>.flattenNestedFailure(): Outcome<AncestorOk, Error>","description":"nz.adjmunro.outcome.outcome.members.flattenNestedFailure","location":"outcome/nz.adjmunro.outcome.outcome.members/flatten-nested-failure.html","searchKeys":["flattenNestedFailure","fun <OuterOk : AncestorOk, EmbeddedOk : AncestorOk, Error : Any, AncestorOk : Any> Outcome<OuterOk, Outcome<EmbeddedOk, Error>>.flattenNestedFailure(): Outcome<AncestorOk, Error>","nz.adjmunro.outcome.outcome.members.flattenNestedFailure"]},{"name":"fun <SuccessOk : AncestorOk, SuccessError : AncestorError, FailureOk : AncestorOk, FailureError : AncestorError, AncestorOk : Any, AncestorError : Any> Outcome<Outcome<SuccessOk, SuccessError>, Outcome<FailureOk, FailureError>>.flattenNestedBoth(): Outcome<AncestorOk, AncestorError>","description":"nz.adjmunro.outcome.outcome.members.flattenNestedBoth","location":"outcome/nz.adjmunro.outcome.outcome.members/flatten-nested-both.html","searchKeys":["flattenNestedBoth","fun <SuccessOk : AncestorOk, SuccessError : AncestorError, FailureOk : AncestorOk, FailureError : AncestorError, AncestorOk : Any, AncestorError : Any> Outcome<Outcome<SuccessOk, SuccessError>, Outcome<FailureOk, FailureError>>.flattenNestedBoth(): Outcome<AncestorOk, AncestorError>","nz.adjmunro.outcome.outcome.members.flattenNestedBoth"]},{"name":"fun <T : Any> Fetch<T>.getOrNull(): T?","description":"nz.adjmunro.outcome.fetch.members.getOrNull","location":"outcome/nz.adjmunro.outcome.fetch.members/get-or-null.html","searchKeys":["getOrNull","fun <T : Any> Fetch<T>.getOrNull(): T?","nz.adjmunro.outcome.fetch.members.getOrNull"]},{"name":"fun <T : Any> Fetch<T>.getOrThrow(): T","description":"nz.adjmunro.outcome.fetch.members.getOrThrow","location":"outcome/nz.adjmunro.outcome.fetch.members/get-or-throw.html","searchKeys":["getOrThrow","fun <T : Any> Fetch<T>.getOrThrow(): T","nz.adjmunro.outcome.fetch.members.getOrThrow"]},{"name":"fun <T : Any> Fetch<T>.isFetching(): Boolean","description":"nz.adjmunro.outcome.fetch.members.isFetching","location":"outcome/nz.adjmunro.outcome.fetch.members/is-fetching.html","searchKeys":["isFetching","fun <T : Any> Fetch<T>.isFetching(): Boolean","nz.adjmunro.outcome.fetch.members.isFetching"]},{"name":"fun <T : Any> Fetch<T>.isFinished(): Boolean","description":"nz.adjmunro.outcome.fetch.members.isFinished","location":"outcome/nz.adjmunro.outcome.fetch.members/is-finished.html","searchKeys":["isFinished","fun <T : Any> Fetch<T>.isFinished(): Boolean","nz.adjmunro.outcome.fetch.members.isFinished"]},{"name":"fun <T : Any> Fetch<T>.isPrefetch(): Boolean","description":"nz.adjmunro.outcome.fetch.members.isPrefetch","location":"outcome/nz.adjmunro.outcome.fetch.members/is-prefetch.html","searchKeys":["isPrefetch","fun <T : Any> Fetch<T>.isPrefetch(): Boolean","nz.adjmunro.outcome.fetch.members.isPrefetch"]},{"name":"fun <T : Any> Fetch<T>.toKotlinResult(): KotlinResult<T>","description":"nz.adjmunro.outcome.fetch.members.toKotlinResult","location":"outcome/nz.adjmunro.outcome.fetch.members/to-kotlin-result.html","searchKeys":["toKotlinResult","fun <T : Any> Fetch<T>.toKotlinResult(): KotlinResult<T>","nz.adjmunro.outcome.fetch.members.toKotlinResult"]},{"name":"fun <T : Any> FetchFlow<Fetch<T>>.flatten(): FetchFlow<T>","description":"nz.adjmunro.outcome.fetch.flow.flatten","location":"outcome/nz.adjmunro.outcome.fetch.flow/flatten.html","searchKeys":["flatten","fun <T : Any> FetchFlow<Fetch<T>>.flatten(): FetchFlow<T>","nz.adjmunro.outcome.fetch.flow.flatten"]},{"name":"fun <T : Any> FetchFlow<T>.filterIsNotEmpty(): Flow<T>","description":"nz.adjmunro.outcome.fetch.flow.filterIsNotEmpty","location":"outcome/nz.adjmunro.outcome.fetch.flow/filter-is-not-empty.html","searchKeys":["filterIsNotEmpty","fun <T : Any> FetchFlow<T>.filterIsNotEmpty(): Flow<T>","nz.adjmunro.outcome.fetch.flow.filterIsNotEmpty"]},{"name":"fun <T : Any> fetch(timeout: Duration = Duration.INFINITE, recover: FetchCollector<T>.(Throwable) -> Fetch<T> = { throw it }, block: suspend FetchCollector<T>.() -> T): FetchFlow<T>","description":"nz.adjmunro.outcome.fetch.fetch","location":"outcome/nz.adjmunro.outcome.fetch/fetch.html","searchKeys":["fetch","fun <T : Any> fetch(timeout: Duration = Duration.INFINITE, recover: FetchCollector<T>.(Throwable) -> Fetch<T> = { throw it }, block: suspend FetchCollector<T>.() -> T): FetchFlow<T>","nz.adjmunro.outcome.fetch.fetch"]},{"name":"fun <T> Iterable<() -> T>.resultOfEach(): List<KotlinResult<T>>","description":"nz.adjmunro.outcome.result.members.resultOfEach","location":"outcome/nz.adjmunro.outcome.result.members/result-of-each.html","searchKeys":["resultOfEach","fun <T> Iterable<() -> T>.resultOfEach(): List<KotlinResult<T>>","nz.adjmunro.outcome.result.members.resultOfEach"]},{"name":"fun <T> KotlinResult<KotlinResult<T>>.flatten(): KotlinResult<T>","description":"nz.adjmunro.outcome.result.members.flatten","location":"outcome/nz.adjmunro.outcome.result.members/flatten.html","searchKeys":["flatten","fun <T> KotlinResult<KotlinResult<T>>.flatten(): KotlinResult<T>","nz.adjmunro.outcome.result.members.flatten"]},{"name":"fun <T> KotlinResult<T>.exceptionOrDefault(default: Throwable): Throwable","description":"nz.adjmunro.outcome.result.members.exceptionOrDefault","location":"outcome/nz.adjmunro.outcome.result.members/exception-or-default.html","searchKeys":["exceptionOrDefault","fun <T> KotlinResult<T>.exceptionOrDefault(default: Throwable): Throwable","nz.adjmunro.outcome.result.members.exceptionOrDefault"]},{"name":"fun <T> KotlinResult<T>.exceptionOrThrow(): Throwable","description":"nz.adjmunro.outcome.result.members.exceptionOrThrow","location":"outcome/nz.adjmunro.outcome.result.members/exception-or-throw.html","searchKeys":["exceptionOrThrow","fun <T> KotlinResult<T>.exceptionOrThrow(): Throwable","nz.adjmunro.outcome.result.members.exceptionOrThrow"]},{"name":"fun <T> ResultFlow<Result<T>>.flatten(): ResultFlow<T>","description":"nz.adjmunro.outcome.result.suspend.flatten","location":"outcome/nz.adjmunro.outcome.result.suspend/flatten.html","searchKeys":["flatten","fun <T> ResultFlow<Result<T>>.flatten(): ResultFlow<T>","nz.adjmunro.outcome.result.suspend.flatten"]},{"name":"fun <T> ResultFlow<T>.filterFailure(): Flow<Throwable>","description":"nz.adjmunro.outcome.result.suspend.filterFailure","location":"outcome/nz.adjmunro.outcome.result.suspend/filter-failure.html","searchKeys":["filterFailure","fun <T> ResultFlow<T>.filterFailure(): Flow<Throwable>","nz.adjmunro.outcome.result.suspend.filterFailure"]},{"name":"fun <T> ResultFlow<T>.filterSuccess(): Flow<T>","description":"nz.adjmunro.outcome.result.suspend.filterSuccess","location":"outcome/nz.adjmunro.outcome.result.suspend/filter-success.html","searchKeys":["filterSuccess","fun <T> ResultFlow<T>.filterSuccess(): Flow<T>","nz.adjmunro.outcome.result.suspend.filterSuccess"]},{"name":"fun <T> Sequence<() -> T>.resultOfEach(): Sequence<KotlinResult<T>>","description":"nz.adjmunro.outcome.result.members.resultOfEach","location":"outcome/nz.adjmunro.outcome.result.members/result-of-each.html","searchKeys":["resultOfEach","fun <T> Sequence<() -> T>.resultOfEach(): Sequence<KotlinResult<T>>","nz.adjmunro.outcome.result.members.resultOfEach"]},{"name":"fun <T> Sequence<KotlinResult<T>>.tryRecoverEach(failure: (Throwable) -> T): Sequence<KotlinResult<T>>","description":"nz.adjmunro.outcome.result.members.tryRecoverEach","location":"outcome/nz.adjmunro.outcome.result.members/try-recover-each.html","searchKeys":["tryRecoverEach","fun <T> Sequence<KotlinResult<T>>.tryRecoverEach(failure: (Throwable) -> T): Sequence<KotlinResult<T>>","nz.adjmunro.outcome.result.members.tryRecoverEach"]},{"name":"fun <T> resultOfEach(vararg blocks: () -> T): List<KotlinResult<T>>","description":"nz.adjmunro.outcome.result.members.resultOfEach","location":"outcome/nz.adjmunro.outcome.result.members/result-of-each.html","searchKeys":["resultOfEach","fun <T> resultOfEach(vararg blocks: () -> T): List<KotlinResult<T>>","nz.adjmunro.outcome.result.members.resultOfEach"]},{"name":"fun Fetch<*>.toFaulty(): Faulty<Throwable>","description":"nz.adjmunro.outcome.fetch.members.toFaulty","location":"outcome/nz.adjmunro.outcome.fetch.members/to-faulty.html","searchKeys":["toFaulty","fun Fetch<*>.toFaulty(): Faulty<Throwable>","nz.adjmunro.outcome.fetch.members.toFaulty"]},{"name":"fun FetchFlow<*>.mapToFaulty(): FaultyFlow<Throwable>","description":"nz.adjmunro.outcome.fetch.flow.mapToFaulty","location":"outcome/nz.adjmunro.outcome.fetch.flow/map-to-faulty.html","searchKeys":["mapToFaulty","fun FetchFlow<*>.mapToFaulty(): FaultyFlow<Throwable>","nz.adjmunro.outcome.fetch.flow.mapToFaulty"]},{"name":"fun Throwable.isFatal(): Boolean","description":"nz.adjmunro.outcome.util.isFatal","location":"outcome/nz.adjmunro.outcome.util/is-fatal.html","searchKeys":["isFatal","fun Throwable.isFatal(): Boolean","nz.adjmunro.outcome.util.isFatal"]},{"name":"infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrDefault(default: Error): Error","description":"nz.adjmunro.outcome.outcome.members.errorOrDefault","location":"outcome/nz.adjmunro.outcome.outcome.members/error-or-default.html","searchKeys":["errorOrDefault","infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrDefault(default: Error): Error","nz.adjmunro.outcome.outcome.members.errorOrDefault"]},{"name":"infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrDefault(default: Ok): Ok","description":"nz.adjmunro.outcome.outcome.members.getOrDefault","location":"outcome/nz.adjmunro.outcome.outcome.members/get-or-default.html","searchKeys":["getOrDefault","infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrDefault(default: Ok): Ok","nz.adjmunro.outcome.outcome.members.getOrDefault"]},{"name":"infix fun <T : Any> Fetch<T>.getOrDefault(default: T): T","description":"nz.adjmunro.outcome.fetch.members.getOrDefault","location":"outcome/nz.adjmunro.outcome.fetch.members/get-or-default.html","searchKeys":["getOrDefault","infix fun <T : Any> Fetch<T>.getOrDefault(default: T): T","nz.adjmunro.outcome.fetch.members.getOrDefault"]},{"name":"infix inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.flatMapSuccess(transform: (In) -> Outcome<Out, Error>): Outcome<Out, Error>","description":"nz.adjmunro.outcome.outcome.members.flatMapSuccess","location":"outcome/nz.adjmunro.outcome.outcome.members/flat-map-success.html","searchKeys":["flatMapSuccess","infix inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.flatMapSuccess(transform: (In) -> Outcome<Out, Error>): Outcome<Out, Error>","nz.adjmunro.outcome.outcome.members.flatMapSuccess"]},{"name":"infix inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.mapSuccess(transform: (In) -> Out): Outcome<Out, Error>","description":"nz.adjmunro.outcome.outcome.members.mapSuccess","location":"outcome/nz.adjmunro.outcome.outcome.members/map-success.html","searchKeys":["mapSuccess","infix inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.mapSuccess(transform: (In) -> Out): Outcome<Out, Error>","nz.adjmunro.outcome.outcome.members.mapSuccess"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToFailure(falter: (Ok) -> Error): Failure<Error>","description":"nz.adjmunro.outcome.outcome.members.coerceToFailure","location":"outcome/nz.adjmunro.outcome.outcome.members/coerce-to-failure.html","searchKeys":["coerceToFailure","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToFailure(falter: (Ok) -> Error): Failure<Error>","nz.adjmunro.outcome.outcome.members.coerceToFailure"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToSuccess(recover: (Error) -> Ok): Success<Ok>","description":"nz.adjmunro.outcome.outcome.members.coerceToSuccess","location":"outcome/nz.adjmunro.outcome.outcome.members/coerce-to-success.html","searchKeys":["coerceToSuccess","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToSuccess(recover: (Error) -> Ok): Success<Ok>","nz.adjmunro.outcome.outcome.members.coerceToSuccess"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.falter(transform: (Ok) -> Error): Failure<Error>","description":"nz.adjmunro.outcome.outcome.members.falter","location":"outcome/nz.adjmunro.outcome.outcome.members/falter.html","searchKeys":["falter","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.falter(transform: (Ok) -> Error): Failure<Error>","nz.adjmunro.outcome.outcome.members.falter"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(predicate: (Error) -> Boolean): Boolean","description":"nz.adjmunro.outcome.outcome.members.isFailure","location":"outcome/nz.adjmunro.outcome.outcome.members/is-failure.html","searchKeys":["isFailure","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(predicate: (Error) -> Boolean): Boolean","nz.adjmunro.outcome.outcome.members.isFailure"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(predicate: (Ok) -> Boolean): Boolean","description":"nz.adjmunro.outcome.outcome.members.isSuccess","location":"outcome/nz.adjmunro.outcome.outcome.members/is-success.html","searchKeys":["isSuccess","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(predicate: (Ok) -> Boolean): Boolean","nz.adjmunro.outcome.outcome.members.isSuccess"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onFailure(block: (Error) -> Unit): Outcome<Ok, Error>","description":"nz.adjmunro.outcome.outcome.members.onFailure","location":"outcome/nz.adjmunro.outcome.outcome.members/on-failure.html","searchKeys":["onFailure","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onFailure(block: (Error) -> Unit): Outcome<Ok, Error>","nz.adjmunro.outcome.outcome.members.onFailure"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onSuccess(block: (Ok) -> Unit): Outcome<Ok, Error>","description":"nz.adjmunro.outcome.outcome.members.onSuccess","location":"outcome/nz.adjmunro.outcome.outcome.members/on-success.html","searchKeys":["onSuccess","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onSuccess(block: (Ok) -> Unit): Outcome<Ok, Error>","nz.adjmunro.outcome.outcome.members.onSuccess"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.recover(transform: (Error) -> Ok): Success<Ok>","description":"nz.adjmunro.outcome.outcome.members.recover","location":"outcome/nz.adjmunro.outcome.outcome.members/recover.html","searchKeys":["recover","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.recover(transform: (Error) -> Ok): Success<Ok>","nz.adjmunro.outcome.outcome.members.recover"]},{"name":"infix inline fun <Ok : Any, Error> Outcome<Ok, Error & Any>.errorOrElse(faulter: (Ok) -> Error): Error","description":"nz.adjmunro.outcome.outcome.members.errorOrElse","location":"outcome/nz.adjmunro.outcome.outcome.members/error-or-else.html","searchKeys":["errorOrElse","infix inline fun <Ok : Any, Error> Outcome<Ok, Error & Any>.errorOrElse(faulter: (Ok) -> Error): Error","nz.adjmunro.outcome.outcome.members.errorOrElse"]},{"name":"infix inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.flatMapFailure(transform: (ErrorIn) -> Outcome<Ok, ErrorOut>): Outcome<Ok, ErrorOut>","description":"nz.adjmunro.outcome.outcome.members.flatMapFailure","location":"outcome/nz.adjmunro.outcome.outcome.members/flat-map-failure.html","searchKeys":["flatMapFailure","infix inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.flatMapFailure(transform: (ErrorIn) -> Outcome<Ok, ErrorOut>): Outcome<Ok, ErrorOut>","nz.adjmunro.outcome.outcome.members.flatMapFailure"]},{"name":"infix inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.mapFailure(transform: (ErrorIn) -> ErrorOut): Outcome<Ok, ErrorOut>","description":"nz.adjmunro.outcome.outcome.members.mapFailure","location":"outcome/nz.adjmunro.outcome.outcome.members/map-failure.html","searchKeys":["mapFailure","infix inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.mapFailure(transform: (ErrorIn) -> ErrorOut): Outcome<Ok, ErrorOut>","nz.adjmunro.outcome.outcome.members.mapFailure"]},{"name":"infix inline fun <Ok, Error : Any> Outcome<Ok & Any, Error>.getOrElse(recover: (Error) -> Ok): Ok","description":"nz.adjmunro.outcome.outcome.members.getOrElse","location":"outcome/nz.adjmunro.outcome.outcome.members/get-or-else.html","searchKeys":["getOrElse","infix inline fun <Ok, Error : Any> Outcome<Ok & Any, Error>.getOrElse(recover: (Error) -> Ok): Ok","nz.adjmunro.outcome.outcome.members.getOrElse"]},{"name":"inline fun <Cache : Any, ErrorIn : Any, ErrorOut : Any> ErrorWithCache<Cache, ErrorIn>.mapError(transform: (ErrorIn) -> ErrorOut): ErrorWithCache<Cache, ErrorOut>","description":"nz.adjmunro.outcome.fetch.mapError","location":"outcome/nz.adjmunro.outcome.fetch/map-error.html","searchKeys":["mapError","inline fun <Cache : Any, ErrorIn : Any, ErrorOut : Any> ErrorWithCache<Cache, ErrorIn>.mapError(transform: (ErrorIn) -> ErrorOut): ErrorWithCache<Cache, ErrorOut>","nz.adjmunro.outcome.fetch.mapError"]},{"name":"inline fun <CacheIn : Any, CacheOut : Any, Error : Any> ErrorWithCache<CacheIn, Error>.mapCache(transform: (CacheIn?) -> CacheOut): ErrorWithCache<CacheOut, Error>","description":"nz.adjmunro.outcome.fetch.mapCache","location":"outcome/nz.adjmunro.outcome.fetch/map-cache.html","searchKeys":["mapCache","inline fun <CacheIn : Any, CacheOut : Any, Error : Any> ErrorWithCache<CacheIn, Error>.mapCache(transform: (CacheIn?) -> CacheOut): ErrorWithCache<CacheOut, Error>","nz.adjmunro.outcome.fetch.mapCache"]},{"name":"inline fun <CacheIn : Any, CacheOut : Any, ErrorIn : Any, ErrorOut : Any> ErrorWithCache<CacheIn, ErrorIn>.map(onCache: (CacheIn?) -> CacheOut, onError: (ErrorIn) -> ErrorOut): ErrorWithCache<CacheOut, ErrorOut>","description":"nz.adjmunro.outcome.fetch.map","location":"outcome/nz.adjmunro.outcome.fetch/map.html","searchKeys":["map","inline fun <CacheIn : Any, CacheOut : Any, ErrorIn : Any, ErrorOut : Any> ErrorWithCache<CacheIn, ErrorIn>.map(onCache: (CacheIn?) -> CacheOut, onError: (ErrorIn) -> ErrorOut): ErrorWithCache<CacheOut, ErrorOut>","nz.adjmunro.outcome.fetch.map"]},{"name":"inline fun <Data : Any, Output> Fetch<Data>.fold(prefetch: Prefetch.() -> Output, fetching: Fetching<Data>.() -> Output, finished: Finished<Data>.() -> Output): Output","description":"nz.adjmunro.outcome.fetch.members.fold","location":"outcome/nz.adjmunro.outcome.fetch.members/fold.html","searchKeys":["fold","inline fun <Data : Any, Output> Fetch<Data>.fold(prefetch: Prefetch.() -> Output, fetching: Fetching<Data>.() -> Output, finished: Finished<Data>.() -> Output): Output","nz.adjmunro.outcome.fetch.members.fold"]},{"name":"inline fun <Data : Any, Output> FetchFlow<Data>.fold(crossinline prefetch: suspend Prefetch.() -> Output, crossinline fetching: suspend Fetching<Data>.() -> Output, crossinline finished: suspend Finished<Data>.() -> Output): Flow<Output>","description":"nz.adjmunro.outcome.fetch.flow.fold","location":"outcome/nz.adjmunro.outcome.fetch.flow/fold.html","searchKeys":["fold","inline fun <Data : Any, Output> FetchFlow<Data>.fold(crossinline prefetch: suspend Prefetch.() -> Output, crossinline fetching: suspend Fetching<Data>.() -> Output, crossinline finished: suspend Finished<Data>.() -> Output): Flow<Output>","nz.adjmunro.outcome.fetch.flow.fold"]},{"name":"inline fun <Error : Any> RaiseScope<Error>.ensure(condition: Boolean, raise: () -> Error)","description":"nz.adjmunro.outcome.raise.RaiseScope.Companion.ensure","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/ensure.html","searchKeys":["ensure","inline fun <Error : Any> RaiseScope<Error>.ensure(condition: Boolean, raise: () -> Error)","nz.adjmunro.outcome.raise.RaiseScope.Companion.ensure"]},{"name":"inline fun <Error : Any> RaiseScope<Error>.raise(error: () -> Error): Nothing","description":"nz.adjmunro.outcome.raise.RaiseScope.Companion.raise","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/raise.html","searchKeys":["raise","inline fun <Error : Any> RaiseScope<Error>.raise(error: () -> Error): Nothing","nz.adjmunro.outcome.raise.RaiseScope.Companion.raise"]},{"name":"inline fun <Error : Any> failureOf(block: () -> Error): Failure<Error>","description":"nz.adjmunro.outcome.outcome.members.failureOf","location":"outcome/nz.adjmunro.outcome.outcome.members/failure-of.html","searchKeys":["failureOf","inline fun <Error : Any> failureOf(block: () -> Error): Failure<Error>","nz.adjmunro.outcome.outcome.members.failureOf"]},{"name":"inline fun <Error : Any> faultyOf(catch: (throwable: Throwable) -> Faulty<Error> = ::rethrow, block: RaiseScope<Error>.() -> Unit): Faulty<Error>","description":"nz.adjmunro.outcome.outcome.members.faultyOf","location":"outcome/nz.adjmunro.outcome.outcome.members/faulty-of.html","searchKeys":["faultyOf","inline fun <Error : Any> faultyOf(catch: (throwable: Throwable) -> Faulty<Error> = ::rethrow, block: RaiseScope<Error>.() -> Unit): Faulty<Error>","nz.adjmunro.outcome.outcome.members.faultyOf"]},{"name":"inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.andThen(catch: (throwable: Throwable) -> Outcome<Out, Error> = ::rethrow, success: RaiseScope<Error>.(In) -> Out): Outcome<Out, Error>","description":"nz.adjmunro.outcome.outcome.members.andThen","location":"outcome/nz.adjmunro.outcome.outcome.members/and-then.html","searchKeys":["andThen","inline fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.andThen(catch: (throwable: Throwable) -> Outcome<Out, Error> = ::rethrow, success: RaiseScope<Error>.(In) -> Out): Outcome<Out, Error>","nz.adjmunro.outcome.outcome.members.andThen"]},{"name":"inline fun <In : Any, Out : Any, Error : Any> OutcomeFlow<In, Error>.mapSuccess(crossinline transform: suspend (In) -> Out): OutcomeFlow<Out, Error>","description":"nz.adjmunro.outcome.outcome.flow.mapSuccess","location":"outcome/nz.adjmunro.outcome.outcome.flow/map-success.html","searchKeys":["mapSuccess","inline fun <In : Any, Out : Any, Error : Any> OutcomeFlow<In, Error>.mapSuccess(crossinline transform: suspend (In) -> Out): OutcomeFlow<Out, Error>","nz.adjmunro.outcome.outcome.flow.mapSuccess"]},{"name":"inline fun <In : Any, Out : Any, ErrorIn : Any, ErrorOut : Any> Outcome<In, ErrorIn>.map(failure: (ErrorIn) -> ErrorOut, success: (In) -> Out): Outcome<Out, ErrorOut>","description":"nz.adjmunro.outcome.outcome.members.map","location":"outcome/nz.adjmunro.outcome.outcome.members/map.html","searchKeys":["map","inline fun <In : Any, Out : Any, ErrorIn : Any, ErrorOut : Any> Outcome<In, ErrorIn>.map(failure: (ErrorIn) -> ErrorOut, success: (In) -> Out): Outcome<Out, ErrorOut>","nz.adjmunro.outcome.outcome.members.map"]},{"name":"inline fun <In : Out, Out : Any> Fetch<In>.flatMapFetching(transform: Fetching<In>.() -> Fetch<Out>): Fetch<Out>","description":"nz.adjmunro.outcome.fetch.members.flatMapFetching","location":"outcome/nz.adjmunro.outcome.fetch.members/flat-map-fetching.html","searchKeys":["flatMapFetching","inline fun <In : Out, Out : Any> Fetch<In>.flatMapFetching(transform: Fetching<In>.() -> Fetch<Out>): Fetch<Out>","nz.adjmunro.outcome.fetch.members.flatMapFetching"]},{"name":"inline fun <In : Out, Out : Any> Fetch<In>.flatMapFinished(transform: Finished<In>.() -> Fetch<Out>): Fetch<Out>","description":"nz.adjmunro.outcome.fetch.members.flatMapFinished","location":"outcome/nz.adjmunro.outcome.fetch.members/flat-map-finished.html","searchKeys":["flatMapFinished","inline fun <In : Out, Out : Any> Fetch<In>.flatMapFinished(transform: Finished<In>.() -> Fetch<Out>): Fetch<Out>","nz.adjmunro.outcome.fetch.members.flatMapFinished"]},{"name":"inline fun <In : Out, Out : Any> Fetch<In>.flatMapPrefetch(transform: Prefetch.() -> Fetch<Out>): Fetch<Out>","description":"nz.adjmunro.outcome.fetch.members.flatMapPrefetch","location":"outcome/nz.adjmunro.outcome.fetch.members/flat-map-prefetch.html","searchKeys":["flatMapPrefetch","inline fun <In : Out, Out : Any> Fetch<In>.flatMapPrefetch(transform: Prefetch.() -> Fetch<Out>): Fetch<Out>","nz.adjmunro.outcome.fetch.members.flatMapPrefetch"]},{"name":"inline fun <In : Out, Out : Any> Fetch<In>.mapFetching(transform: Fetching<In>.() -> Out?): Fetch<Out>","description":"nz.adjmunro.outcome.fetch.members.mapFetching","location":"outcome/nz.adjmunro.outcome.fetch.members/map-fetching.html","searchKeys":["mapFetching","inline fun <In : Out, Out : Any> Fetch<In>.mapFetching(transform: Fetching<In>.() -> Out?): Fetch<Out>","nz.adjmunro.outcome.fetch.members.mapFetching"]},{"name":"inline fun <In : Out, Out : Any> Fetch<In>.mapFinished(transform: Finished<In>.() -> Out): Fetch<Out>","description":"nz.adjmunro.outcome.fetch.members.mapFinished","location":"outcome/nz.adjmunro.outcome.fetch.members/map-finished.html","searchKeys":["mapFinished","inline fun <In : Out, Out : Any> Fetch<In>.mapFinished(transform: Finished<In>.() -> Out): Fetch<Out>","nz.adjmunro.outcome.fetch.members.mapFinished"]},{"name":"inline fun <In : Out, Out : Any> Fetch<In>.mapToCache(transform: Finished<In>.() -> Out? = Finished<In>::result): Fetch<Out>","description":"nz.adjmunro.outcome.fetch.members.mapToCache","location":"outcome/nz.adjmunro.outcome.fetch.members/map-to-cache.html","searchKeys":["mapToCache","inline fun <In : Out, Out : Any> Fetch<In>.mapToCache(transform: Finished<In>.() -> Out? = Finished<In>::result): Fetch<Out>","nz.adjmunro.outcome.fetch.members.mapToCache"]},{"name":"inline fun <In : Out, Out : Any> FetchFlow<In>.flatMapFetching(crossinline transform: suspend Fetching<In>.() -> Fetch<Out>): FetchFlow<Out>","description":"nz.adjmunro.outcome.fetch.flow.flatMapFetching","location":"outcome/nz.adjmunro.outcome.fetch.flow/flat-map-fetching.html","searchKeys":["flatMapFetching","inline fun <In : Out, Out : Any> FetchFlow<In>.flatMapFetching(crossinline transform: suspend Fetching<In>.() -> Fetch<Out>): FetchFlow<Out>","nz.adjmunro.outcome.fetch.flow.flatMapFetching"]},{"name":"inline fun <In : Out, Out : Any> FetchFlow<In>.flatMapFinished(crossinline transform: suspend Finished<In>.() -> Fetch<Out>): FetchFlow<Out>","description":"nz.adjmunro.outcome.fetch.flow.flatMapFinished","location":"outcome/nz.adjmunro.outcome.fetch.flow/flat-map-finished.html","searchKeys":["flatMapFinished","inline fun <In : Out, Out : Any> FetchFlow<In>.flatMapFinished(crossinline transform: suspend Finished<In>.() -> Fetch<Out>): FetchFlow<Out>","nz.adjmunro.outcome.fetch.flow.flatMapFinished"]},{"name":"inline fun <In : Out, Out : Any> FetchFlow<In>.flatMapPrefetch(crossinline transform: suspend Prefetch.() -> Fetch<Out>): FetchFlow<Out>","description":"nz.adjmunro.outcome.fetch.flow.flatMapPrefetch","location":"outcome/nz.adjmunro.outcome.fetch.flow/flat-map-prefetch.html","searchKeys":["flatMapPrefetch","inline fun <In : Out, Out : Any> FetchFlow<In>.flatMapPrefetch(crossinline transform: suspend Prefetch.() -> Fetch<Out>): FetchFlow<Out>","nz.adjmunro.outcome.fetch.flow.flatMapPrefetch"]},{"name":"inline fun <In : Out, Out : Any> FetchFlow<In>.mapFetching(crossinline transform: suspend Fetching<In>.() -> Out?): FetchFlow<Out>","description":"nz.adjmunro.outcome.fetch.flow.mapFetching","location":"outcome/nz.adjmunro.outcome.fetch.flow/map-fetching.html","searchKeys":["mapFetching","inline fun <In : Out, Out : Any> FetchFlow<In>.mapFetching(crossinline transform: suspend Fetching<In>.() -> Out?): FetchFlow<Out>","nz.adjmunro.outcome.fetch.flow.mapFetching"]},{"name":"inline fun <In : Out, Out : Any> FetchFlow<In>.mapFinished(crossinline transform: suspend Finished<In>.() -> Out): FetchFlow<Out>","description":"nz.adjmunro.outcome.fetch.flow.mapFinished","location":"outcome/nz.adjmunro.outcome.fetch.flow/map-finished.html","searchKeys":["mapFinished","inline fun <In : Out, Out : Any> FetchFlow<In>.mapFinished(crossinline transform: suspend Finished<In>.() -> Out): FetchFlow<Out>","nz.adjmunro.outcome.fetch.flow.mapFinished"]},{"name":"inline fun <In : Out, Out : Any> FetchFlow<In>.mapToCache(crossinline transform: suspend Finished<In>.() -> Out = { result }): FetchFlow<Out>","description":"nz.adjmunro.outcome.fetch.flow.mapToCache","location":"outcome/nz.adjmunro.outcome.fetch.flow/map-to-cache.html","searchKeys":["mapToCache","inline fun <In : Out, Out : Any> FetchFlow<In>.mapToCache(crossinline transform: suspend Finished<In>.() -> Out = { result }): FetchFlow<Out>","nz.adjmunro.outcome.fetch.flow.mapToCache"]},{"name":"inline fun <In, Error : Any> In.faultyOf(catch: (throwable: Throwable) -> Faulty<Error> = ::rethrow, block: RaiseScope<Error>.(In) -> Unit): Faulty<Error>","description":"nz.adjmunro.outcome.outcome.members.faultyOf","location":"outcome/nz.adjmunro.outcome.outcome.members/faulty-of.html","searchKeys":["faultyOf","inline fun <In, Error : Any> In.faultyOf(catch: (throwable: Throwable) -> Faulty<Error> = ::rethrow, block: RaiseScope<Error>.(In) -> Unit): Faulty<Error>","nz.adjmunro.outcome.outcome.members.faultyOf"]},{"name":"inline fun <In, Out : Any, Error : Any> In.failureOf(block: (In) -> Error): Failure<Error>","description":"nz.adjmunro.outcome.outcome.members.failureOf","location":"outcome/nz.adjmunro.outcome.outcome.members/failure-of.html","searchKeys":["failureOf","inline fun <In, Out : Any, Error : Any> In.failureOf(block: (In) -> Error): Failure<Error>","nz.adjmunro.outcome.outcome.members.failureOf"]},{"name":"inline fun <In, Out : Any, Error : Any> In.outcomeOf(catch: (throwable: Throwable) -> Outcome<Out, Error> = ::rethrow, block: RaiseScope<Error>.(In) -> Out): Outcome<Out, Error>","description":"nz.adjmunro.outcome.outcome.members.outcomeOf","location":"outcome/nz.adjmunro.outcome.outcome.members/outcome-of.html","searchKeys":["outcomeOf","inline fun <In, Out : Any, Error : Any> In.outcomeOf(catch: (throwable: Throwable) -> Outcome<Out, Error> = ::rethrow, block: RaiseScope<Error>.(In) -> Out): Outcome<Out, Error>","nz.adjmunro.outcome.outcome.members.outcomeOf"]},{"name":"inline fun <In, Out : Any> In.catch(block: RaiseScope<Throwable>.(In) -> Out): Outcome<Out, Throwable>","description":"nz.adjmunro.outcome.outcome.members.catch","location":"outcome/nz.adjmunro.outcome.outcome.members/catch.html","searchKeys":["catch","inline fun <In, Out : Any> In.catch(block: RaiseScope<Throwable>.(In) -> Out): Outcome<Out, Throwable>","nz.adjmunro.outcome.outcome.members.catch"]},{"name":"inline fun <In, Out : Any> In.maybeOf(catch: (throwable: Throwable) -> Maybe<Out> = ::rethrow, block: RaiseScope<Unit>.(In) -> Out): Maybe<Out>","description":"nz.adjmunro.outcome.outcome.members.maybeOf","location":"outcome/nz.adjmunro.outcome.outcome.members/maybe-of.html","searchKeys":["maybeOf","inline fun <In, Out : Any> In.maybeOf(catch: (throwable: Throwable) -> Maybe<Out> = ::rethrow, block: RaiseScope<Unit>.(In) -> Out): Maybe<Out>","nz.adjmunro.outcome.outcome.members.maybeOf"]},{"name":"inline fun <In, Out : Any> In.nullableOf(block: RaiseScope<Unit>.(In) -> Out): Out?","description":"nz.adjmunro.outcome.outcome.members.nullableOf","location":"outcome/nz.adjmunro.outcome.outcome.members/nullable-of.html","searchKeys":["nullableOf","inline fun <In, Out : Any> In.nullableOf(block: RaiseScope<Unit>.(In) -> Out): Out?","nz.adjmunro.outcome.outcome.members.nullableOf"]},{"name":"inline fun <In, Out : Any> In.outcome(block: RaiseScope<String>.(In) -> Out): Outcome<Out, String>","description":"nz.adjmunro.outcome.outcome.members.outcome","location":"outcome/nz.adjmunro.outcome.outcome.members/outcome.html","searchKeys":["outcome","inline fun <In, Out : Any> In.outcome(block: RaiseScope<String>.(In) -> Out): Outcome<Out, String>","nz.adjmunro.outcome.outcome.members.outcome"]},{"name":"inline fun <In, Out : Any> In.safely(crossinline fallback: (Any) -> Out, block: RaiseScope<Unit>.(In) -> Out): Out","description":"nz.adjmunro.outcome.outcome.members.safely","location":"outcome/nz.adjmunro.outcome.outcome.members/safely.html","searchKeys":["safely","inline fun <In, Out : Any> In.safely(crossinline fallback: (Any) -> Out, block: RaiseScope<Unit>.(In) -> Out): Out","nz.adjmunro.outcome.outcome.members.safely"]},{"name":"inline fun <In, Out : Any> In.successOf(block: (In) -> Out): Success<Out>","description":"nz.adjmunro.outcome.outcome.members.successOf","location":"outcome/nz.adjmunro.outcome.outcome.members/success-of.html","searchKeys":["successOf","inline fun <In, Out : Any> In.successOf(block: (In) -> Out): Success<Out>","nz.adjmunro.outcome.outcome.members.successOf"]},{"name":"inline fun <In, Out, Error : Any> RaiseScope<Error>.fold(block: (scope: RaiseScope<Error>) -> In, catch: (throwable: Throwable) -> Out = ::rethrow, recover: (error: Error) -> Out, transform: (value: In) -> Out): Out","description":"nz.adjmunro.outcome.raise.RaiseScope.Companion.fold","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/fold.html","searchKeys":["fold","inline fun <In, Out, Error : Any> RaiseScope<Error>.fold(block: (scope: RaiseScope<Error>) -> In, catch: (throwable: Throwable) -> Out = ::rethrow, recover: (error: Error) -> Out, transform: (value: In) -> Out): Out","nz.adjmunro.outcome.raise.RaiseScope.Companion.fold"]},{"name":"inline fun <In, Out> In.nullable(block: In.() -> Out): Out?","description":"nz.adjmunro.outcome.result.members.nullable","location":"outcome/nz.adjmunro.outcome.result.members/nullable.html","searchKeys":["nullable","inline fun <In, Out> In.nullable(block: In.() -> Out): Out?","nz.adjmunro.outcome.result.members.nullable"]},{"name":"inline fun <In, Out> In.resultOf(block: In.() -> Out): KotlinResult<Out>","description":"nz.adjmunro.outcome.result.members.resultOf","location":"outcome/nz.adjmunro.outcome.result.members/result-of.html","searchKeys":["resultOf","inline fun <In, Out> In.resultOf(block: In.() -> Out): KotlinResult<Out>","nz.adjmunro.outcome.result.members.resultOf"]},{"name":"inline fun <In, Out> Iterable<KotlinResult<In>>.andThenEach(success: (In) -> Out): List<KotlinResult<Out>>","description":"nz.adjmunro.outcome.result.members.andThenEach","location":"outcome/nz.adjmunro.outcome.result.members/and-then-each.html","searchKeys":["andThenEach","inline fun <In, Out> Iterable<KotlinResult<In>>.andThenEach(success: (In) -> Out): List<KotlinResult<Out>>","nz.adjmunro.outcome.result.members.andThenEach"]},{"name":"inline fun <In, Out> Iterable<KotlinResult<In>>.foldEach(success: (In) -> Out, failure: (Throwable) -> Out): List<Out>","description":"nz.adjmunro.outcome.result.members.foldEach","location":"outcome/nz.adjmunro.outcome.result.members/fold-each.html","searchKeys":["foldEach","inline fun <In, Out> Iterable<KotlinResult<In>>.foldEach(success: (In) -> Out, failure: (Throwable) -> Out): List<Out>","nz.adjmunro.outcome.result.members.foldEach"]},{"name":"inline fun <In, Out> KotlinResult<In>.andThen(onSuccess: (In) -> Out): KotlinResult<Out>","description":"nz.adjmunro.outcome.result.members.andThen","location":"outcome/nz.adjmunro.outcome.result.members/and-then.html","searchKeys":["andThen","inline fun <In, Out> KotlinResult<In>.andThen(onSuccess: (In) -> Out): KotlinResult<Out>","nz.adjmunro.outcome.result.members.andThen"]},{"name":"inline fun <In, Out> KotlinResult<In>.flatMap(onSuccess: (In) -> KotlinResult<Out>): KotlinResult<Out>","description":"nz.adjmunro.outcome.result.members.flatMap","location":"outcome/nz.adjmunro.outcome.result.members/flat-map.html","searchKeys":["flatMap","inline fun <In, Out> KotlinResult<In>.flatMap(onSuccess: (In) -> KotlinResult<Out>): KotlinResult<Out>","nz.adjmunro.outcome.result.members.flatMap"]},{"name":"inline fun <In, Out> ResultFlow<In>.andThen(crossinline success: suspend (In) -> Out): Flow<Result<Out>>","description":"nz.adjmunro.outcome.result.suspend.andThen","location":"outcome/nz.adjmunro.outcome.result.suspend/and-then.html","searchKeys":["andThen","inline fun <In, Out> ResultFlow<In>.andThen(crossinline success: suspend (In) -> Out): Flow<Result<Out>>","nz.adjmunro.outcome.result.suspend.andThen"]},{"name":"inline fun <In, Out> ResultFlow<In>.foldResult(crossinline success: suspend (In) -> Out, crossinline failure: suspend (Throwable) -> Out): Flow<Out>","description":"nz.adjmunro.outcome.result.suspend.foldResult","location":"outcome/nz.adjmunro.outcome.result.suspend/fold-result.html","searchKeys":["foldResult","inline fun <In, Out> ResultFlow<In>.foldResult(crossinline success: suspend (In) -> Out, crossinline failure: suspend (Throwable) -> Out): Flow<Out>","nz.adjmunro.outcome.result.suspend.foldResult"]},{"name":"inline fun <In, Out> ResultFlow<In>.mapSuccess(crossinline success: suspend (In) -> Out): Flow<Result<Out>>","description":"nz.adjmunro.outcome.result.suspend.mapSuccess","location":"outcome/nz.adjmunro.outcome.result.suspend/map-success.html","searchKeys":["mapSuccess","inline fun <In, Out> ResultFlow<In>.mapSuccess(crossinline success: suspend (In) -> Out): Flow<Result<Out>>","nz.adjmunro.outcome.result.suspend.mapSuccess"]},{"name":"inline fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.fold(failure: Failure<Error>.() -> Output, success: Success<Ok>.() -> Output): Output","description":"nz.adjmunro.outcome.outcome.members.fold","location":"outcome/nz.adjmunro.outcome.outcome.members/fold.html","searchKeys":["fold","inline fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.fold(failure: Failure<Error>.() -> Output, success: Success<Ok>.() -> Output): Output","nz.adjmunro.outcome.outcome.members.fold"]},{"name":"inline fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.rfold(success: Success<Ok>.() -> Output, failure: Failure<Error>.() -> Output): Output","description":"nz.adjmunro.outcome.outcome.members.rfold","location":"outcome/nz.adjmunro.outcome.outcome.members/rfold.html","searchKeys":["rfold","inline fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.rfold(success: Success<Ok>.() -> Output, failure: Failure<Error>.() -> Output): Output","nz.adjmunro.outcome.outcome.members.rfold"]},{"name":"inline fun <Ok : Any, Error : Any, Output> OutcomeFlow<Ok, Error>.foldOutcome(crossinline success: suspend (Ok) -> Output, crossinline failure: suspend (Error) -> Output): Flow<Output>","description":"nz.adjmunro.outcome.outcome.flow.foldOutcome","location":"outcome/nz.adjmunro.outcome.outcome.flow/fold-outcome.html","searchKeys":["foldOutcome","inline fun <Ok : Any, Error : Any, Output> OutcomeFlow<Ok, Error>.foldOutcome(crossinline success: suspend (Ok) -> Output, crossinline failure: suspend (Error) -> Output): Flow<Output>","nz.adjmunro.outcome.outcome.flow.foldOutcome"]},{"name":"inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.andIf(predicate: (Ok) -> Boolean, catch: (throwable: Throwable) -> Outcome<Ok, Error> = ::rethrow, success: RaiseScope<Error>.(Ok) -> Ok): Outcome<Ok, Error>","description":"nz.adjmunro.outcome.outcome.members.andIf","location":"outcome/nz.adjmunro.outcome.outcome.members/and-if.html","searchKeys":["andIf","inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.andIf(predicate: (Ok) -> Boolean, catch: (throwable: Throwable) -> Outcome<Ok, Error> = ::rethrow, success: RaiseScope<Error>.(Ok) -> Ok): Outcome<Ok, Error>","nz.adjmunro.outcome.outcome.members.andIf"]},{"name":"inline fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.onEachFailure(crossinline block: suspend (Error) -> Unit): OutcomeFlow<Ok, Error>","description":"nz.adjmunro.outcome.outcome.flow.onEachFailure","location":"outcome/nz.adjmunro.outcome.outcome.flow/on-each-failure.html","searchKeys":["onEachFailure","inline fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.onEachFailure(crossinline block: suspend (Error) -> Unit): OutcomeFlow<Ok, Error>","nz.adjmunro.outcome.outcome.flow.onEachFailure"]},{"name":"inline fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.onEachSuccess(crossinline block: suspend (Ok) -> Unit): OutcomeFlow<Ok, Error>","description":"nz.adjmunro.outcome.outcome.flow.onEachSuccess","location":"outcome/nz.adjmunro.outcome.outcome.flow/on-each-success.html","searchKeys":["onEachSuccess","inline fun <Ok : Any, Error : Any> OutcomeFlow<Ok, Error>.onEachSuccess(crossinline block: suspend (Ok) -> Unit): OutcomeFlow<Ok, Error>","nz.adjmunro.outcome.outcome.flow.onEachSuccess"]},{"name":"inline fun <Ok : Any, Error : Any> RaiseScope<Error>.ensureNotNull(value: Ok?, raise: () -> Error): Ok","description":"nz.adjmunro.outcome.raise.RaiseScope.Companion.ensureNotNull","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/ensure-not-null.html","searchKeys":["ensureNotNull","inline fun <Ok : Any, Error : Any> RaiseScope<Error>.ensureNotNull(value: Ok?, raise: () -> Error): Ok","nz.adjmunro.outcome.raise.RaiseScope.Companion.ensureNotNull"]},{"name":"inline fun <Ok : Any, Error : Any> outcomeOf(catch: (throwable: Throwable) -> Outcome<Ok, Error> = ::rethrow, block: RaiseScope<Error>.() -> Ok): Outcome<Ok, Error>","description":"nz.adjmunro.outcome.outcome.members.outcomeOf","location":"outcome/nz.adjmunro.outcome.outcome.members/outcome-of.html","searchKeys":["outcomeOf","inline fun <Ok : Any, Error : Any> outcomeOf(catch: (throwable: Throwable) -> Outcome<Ok, Error> = ::rethrow, block: RaiseScope<Error>.() -> Ok): Outcome<Ok, Error>","nz.adjmunro.outcome.outcome.members.outcomeOf"]},{"name":"inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Iterable<Outcome<Ok, ErrorIn>>.aggregate(reduce: (List<ErrorIn>) -> ErrorOut): Outcome<List<Ok>, ErrorOut>","description":"nz.adjmunro.outcome.outcome.members.aggregate","location":"outcome/nz.adjmunro.outcome.outcome.members/aggregate.html","searchKeys":["aggregate","inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Iterable<Outcome<Ok, ErrorIn>>.aggregate(reduce: (List<ErrorIn>) -> ErrorOut): Outcome<List<Ok>, ErrorOut>","nz.adjmunro.outcome.outcome.members.aggregate"]},{"name":"inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.tryRecover(catch: (throwable: Throwable) -> Outcome<Ok, ErrorOut> = ::rethrow, failure: RaiseScope<ErrorOut>.(ErrorIn) -> Ok): Outcome<Ok, ErrorOut>","description":"nz.adjmunro.outcome.outcome.members.tryRecover","location":"outcome/nz.adjmunro.outcome.outcome.members/try-recover.html","searchKeys":["tryRecover","inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.tryRecover(catch: (throwable: Throwable) -> Outcome<Ok, ErrorOut> = ::rethrow, failure: RaiseScope<ErrorOut>.(ErrorIn) -> Ok): Outcome<Ok, ErrorOut>","nz.adjmunro.outcome.outcome.members.tryRecover"]},{"name":"inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> OutcomeFlow<Ok, ErrorIn>.mapFailure(crossinline transform: suspend (ErrorIn) -> ErrorOut): OutcomeFlow<Ok, ErrorOut>","description":"nz.adjmunro.outcome.outcome.flow.mapFailure","location":"outcome/nz.adjmunro.outcome.outcome.flow/map-failure.html","searchKeys":["mapFailure","inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> OutcomeFlow<Ok, ErrorIn>.mapFailure(crossinline transform: suspend (ErrorIn) -> ErrorOut): OutcomeFlow<Ok, ErrorOut>","nz.adjmunro.outcome.outcome.flow.mapFailure"]},{"name":"inline fun <Ok : Any> Ok.maybe(isSuccess: Ok.() -> Boolean): Maybe<Ok>","description":"nz.adjmunro.outcome.outcome.members.maybe","location":"outcome/nz.adjmunro.outcome.outcome.members/maybe.html","searchKeys":["maybe","inline fun <Ok : Any> Ok.maybe(isSuccess: Ok.() -> Boolean): Maybe<Ok>","nz.adjmunro.outcome.outcome.members.maybe"]},{"name":"inline fun <Ok : Any> catch(block: RaiseScope<Throwable>.() -> Ok): Outcome<Ok, Throwable>","description":"nz.adjmunro.outcome.outcome.members.catch","location":"outcome/nz.adjmunro.outcome.outcome.members/catch.html","searchKeys":["catch","inline fun <Ok : Any> catch(block: RaiseScope<Throwable>.() -> Ok): Outcome<Ok, Throwable>","nz.adjmunro.outcome.outcome.members.catch"]},{"name":"inline fun <Ok : Any> maybeOf(catch: (throwable: Throwable) -> Maybe<Ok> = ::emptyFailure, block: RaiseScope<Unit>.() -> Ok): Maybe<Ok>","description":"nz.adjmunro.outcome.outcome.members.maybeOf","location":"outcome/nz.adjmunro.outcome.outcome.members/maybe-of.html","searchKeys":["maybeOf","inline fun <Ok : Any> maybeOf(catch: (throwable: Throwable) -> Maybe<Ok> = ::emptyFailure, block: RaiseScope<Unit>.() -> Ok): Maybe<Ok>","nz.adjmunro.outcome.outcome.members.maybeOf"]},{"name":"inline fun <Ok : Any> outcome(block: RaiseScope<String>.() -> Ok): Outcome<Ok, String>","description":"nz.adjmunro.outcome.outcome.members.outcome","location":"outcome/nz.adjmunro.outcome.outcome.members/outcome.html","searchKeys":["outcome","inline fun <Ok : Any> outcome(block: RaiseScope<String>.() -> Ok): Outcome<Ok, String>","nz.adjmunro.outcome.outcome.members.outcome"]},{"name":"inline fun <Ok : Any> successOf(block: () -> Ok): Success<Ok>","description":"nz.adjmunro.outcome.outcome.members.successOf","location":"outcome/nz.adjmunro.outcome.outcome.members/success-of.html","searchKeys":["successOf","inline fun <Ok : Any> successOf(block: () -> Ok): Success<Ok>","nz.adjmunro.outcome.outcome.members.successOf"]},{"name":"inline fun <Ok, Error : Any> RaiseScope.Companion.default(action: RaiseScope<Error>.() -> Ok): Ok","description":"nz.adjmunro.outcome.raise.RaiseScope.Companion.default","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/default.html","searchKeys":["default","inline fun <Ok, Error : Any> RaiseScope.Companion.default(action: RaiseScope<Error>.() -> Ok): Ok","nz.adjmunro.outcome.raise.RaiseScope.Companion.default"]},{"name":"inline fun <Ok, Error : Any> RaiseScope<Error>.catch(catch: (throwable: Throwable) -> Error = ::rethrow, block: RaiseScope<Error>.() -> Ok): Ok","description":"nz.adjmunro.outcome.raise.RaiseScope.Companion.catch","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/catch.html","searchKeys":["catch","inline fun <Ok, Error : Any> RaiseScope<Error>.catch(catch: (throwable: Throwable) -> Error = ::rethrow, block: RaiseScope<Error>.() -> Ok): Ok","nz.adjmunro.outcome.raise.RaiseScope.Companion.catch"]},{"name":"inline fun <T : Any> Fetch<T>.isFetching(predicate: Fetching<T>.() -> Boolean): Boolean","description":"nz.adjmunro.outcome.fetch.members.isFetching","location":"outcome/nz.adjmunro.outcome.fetch.members/is-fetching.html","searchKeys":["isFetching","inline fun <T : Any> Fetch<T>.isFetching(predicate: Fetching<T>.() -> Boolean): Boolean","nz.adjmunro.outcome.fetch.members.isFetching"]},{"name":"inline fun <T : Any> Fetch<T>.isFinished(predicate: Finished<T>.() -> Boolean): Boolean","description":"nz.adjmunro.outcome.fetch.members.isFinished","location":"outcome/nz.adjmunro.outcome.fetch.members/is-finished.html","searchKeys":["isFinished","inline fun <T : Any> Fetch<T>.isFinished(predicate: Finished<T>.() -> Boolean): Boolean","nz.adjmunro.outcome.fetch.members.isFinished"]},{"name":"inline fun <T : Any> Fetch<T>.onFetching(action: Fetching<T>.() -> Unit): Fetch<T>","description":"nz.adjmunro.outcome.fetch.members.onFetching","location":"outcome/nz.adjmunro.outcome.fetch.members/on-fetching.html","searchKeys":["onFetching","inline fun <T : Any> Fetch<T>.onFetching(action: Fetching<T>.() -> Unit): Fetch<T>","nz.adjmunro.outcome.fetch.members.onFetching"]},{"name":"inline fun <T : Any> Fetch<T>.onFinished(action: Finished<T>.() -> Unit): Fetch<T>","description":"nz.adjmunro.outcome.fetch.members.onFinished","location":"outcome/nz.adjmunro.outcome.fetch.members/on-finished.html","searchKeys":["onFinished","inline fun <T : Any> Fetch<T>.onFinished(action: Finished<T>.() -> Unit): Fetch<T>","nz.adjmunro.outcome.fetch.members.onFinished"]},{"name":"inline fun <T : Any> Fetch<T>.onPrefetch(action: Prefetch.() -> Unit): Fetch<T>","description":"nz.adjmunro.outcome.fetch.members.onPrefetch","location":"outcome/nz.adjmunro.outcome.fetch.members/on-prefetch.html","searchKeys":["onPrefetch","inline fun <T : Any> Fetch<T>.onPrefetch(action: Prefetch.() -> Unit): Fetch<T>","nz.adjmunro.outcome.fetch.members.onPrefetch"]},{"name":"inline fun <T : Any> FetchFlow<T>.onEach(crossinline prefetch: suspend Prefetch.() -> Unit = {}, crossinline fetching: suspend Fetching<T>.() -> Unit = {}, crossinline finished: suspend Finished<T>.() -> Unit = {}): FetchFlow<T>","description":"nz.adjmunro.outcome.fetch.flow.onEach","location":"outcome/nz.adjmunro.outcome.fetch.flow/on-each.html","searchKeys":["onEach","inline fun <T : Any> FetchFlow<T>.onEach(crossinline prefetch: suspend Prefetch.() -> Unit = {}, crossinline fetching: suspend Fetching<T>.() -> Unit = {}, crossinline finished: suspend Finished<T>.() -> Unit = {}): FetchFlow<T>","nz.adjmunro.outcome.fetch.flow.onEach"]},{"name":"inline fun <T : Any> T.faulty(isFailure: T.() -> Boolean): Faulty<T>","description":"nz.adjmunro.outcome.outcome.members.faulty","location":"outcome/nz.adjmunro.outcome.outcome.members/faulty.html","searchKeys":["faulty","inline fun <T : Any> T.faulty(isFailure: T.() -> Boolean): Faulty<T>","nz.adjmunro.outcome.outcome.members.faulty"]},{"name":"inline fun <T : Any> nullableOf(block: RaiseScope<Unit>.() -> T): T?","description":"nz.adjmunro.outcome.outcome.members.nullableOf","location":"outcome/nz.adjmunro.outcome.outcome.members/nullable-of.html","searchKeys":["nullableOf","inline fun <T : Any> nullableOf(block: RaiseScope<Unit>.() -> T): T?","nz.adjmunro.outcome.outcome.members.nullableOf"]},{"name":"inline fun <T : Any> safely(crossinline fallback: (Any) -> T, block: RaiseScope<Unit>.() -> T): T","description":"nz.adjmunro.outcome.outcome.members.safely","location":"outcome/nz.adjmunro.outcome.outcome.members/safely.html","searchKeys":["safely","inline fun <T : Any> safely(crossinline fallback: (Any) -> T, block: RaiseScope<Unit>.() -> T): T","nz.adjmunro.outcome.outcome.members.safely"]},{"name":"inline fun <T> Fetch<T & Any>.getOrElse(recover: (Fetch<T & Any>) -> T): T","description":"nz.adjmunro.outcome.fetch.members.getOrElse","location":"outcome/nz.adjmunro.outcome.fetch.members/get-or-else.html","searchKeys":["getOrElse","inline fun <T> Fetch<T & Any>.getOrElse(recover: (Fetch<T & Any>) -> T): T","nz.adjmunro.outcome.fetch.members.getOrElse"]},{"name":"inline fun <T> Iterable<KotlinResult<T>>.aggregate(reduce: (List<Throwable>) -> Throwable = { it.first() }): KotlinResult<List<T>>","description":"nz.adjmunro.outcome.result.members.aggregate","location":"outcome/nz.adjmunro.outcome.result.members/aggregate.html","searchKeys":["aggregate","inline fun <T> Iterable<KotlinResult<T>>.aggregate(reduce: (List<Throwable>) -> Throwable = { it.first() }): KotlinResult<List<T>>","nz.adjmunro.outcome.result.members.aggregate"]},{"name":"inline fun <T> Iterable<KotlinResult<T>>.tryRecoverEach(failure: (Throwable) -> T): List<KotlinResult<T>>","description":"nz.adjmunro.outcome.result.members.tryRecoverEach","location":"outcome/nz.adjmunro.outcome.result.members/try-recover-each.html","searchKeys":["tryRecoverEach","inline fun <T> Iterable<KotlinResult<T>>.tryRecoverEach(failure: (Throwable) -> T): List<KotlinResult<T>>","nz.adjmunro.outcome.result.members.tryRecoverEach"]},{"name":"inline fun <T> KotlinResult<T>.andIf(predicate: (T) -> Boolean, onSuccess: (T) -> T): KotlinResult<T>","description":"nz.adjmunro.outcome.result.members.andIf","location":"outcome/nz.adjmunro.outcome.result.members/and-if.html","searchKeys":["andIf","inline fun <T> KotlinResult<T>.andIf(predicate: (T) -> Boolean, onSuccess: (T) -> T): KotlinResult<T>","nz.adjmunro.outcome.result.members.andIf"]},{"name":"inline fun <T> KotlinResult<T>.exceptionOrElse(onSuccess: (T) -> Throwable): Throwable","description":"nz.adjmunro.outcome.result.members.exceptionOrElse","location":"outcome/nz.adjmunro.outcome.result.members/exception-or-else.html","searchKeys":["exceptionOrElse","inline fun <T> KotlinResult<T>.exceptionOrElse(onSuccess: (T) -> Throwable): Throwable","nz.adjmunro.outcome.result.members.exceptionOrElse"]},{"name":"inline fun <T> KotlinResult<T>.mapFailure(onFailure: (Throwable) -> Throwable): KotlinResult<T>","description":"nz.adjmunro.outcome.result.members.mapFailure","location":"outcome/nz.adjmunro.outcome.result.members/map-failure.html","searchKeys":["mapFailure","inline fun <T> KotlinResult<T>.mapFailure(onFailure: (Throwable) -> Throwable): KotlinResult<T>","nz.adjmunro.outcome.result.members.mapFailure"]},{"name":"inline fun <T> KotlinResult<T>.tryRecover(onFailure: (Throwable) -> T): KotlinResult<T>","description":"nz.adjmunro.outcome.result.members.tryRecover","location":"outcome/nz.adjmunro.outcome.result.members/try-recover.html","searchKeys":["tryRecover","inline fun <T> KotlinResult<T>.tryRecover(onFailure: (Throwable) -> T): KotlinResult<T>","nz.adjmunro.outcome.result.members.tryRecover"]},{"name":"inline fun <T> ResultFlow<T>.andThen(crossinline predicate: (T) -> Boolean, crossinline success: suspend (T) -> T): Flow<Result<T>>","description":"nz.adjmunro.outcome.result.suspend.andThen","location":"outcome/nz.adjmunro.outcome.result.suspend/and-then.html","searchKeys":["andThen","inline fun <T> ResultFlow<T>.andThen(crossinline predicate: (T) -> Boolean, crossinline success: suspend (T) -> T): Flow<Result<T>>","nz.adjmunro.outcome.result.suspend.andThen"]},{"name":"inline fun <T> ResultFlow<T>.mapFailure(crossinline failure: suspend (Throwable) -> Throwable): Flow<Result<T>>","description":"nz.adjmunro.outcome.result.suspend.mapFailure","location":"outcome/nz.adjmunro.outcome.result.suspend/map-failure.html","searchKeys":["mapFailure","inline fun <T> ResultFlow<T>.mapFailure(crossinline failure: suspend (Throwable) -> Throwable): Flow<Result<T>>","nz.adjmunro.outcome.result.suspend.mapFailure"]},{"name":"inline fun <T> ResultFlow<T>.onEachFailure(crossinline action: suspend (Throwable) -> Unit): ResultFlow<T>","description":"nz.adjmunro.outcome.result.suspend.onEachFailure","location":"outcome/nz.adjmunro.outcome.result.suspend/on-each-failure.html","searchKeys":["onEachFailure","inline fun <T> ResultFlow<T>.onEachFailure(crossinline action: suspend (Throwable) -> Unit): ResultFlow<T>","nz.adjmunro.outcome.result.suspend.onEachFailure"]},{"name":"inline fun <T> ResultFlow<T>.onEachResult(crossinline success: suspend (T) -> Unit, crossinline failure: suspend (Throwable) -> Unit): ResultFlow<T>","description":"nz.adjmunro.outcome.result.suspend.onEachResult","location":"outcome/nz.adjmunro.outcome.result.suspend/on-each-result.html","searchKeys":["onEachResult","inline fun <T> ResultFlow<T>.onEachResult(crossinline success: suspend (T) -> Unit, crossinline failure: suspend (Throwable) -> Unit): ResultFlow<T>","nz.adjmunro.outcome.result.suspend.onEachResult"]},{"name":"inline fun <T> ResultFlow<T>.onEachSuccess(crossinline action: suspend (T) -> Unit): ResultFlow<T>","description":"nz.adjmunro.outcome.result.suspend.onEachSuccess","location":"outcome/nz.adjmunro.outcome.result.suspend/on-each-success.html","searchKeys":["onEachSuccess","inline fun <T> ResultFlow<T>.onEachSuccess(crossinline action: suspend (T) -> Unit): ResultFlow<T>","nz.adjmunro.outcome.result.suspend.onEachSuccess"]},{"name":"inline fun <T> ResultFlow<T>.tryRecover(crossinline failure: suspend (Throwable) -> T): Flow<Result<T>>","description":"nz.adjmunro.outcome.result.suspend.tryRecover","location":"outcome/nz.adjmunro.outcome.result.suspend/try-recover.html","searchKeys":["tryRecover","inline fun <T> ResultFlow<T>.tryRecover(crossinline failure: suspend (Throwable) -> T): Flow<Result<T>>","nz.adjmunro.outcome.result.suspend.tryRecover"]},{"name":"inline fun <T> nullable(block: () -> T): T?","description":"nz.adjmunro.outcome.result.members.nullable","location":"outcome/nz.adjmunro.outcome.result.members/nullable.html","searchKeys":["nullable","inline fun <T> nullable(block: () -> T): T?","nz.adjmunro.outcome.result.members.nullable"]},{"name":"inline fun <T> resultOf(block: () -> T): KotlinResult<T>","description":"nz.adjmunro.outcome.result.members.resultOf","location":"outcome/nz.adjmunro.outcome.result.members/result-of.html","searchKeys":["resultOf","inline fun <T> resultOf(block: () -> T): KotlinResult<T>","nz.adjmunro.outcome.result.members.resultOf"]},{"name":"inline fun emptyFailure(ignore: Any? = null): Failure<Unit>","description":"nz.adjmunro.outcome.outcome.members.emptyFailure","location":"outcome/nz.adjmunro.outcome.outcome.members/empty-failure.html","searchKeys":["emptyFailure","inline fun emptyFailure(ignore: Any? = null): Failure<Unit>","nz.adjmunro.outcome.outcome.members.emptyFailure"]},{"name":"inline fun emptySuccess(ignore: Any? = null): Success<Unit>","description":"nz.adjmunro.outcome.outcome.members.emptySuccess","location":"outcome/nz.adjmunro.outcome.outcome.members/empty-success.html","searchKeys":["emptySuccess","inline fun emptySuccess(ignore: Any? = null): Success<Unit>","nz.adjmunro.outcome.outcome.members.emptySuccess"]},{"name":"inline suspend fun <T : Any> FetchCollector<T>.fetching(cache: T? = null)","description":"nz.adjmunro.outcome.fetch.fetching","location":"outcome/nz.adjmunro.outcome.fetch/fetching.html","searchKeys":["fetching","inline suspend fun <T : Any> FetchCollector<T>.fetching(cache: T? = null)","nz.adjmunro.outcome.fetch.fetching"]},{"name":"inline suspend fun <T : Any> FetchCollector<T>.finished(result: T)","description":"nz.adjmunro.outcome.fetch.finished","location":"outcome/nz.adjmunro.outcome.fetch/finished.html","searchKeys":["finished","inline suspend fun <T : Any> FetchCollector<T>.finished(result: T)","nz.adjmunro.outcome.fetch.finished"]},{"name":"inline suspend fun <T> FlowCollector<T>.emit(recover: FlowCollector<T>.(Throwable) -> T = { throw it }, block: FlowCollector<T>.() -> T)","description":"nz.adjmunro.outcome.fetch.emit","location":"outcome/nz.adjmunro.outcome.fetch/emit.html","searchKeys":["emit","inline suspend fun <T> FlowCollector<T>.emit(recover: FlowCollector<T>.(Throwable) -> T = { throw it }, block: FlowCollector<T>.() -> T)","nz.adjmunro.outcome.fetch.emit"]},{"name":"inline suspend fun FetchCollector<Nothing>.prefetch()","description":"nz.adjmunro.outcome.fetch.prefetch","location":"outcome/nz.adjmunro.outcome.fetch/prefetch.html","searchKeys":["prefetch","inline suspend fun FetchCollector<Nothing>.prefetch()","nz.adjmunro.outcome.fetch.prefetch"]},{"name":"object Companion","description":"nz.adjmunro.outcome.raise.RaiseScope.Companion","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/index.html","searchKeys":["Companion","object Companion","nz.adjmunro.outcome.raise.RaiseScope.Companion"]},{"name":"open operator fun component1(): Ok?","description":"nz.adjmunro.outcome.outcome.Outcome.component1","location":"outcome/nz.adjmunro.outcome.outcome/-outcome/component1.html","searchKeys":["component1","open operator fun component1(): Ok?","nz.adjmunro.outcome.outcome.Outcome.component1"]},{"name":"open operator fun component2(): Error?","description":"nz.adjmunro.outcome.outcome.Outcome.component2","location":"outcome/nz.adjmunro.outcome.outcome/-outcome/component2.html","searchKeys":["component2","open operator fun component2(): Error?","nz.adjmunro.outcome.outcome.Outcome.component2"]},{"name":"open operator override fun component1(): Ok","description":"nz.adjmunro.outcome.outcome.Success.component1","location":"outcome/nz.adjmunro.outcome.outcome/-success/component1.html","searchKeys":["component1","open operator override fun component1(): Ok","nz.adjmunro.outcome.outcome.Success.component1"]},{"name":"open operator override fun component2(): Error","description":"nz.adjmunro.outcome.outcome.Failure.component2","location":"outcome/nz.adjmunro.outcome.outcome/-failure/component2.html","searchKeys":["component2","open operator override fun component2(): Error","nz.adjmunro.outcome.outcome.Failure.component2"]},{"name":"open override fun complete()","description":"nz.adjmunro.outcome.raise.RaiseScope.DefaultRaise.complete","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/-default-raise/complete.html","searchKeys":["complete","open override fun complete()","nz.adjmunro.outcome.raise.RaiseScope.DefaultRaise.complete"]},{"name":"open override fun raised(error: Error): Nothing","description":"nz.adjmunro.outcome.raise.RaiseScope.DefaultRaise.raised","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/-default-raise/raised.html","searchKeys":["raised","open override fun raised(error: Error): Nothing","nz.adjmunro.outcome.raise.RaiseScope.DefaultRaise.raised"]},{"name":"open override fun toString(): String","description":"nz.adjmunro.outcome.fetch.Fetching.toString","location":"outcome/nz.adjmunro.outcome.fetch/-fetching/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.adjmunro.outcome.fetch.Fetching.toString"]},{"name":"open override fun toString(): String","description":"nz.adjmunro.outcome.fetch.Finished.toString","location":"outcome/nz.adjmunro.outcome.fetch/-finished/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.adjmunro.outcome.fetch.Finished.toString"]},{"name":"open override fun toString(): String","description":"nz.adjmunro.outcome.outcome.Failure.toString","location":"outcome/nz.adjmunro.outcome.outcome/-failure/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.adjmunro.outcome.outcome.Failure.toString"]},{"name":"open override fun toString(): String","description":"nz.adjmunro.outcome.outcome.Success.toString","location":"outcome/nz.adjmunro.outcome.outcome/-success/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.adjmunro.outcome.outcome.Success.toString"]},{"name":"open suspend override fun collectSafely(collector: FetchCollector<T>)","description":"nz.adjmunro.outcome.fetch.SafeFetchFlow.collectSafely","location":"outcome/nz.adjmunro.outcome.fetch/-safe-fetch-flow/collect-safely.html","searchKeys":["collectSafely","open suspend override fun collectSafely(collector: FetchCollector<T>)","nz.adjmunro.outcome.fetch.SafeFetchFlow.collectSafely"]},{"name":"operator fun component1(): T","description":"nz.adjmunro.outcome.fetch.Finished.component1","location":"outcome/nz.adjmunro.outcome.fetch/-finished/component1.html","searchKeys":["component1","operator fun component1(): T","nz.adjmunro.outcome.fetch.Finished.component1"]},{"name":"operator fun component1(): T?","description":"nz.adjmunro.outcome.fetch.Fetching.component1","location":"outcome/nz.adjmunro.outcome.fetch/-fetching/component1.html","searchKeys":["component1","operator fun component1(): T?","nz.adjmunro.outcome.fetch.Fetching.component1"]},{"name":"sealed interface Fetch<out T : Any>","description":"nz.adjmunro.outcome.fetch.Fetch","location":"outcome/nz.adjmunro.outcome.fetch/-fetch/index.html","searchKeys":["Fetch","sealed interface Fetch<out T : Any>","nz.adjmunro.outcome.fetch.Fetch"]},{"name":"sealed interface Outcome<out Ok : Any, out Error : Any>","description":"nz.adjmunro.outcome.outcome.Outcome","location":"outcome/nz.adjmunro.outcome.outcome/-outcome/index.html","searchKeys":["Outcome","sealed interface Outcome<out Ok : Any, out Error : Any>","nz.adjmunro.outcome.outcome.Outcome"]},{"name":"sealed interface RaiseScope<in Error : Any>","description":"nz.adjmunro.outcome.raise.RaiseScope","location":"outcome/nz.adjmunro.outcome.raise/-raise-scope/index.html","searchKeys":["RaiseScope","sealed interface RaiseScope<in Error : Any>","nz.adjmunro.outcome.raise.RaiseScope"]},{"name":"suspend fun <In, Out> Iterable<KotlinResult<In>>.parallelAndThen(success: suspend CoroutineScope.(In) -> Out): List<KotlinResult<Out>>","description":"nz.adjmunro.outcome.result.suspend.parallelAndThen","location":"outcome/nz.adjmunro.outcome.result.suspend/parallel-and-then.html","searchKeys":["parallelAndThen","suspend fun <In, Out> Iterable<KotlinResult<In>>.parallelAndThen(success: suspend CoroutineScope.(In) -> Out): List<KotlinResult<Out>>","nz.adjmunro.outcome.result.suspend.parallelAndThen"]},{"name":"suspend fun <In, Out> Iterable<KotlinResult<In>>.parallelFold(success: suspend CoroutineScope.(In) -> Out, failure: suspend CoroutineScope.(Throwable) -> Out): List<Out>","description":"nz.adjmunro.outcome.result.suspend.parallelFold","location":"outcome/nz.adjmunro.outcome.result.suspend/parallel-fold.html","searchKeys":["parallelFold","suspend fun <In, Out> Iterable<KotlinResult<In>>.parallelFold(success: suspend CoroutineScope.(In) -> Out, failure: suspend CoroutineScope.(Throwable) -> Out): List<Out>","nz.adjmunro.outcome.result.suspend.parallelFold"]},{"name":"suspend fun <In, Out> Sequence<KotlinResult<In>>.parallelAndThen(success: suspend CoroutineScope.(In) -> Out): List<KotlinResult<Out>>","description":"nz.adjmunro.outcome.result.suspend.parallelAndThen","location":"outcome/nz.adjmunro.outcome.result.suspend/parallel-and-then.html","searchKeys":["parallelAndThen","suspend fun <In, Out> Sequence<KotlinResult<In>>.parallelAndThen(success: suspend CoroutineScope.(In) -> Out): List<KotlinResult<Out>>","nz.adjmunro.outcome.result.suspend.parallelAndThen"]},{"name":"suspend fun <In, Out> Sequence<KotlinResult<In>>.parallelFold(success: suspend CoroutineScope.(In) -> Out, failure: suspend CoroutineScope.(Throwable) -> Out): List<Out>","description":"nz.adjmunro.outcome.result.suspend.parallelFold","location":"outcome/nz.adjmunro.outcome.result.suspend/parallel-fold.html","searchKeys":["parallelFold","suspend fun <In, Out> Sequence<KotlinResult<In>>.parallelFold(success: suspend CoroutineScope.(In) -> Out, failure: suspend CoroutineScope.(Throwable) -> Out): List<Out>","nz.adjmunro.outcome.result.suspend.parallelFold"]},{"name":"suspend fun <T> Iterable<KotlinResult<T>>.parallelTryRecover(failure: suspend CoroutineScope.(Throwable) -> T): List<KotlinResult<T>>","description":"nz.adjmunro.outcome.result.suspend.parallelTryRecover","location":"outcome/nz.adjmunro.outcome.result.suspend/parallel-try-recover.html","searchKeys":["parallelTryRecover","suspend fun <T> Iterable<KotlinResult<T>>.parallelTryRecover(failure: suspend CoroutineScope.(Throwable) -> T): List<KotlinResult<T>>","nz.adjmunro.outcome.result.suspend.parallelTryRecover"]},{"name":"suspend fun <T> Iterable<suspend CoroutineScope.() -> T>.parallelResult(): List<KotlinResult<T>>","description":"nz.adjmunro.outcome.result.suspend.parallelResult","location":"outcome/nz.adjmunro.outcome.result.suspend/parallel-result.html","searchKeys":["parallelResult","suspend fun <T> Iterable<suspend CoroutineScope.() -> T>.parallelResult(): List<KotlinResult<T>>","nz.adjmunro.outcome.result.suspend.parallelResult"]},{"name":"suspend fun <T> Sequence<KotlinResult<T>>.parallelTryRecover(failure: suspend CoroutineScope.(Throwable) -> T): List<KotlinResult<T>>","description":"nz.adjmunro.outcome.result.suspend.parallelTryRecover","location":"outcome/nz.adjmunro.outcome.result.suspend/parallel-try-recover.html","searchKeys":["parallelTryRecover","suspend fun <T> Sequence<KotlinResult<T>>.parallelTryRecover(failure: suspend CoroutineScope.(Throwable) -> T): List<KotlinResult<T>>","nz.adjmunro.outcome.result.suspend.parallelTryRecover"]},{"name":"suspend fun <T> Sequence<suspend CoroutineScope.() -> T>.parallelResult(): List<KotlinResult<T>>","description":"nz.adjmunro.outcome.result.suspend.parallelResult","location":"outcome/nz.adjmunro.outcome.result.suspend/parallel-result.html","searchKeys":["parallelResult","suspend fun <T> Sequence<suspend CoroutineScope.() -> T>.parallelResult(): List<KotlinResult<T>>","nz.adjmunro.outcome.result.suspend.parallelResult"]},{"name":"suspend fun <T> parallelResultOf(vararg blocks: suspend CoroutineScope.() -> T): List<KotlinResult<T>>","description":"nz.adjmunro.outcome.result.suspend.parallelResultOf","location":"outcome/nz.adjmunro.outcome.result.suspend/parallel-result-of.html","searchKeys":["parallelResultOf","suspend fun <T> parallelResultOf(vararg blocks: suspend CoroutineScope.() -> T): List<KotlinResult<T>>","nz.adjmunro.outcome.result.suspend.parallelResultOf"]},{"name":"typealias Faulty<Error> = Outcome<Unit, Error>","description":"nz.adjmunro.outcome.outcome.Faulty","location":"outcome/nz.adjmunro.outcome.outcome/-faulty/index.html","searchKeys":["Faulty","typealias Faulty<Error> = Outcome<Unit, Error>","nz.adjmunro.outcome.outcome.Faulty"]},{"name":"typealias FaultyFetch<Error> = Flow<Fetch<Faulty<Error>>>","description":"nz.adjmunro.outcome.fetch.FaultyFetch","location":"outcome/nz.adjmunro.outcome.fetch/-faulty-fetch/index.html","searchKeys":["FaultyFetch","typealias FaultyFetch<Error> = Flow<Fetch<Faulty<Error>>>","nz.adjmunro.outcome.fetch.FaultyFetch"]},{"name":"typealias FaultyFlow<Error> = Flow<Faulty<Error>>","description":"nz.adjmunro.outcome.outcome.FaultyFlow","location":"outcome/nz.adjmunro.outcome.outcome/-faulty-flow/index.html","searchKeys":["FaultyFlow","typealias FaultyFlow<Error> = Flow<Faulty<Error>>","nz.adjmunro.outcome.outcome.FaultyFlow"]},{"name":"typealias FaultyScope<Error> = RaiseScope<Error>.() -> Unit","description":"nz.adjmunro.outcome.outcome.FaultyScope","location":"outcome/nz.adjmunro.outcome.outcome/-faulty-scope/index.html","searchKeys":["FaultyScope","typealias FaultyScope<Error> = RaiseScope<Error>.() -> Unit","nz.adjmunro.outcome.outcome.FaultyScope"]},{"name":"typealias FetchFlow<T> = Flow<Fetch<T>>","description":"nz.adjmunro.outcome.fetch.FetchFlow","location":"outcome/nz.adjmunro.outcome.fetch/-fetch-flow/index.html","searchKeys":["FetchFlow","typealias FetchFlow<T> = Flow<Fetch<T>>","nz.adjmunro.outcome.fetch.FetchFlow"]},{"name":"typealias KotlinResult<T> = Result<T>","description":"nz.adjmunro.outcome.result.KotlinResult","location":"outcome/nz.adjmunro.outcome.result/-kotlin-result/index.html","searchKeys":["KotlinResult","typealias KotlinResult<T> = Result<T>","nz.adjmunro.outcome.result.KotlinResult"]},{"name":"typealias Maybe<Ok> = Outcome<Ok, Unit>","description":"nz.adjmunro.outcome.outcome.Maybe","location":"outcome/nz.adjmunro.outcome.outcome/-maybe/index.html","searchKeys":["Maybe","typealias Maybe<Ok> = Outcome<Ok, Unit>","nz.adjmunro.outcome.outcome.Maybe"]},{"name":"typealias MaybeFetch<Ok> = Flow<Fetch<Maybe<Ok>>>","description":"nz.adjmunro.outcome.fetch.MaybeFetch","location":"outcome/nz.adjmunro.outcome.fetch/-maybe-fetch/index.html","searchKeys":["MaybeFetch","typealias MaybeFetch<Ok> = Flow<Fetch<Maybe<Ok>>>","nz.adjmunro.outcome.fetch.MaybeFetch"]},{"name":"typealias MaybeFlow<Ok> = Flow<Maybe<Ok>>","description":"nz.adjmunro.outcome.outcome.MaybeFlow","location":"outcome/nz.adjmunro.outcome.outcome/-maybe-flow/index.html","searchKeys":["MaybeFlow","typealias MaybeFlow<Ok> = Flow<Maybe<Ok>>","nz.adjmunro.outcome.outcome.MaybeFlow"]},{"name":"typealias MaybeScope<Ok> = RaiseScope<Any>.() -> Ok","description":"nz.adjmunro.outcome.outcome.MaybeScope","location":"outcome/nz.adjmunro.outcome.outcome/-maybe-scope/index.html","searchKeys":["MaybeScope","typealias MaybeScope<Ok> = RaiseScope<Any>.() -> Ok","nz.adjmunro.outcome.outcome.MaybeScope"]},{"name":"typealias OutcomeFetch<Ok, Error> = Flow<Fetch<Outcome<Ok, Error>>>","description":"nz.adjmunro.outcome.fetch.OutcomeFetch","location":"outcome/nz.adjmunro.outcome.fetch/-outcome-fetch/index.html","searchKeys":["OutcomeFetch","typealias OutcomeFetch<Ok, Error> = Flow<Fetch<Outcome<Ok, Error>>>","nz.adjmunro.outcome.fetch.OutcomeFetch"]},{"name":"typealias OutcomeFlow<Ok, Error> = Flow<Outcome<Ok, Error>>","description":"nz.adjmunro.outcome.outcome.OutcomeFlow","location":"outcome/nz.adjmunro.outcome.outcome/-outcome-flow/index.html","searchKeys":["OutcomeFlow","typealias OutcomeFlow<Ok, Error> = Flow<Outcome<Ok, Error>>","nz.adjmunro.outcome.outcome.OutcomeFlow"]},{"name":"typealias OutcomeScope<Ok, Error> = RaiseScope<Error>.() -> Ok","description":"nz.adjmunro.outcome.outcome.OutcomeScope","location":"outcome/nz.adjmunro.outcome.outcome/-outcome-scope/index.html","searchKeys":["OutcomeScope","typealias OutcomeScope<Ok, Error> = RaiseScope<Error>.() -> Ok","nz.adjmunro.outcome.outcome.OutcomeScope"]},{"name":"typealias ResultFetch<Ok> = Flow<Fetch<KotlinResult<Ok>>>","description":"nz.adjmunro.outcome.fetch.ResultFetch","location":"outcome/nz.adjmunro.outcome.fetch/-result-fetch/index.html","searchKeys":["ResultFetch","typealias ResultFetch<Ok> = Flow<Fetch<KotlinResult<Ok>>>","nz.adjmunro.outcome.fetch.ResultFetch"]},{"name":"typealias ResultFlow<Ok> = Flow<KotlinResult<Ok>>","description":"nz.adjmunro.outcome.result.ResultFlow","location":"outcome/nz.adjmunro.outcome.result/-result-flow/index.html","searchKeys":["ResultFlow","typealias ResultFlow<Ok> = Flow<KotlinResult<Ok>>","nz.adjmunro.outcome.result.ResultFlow"]},{"name":"val <Error : Any> Outcome<*, Error>.asFaulty: Faulty<Error>","description":"nz.adjmunro.outcome.outcome.members.asFaulty","location":"outcome/nz.adjmunro.outcome.outcome.members/as-faulty.html","searchKeys":["asFaulty","val <Error : Any> Outcome<*, Error>.asFaulty: Faulty<Error>","nz.adjmunro.outcome.outcome.members.asFaulty"]},{"name":"val <Ok : Any, Err : Any, Eri : Err, Ero : Err> Outcome<Outcome<Ok, Eri>, Ero>.flatten: Outcome<Ok, Err>","description":"nz.adjmunro.outcome.outcome.members.flatten","location":"outcome/nz.adjmunro.outcome.outcome.members/flatten.html","searchKeys":["flatten","val <Ok : Any, Err : Any, Eri : Err, Ero : Err> Outcome<Outcome<Ok, Eri>, Ero>.flatten: Outcome<Ok, Err>","nz.adjmunro.outcome.outcome.members.flatten"]},{"name":"val <Ok : Any, Err : Any, Oki : Ok, Oko : Ok> Outcome<Oko, Outcome<Oki, Err>>.flatten: Outcome<Ok, Err>","description":"nz.adjmunro.outcome.outcome.members.flatten","location":"outcome/nz.adjmunro.outcome.outcome.members/flatten.html","searchKeys":["flatten","val <Ok : Any, Err : Any, Oki : Ok, Oko : Ok> Outcome<Oko, Outcome<Oki, Err>>.flatten: Outcome<Ok, Err>","nz.adjmunro.outcome.outcome.members.flatten"]},{"name":"val <Ok : Any, Err : Any, Oks : Ok, Ers : Err, Okf : Ok, Erf : Err> Outcome<Outcome<Oks, Ers>, Outcome<Okf, Erf>>.flatten: Outcome<Ok, Err>","description":"nz.adjmunro.outcome.outcome.members.flatten","location":"outcome/nz.adjmunro.outcome.outcome.members/flatten.html","searchKeys":["flatten","val <Ok : Any, Err : Any, Oks : Ok, Ers : Err, Okf : Ok, Erf : Err> Outcome<Outcome<Oks, Ers>, Outcome<Okf, Erf>>.flatten: Outcome<Ok, Err>","nz.adjmunro.outcome.outcome.members.flatten"]},{"name":"val <Ok : Any> Outcome<Ok, *>.asMaybe: Maybe<Ok>","description":"nz.adjmunro.outcome.outcome.members.asMaybe","location":"outcome/nz.adjmunro.outcome.outcome.members/as-maybe.html","searchKeys":["asMaybe","val <Ok : Any> Outcome<Ok, *>.asMaybe: Maybe<Ok>","nz.adjmunro.outcome.outcome.members.asMaybe"]},{"name":"val <T : Any> Fetch<Fetch<T>>.flatten: Fetch<T>","description":"nz.adjmunro.outcome.fetch.members.flatten","location":"outcome/nz.adjmunro.outcome.fetch.members/flatten.html","searchKeys":["flatten","val <T : Any> Fetch<Fetch<T>>.flatten: Fetch<T>","nz.adjmunro.outcome.fetch.members.flatten"]},{"name":"val <T : Any> Fetch<T>.isEmpty: Boolean","description":"nz.adjmunro.outcome.fetch.members.isEmpty","location":"outcome/nz.adjmunro.outcome.fetch.members/is-empty.html","searchKeys":["isEmpty","val <T : Any> Fetch<T>.isEmpty: Boolean","nz.adjmunro.outcome.fetch.members.isEmpty"]},{"name":"val <T : Any> Fetch<T>.isNotEmpty: Boolean","description":"nz.adjmunro.outcome.fetch.members.isNotEmpty","location":"outcome/nz.adjmunro.outcome.fetch.members/is-not-empty.html","searchKeys":["isNotEmpty","val <T : Any> Fetch<T>.isNotEmpty: Boolean","nz.adjmunro.outcome.fetch.members.isNotEmpty"]},{"name":"val <T : Any> Fetch<T>.isNotFetching: Boolean","description":"nz.adjmunro.outcome.fetch.members.isNotFetching","location":"outcome/nz.adjmunro.outcome.fetch.members/is-not-fetching.html","searchKeys":["isNotFetching","val <T : Any> Fetch<T>.isNotFetching: Boolean","nz.adjmunro.outcome.fetch.members.isNotFetching"]},{"name":"val <T : Any> Fetch<T>.isNotFinished: Boolean","description":"nz.adjmunro.outcome.fetch.members.isNotFinished","location":"outcome/nz.adjmunro.outcome.fetch.members/is-not-finished.html","searchKeys":["isNotFinished","val <T : Any> Fetch<T>.isNotFinished: Boolean","nz.adjmunro.outcome.fetch.members.isNotFinished"]},{"name":"val <T : Any> Fetch<T>.isStarted: Boolean","description":"nz.adjmunro.outcome.fetch.members.isStarted","location":"outcome/nz.adjmunro.outcome.fetch.members/is-started.html","searchKeys":["isStarted","val <T : Any> Fetch<T>.isStarted: Boolean","nz.adjmunro.outcome.fetch.members.isStarted"]},{"name":"val <T : Any> T.asFailure: Failure<T>","description":"nz.adjmunro.outcome.outcome.members.asFailure","location":"outcome/nz.adjmunro.outcome.outcome.members/as-failure.html","searchKeys":["asFailure","val <T : Any> T.asFailure: Failure<T>","nz.adjmunro.outcome.outcome.members.asFailure"]},{"name":"val <T : Any> T.asSuccess: Success<T>","description":"nz.adjmunro.outcome.outcome.members.asSuccess","location":"outcome/nz.adjmunro.outcome.outcome.members/as-success.html","searchKeys":["asSuccess","val <T : Any> T.asSuccess: Success<T>","nz.adjmunro.outcome.outcome.members.asSuccess"]},{"name":"val <T> T.faulty: Faulty<Throwable>","description":"nz.adjmunro.outcome.outcome.members.faulty","location":"outcome/nz.adjmunro.outcome.outcome.members/faulty.html","searchKeys":["faulty","val <T> T.faulty: Faulty<Throwable>","nz.adjmunro.outcome.outcome.members.faulty"]},{"name":"val <T> T.maybe: Maybe<T & Any>","description":"nz.adjmunro.outcome.outcome.members.maybe","location":"outcome/nz.adjmunro.outcome.outcome.members/maybe.html","searchKeys":["maybe","val <T> T.maybe: Maybe<T & Any>","nz.adjmunro.outcome.outcome.members.maybe"]},{"name":"val <T> T.outcome: Outcome<T & Any, Throwable>","description":"nz.adjmunro.outcome.outcome.members.outcome","location":"outcome/nz.adjmunro.outcome.outcome.members/outcome.html","searchKeys":["outcome","val <T> T.outcome: Outcome<T & Any, Throwable>","nz.adjmunro.outcome.outcome.members.outcome"]},{"name":"val cache: Ok? = null","description":"nz.adjmunro.outcome.fetch.ErrorWithCache.cache","location":"outcome/nz.adjmunro.outcome.fetch/-error-with-cache/cache.html","searchKeys":["cache","val cache: Ok? = null","nz.adjmunro.outcome.fetch.ErrorWithCache.cache"]},{"name":"val cache: T? = null","description":"nz.adjmunro.outcome.fetch.Fetching.cache","location":"outcome/nz.adjmunro.outcome.fetch/-fetching/cache.html","searchKeys":["cache","val cache: T? = null","nz.adjmunro.outcome.fetch.Fetching.cache"]},{"name":"val error: Error","description":"nz.adjmunro.outcome.fetch.ErrorWithCache.error","location":"outcome/nz.adjmunro.outcome.fetch/-error-with-cache/error.html","searchKeys":["error","val error: Error","nz.adjmunro.outcome.fetch.ErrorWithCache.error"]},{"name":"val error: Error","description":"nz.adjmunro.outcome.outcome.Failure.error","location":"outcome/nz.adjmunro.outcome.outcome/-failure/error.html","searchKeys":["error","val error: Error","nz.adjmunro.outcome.outcome.Failure.error"]},{"name":"val hasCache: Boolean","description":"nz.adjmunro.outcome.fetch.ErrorWithCache.hasCache","location":"outcome/nz.adjmunro.outcome.fetch/-error-with-cache/has-cache.html","searchKeys":["hasCache","val hasCache: Boolean","nz.adjmunro.outcome.fetch.ErrorWithCache.hasCache"]},{"name":"val result: T","description":"nz.adjmunro.outcome.fetch.Finished.result","location":"outcome/nz.adjmunro.outcome.fetch/-finished/result.html","searchKeys":["result","val result: T","nz.adjmunro.outcome.fetch.Finished.result"]},{"name":"val value: Ok","description":"nz.adjmunro.outcome.outcome.Success.value","location":"outcome/nz.adjmunro.outcome.outcome/-success/value.html","searchKeys":["value","val value: Ok","nz.adjmunro.outcome.outcome.Success.value"]},{"name":"value class Failure<out Error : Any>(val error: Error) : Outcome<Nothing, Error> ","description":"nz.adjmunro.outcome.outcome.Failure","location":"outcome/nz.adjmunro.outcome.outcome/-failure/index.html","searchKeys":["Failure","value class Failure<out Error : Any>(val error: Error) : Outcome<Nothing, Error> ","nz.adjmunro.outcome.outcome.Failure"]},{"name":"value class Fetching<out T : Any>(val cache: T? = null) : Fetch<T> ","description":"nz.adjmunro.outcome.fetch.Fetching","location":"outcome/nz.adjmunro.outcome.fetch/-fetching/index.html","searchKeys":["Fetching","value class Fetching<out T : Any>(val cache: T? = null) : Fetch<T> ","nz.adjmunro.outcome.fetch.Fetching"]},{"name":"value class Finished<out T : Any>(val result: T) : Fetch<T> ","description":"nz.adjmunro.outcome.fetch.Finished","location":"outcome/nz.adjmunro.outcome.fetch/-finished/index.html","searchKeys":["Finished","value class Finished<out T : Any>(val result: T) : Fetch<T> ","nz.adjmunro.outcome.fetch.Finished"]},{"name":"value class Success<out Ok : Any>(val value: Ok) : Outcome<Ok, Nothing> ","description":"nz.adjmunro.outcome.outcome.Success","location":"outcome/nz.adjmunro.outcome.outcome/-success/index.html","searchKeys":["Success","value class Success<out Ok : Any>(val value: Ok) : Outcome<Ok, Nothing> ","nz.adjmunro.outcome.outcome.Success"]}]