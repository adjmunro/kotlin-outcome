[{"name":"abstract fun complete()","description":"nz.adjmunro.knomadic.raise.RaiseScope.complete","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/complete.html","searchKeys":["complete","abstract fun complete()","nz.adjmunro.knomadic.raise.RaiseScope.complete"]},{"name":"abstract fun raised(error: Error): Nothing","description":"nz.adjmunro.knomadic.raise.RaiseScope.raised","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/raised.html","searchKeys":["raised","abstract fun raised(error: Error): Nothing","nz.adjmunro.knomadic.raise.RaiseScope.raised"]},{"name":"annotation class KnomadicDsl","description":"nz.adjmunro.knomadic.KnomadicDsl","location":"knomadic/nz.adjmunro.knomadic/-knomadic-dsl/index.html","searchKeys":["KnomadicDsl","annotation class KnomadicDsl","nz.adjmunro.knomadic.KnomadicDsl"]},{"name":"class DefaultRaise<in Error : Any> : RaiseScope<Error> ","description":"nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-default-raise/index.html","searchKeys":["DefaultRaise","class DefaultRaise<in Error : Any> : RaiseScope<Error> ","nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise"]},{"name":"class SafeFetchFlow<T : Any> : AbstractFlow<Fetch<T>> , Flow<Fetch<T>> ","description":"nz.adjmunro.knomadic.fetch.SafeFetchFlow","location":"knomadic/nz.adjmunro.knomadic.fetch/-safe-fetch-flow/index.html","searchKeys":["SafeFetchFlow","class SafeFetchFlow<T : Any> : AbstractFlow<Fetch<T>> , Flow<Fetch<T>> ","nz.adjmunro.knomadic.fetch.SafeFetchFlow"]},{"name":"constructor(error: Error)","description":"nz.adjmunro.knomadic.outcome.Outcome.Failure.Failure","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-failure/-failure.html","searchKeys":["Failure","constructor(error: Error)","nz.adjmunro.knomadic.outcome.Outcome.Failure.Failure"]},{"name":"constructor(error: Error, cache: Ok? = null)","description":"nz.adjmunro.knomadic.fetch.ErrorWithCache.ErrorWithCache","location":"knomadic/nz.adjmunro.knomadic.fetch/-error-with-cache/-error-with-cache.html","searchKeys":["ErrorWithCache","constructor(error: Error, cache: Ok? = null)","nz.adjmunro.knomadic.fetch.ErrorWithCache.ErrorWithCache"]},{"name":"constructor(result: T)","description":"nz.adjmunro.knomadic.fetch.Fetch.Finished.Finished","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-finished/-finished.html","searchKeys":["Finished","constructor(result: T)","nz.adjmunro.knomadic.fetch.Fetch.Finished.Finished"]},{"name":"constructor(value: Ok)","description":"nz.adjmunro.knomadic.outcome.Outcome.Success.Success","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-success/-success.html","searchKeys":["Success","constructor(value: Ok)","nz.adjmunro.knomadic.outcome.Outcome.Success.Success"]},{"name":"data class ErrorWithCache<out Ok : Any, out Error : Any>(val error: Error, val cache: Ok? = null)","description":"nz.adjmunro.knomadic.fetch.ErrorWithCache","location":"knomadic/nz.adjmunro.knomadic.fetch/-error-with-cache/index.html","searchKeys":["ErrorWithCache","data class ErrorWithCache<out Ok : Any, out Error : Any>(val error: Error, val cache: Ok? = null)","nz.adjmunro.knomadic.fetch.ErrorWithCache"]},{"name":"data object InProgress : Fetch<Nothing> ","description":"nz.adjmunro.knomadic.fetch.Fetch.InProgress","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-in-progress/index.html","searchKeys":["InProgress","data object InProgress : Fetch<Nothing> ","nz.adjmunro.knomadic.fetch.Fetch.InProgress"]},{"name":"data object NotStarted : Fetch<Nothing> ","description":"nz.adjmunro.knomadic.fetch.Fetch.NotStarted","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-not-started/index.html","searchKeys":["NotStarted","data object NotStarted : Fetch<Nothing> ","nz.adjmunro.knomadic.fetch.Fetch.NotStarted"]},{"name":"fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> Flow<Outcome<Ok, Error>>.collapse(): Flow<Ancestor>","description":"nz.adjmunro.knomadic.outcome.collapse","location":"knomadic/nz.adjmunro.knomadic.outcome/collapse.html","searchKeys":["collapse","fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> Flow<Outcome<Ok, Error>>.collapse(): Flow<Ancestor>","nz.adjmunro.knomadic.outcome.collapse"]},{"name":"fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> Outcome<Ok, Error>.collapse(): Ancestor","description":"nz.adjmunro.knomadic.outcome.collapse","location":"knomadic/nz.adjmunro.knomadic.outcome/collapse.html","searchKeys":["collapse","fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> Outcome<Ok, Error>.collapse(): Ancestor","nz.adjmunro.knomadic.outcome.collapse"]},{"name":"fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> Outcome<Ok, Error>.collapseToAncestor(): Ancestor","description":"nz.adjmunro.knomadic.outcome.collapseToAncestor","location":"knomadic/nz.adjmunro.knomadic.outcome/collapse-to-ancestor.html","searchKeys":["collapseToAncestor","fun <Ancestor : Any, Ok : Ancestor, Error : Ancestor> Outcome<Ok, Error>.collapseToAncestor(): Ancestor","nz.adjmunro.knomadic.outcome.collapseToAncestor"]},{"name":"fun <Error : Throwable> Error.nonFatalOrThrow(): Error","description":"nz.adjmunro.knomadic.util.nonFatalOrThrow","location":"knomadic/nz.adjmunro.knomadic.util/non-fatal-or-throw.html","searchKeys":["nonFatalOrThrow","fun <Error : Throwable> Error.nonFatalOrThrow(): Error","nz.adjmunro.knomadic.util.nonFatalOrThrow"]},{"name":"fun <In : Any, Out : Any> FetchFlow<In>.collapse(notStarted: suspend Fetch.NotStarted.() -> Out, fetching: suspend Fetch.InProgress.() -> Out, finished: suspend (result: In) -> Out): Flow<Out>","description":"nz.adjmunro.knomadic.fetch.collapse","location":"knomadic/nz.adjmunro.knomadic.fetch/collapse.html","searchKeys":["collapse","fun <In : Any, Out : Any> FetchFlow<In>.collapse(notStarted: suspend Fetch.NotStarted.() -> Out, fetching: suspend Fetch.InProgress.() -> Out, finished: suspend (result: In) -> Out): Flow<Out>","nz.adjmunro.knomadic.fetch.collapse"]},{"name":"fun <In : Any, Out : Any> FetchFlow<In>.fold(notStarted: suspend Fetch.NotStarted.() -> Fetch<Out> = { Fetch.NotStarted }, fetching: suspend Fetch.InProgress.() -> Fetch<Out> = { Fetch.InProgress }, finished: suspend (result: In) -> Fetch<Out>): FetchFlow<Out>","description":"nz.adjmunro.knomadic.fetch.fold","location":"knomadic/nz.adjmunro.knomadic.fetch/fold.html","searchKeys":["fold","fun <In : Any, Out : Any> FetchFlow<In>.fold(notStarted: suspend Fetch.NotStarted.() -> Fetch<Out> = { Fetch.NotStarted }, fetching: suspend Fetch.InProgress.() -> Fetch<Out> = { Fetch.InProgress }, finished: suspend (result: In) -> Fetch<Out>): FetchFlow<Out>","nz.adjmunro.knomadic.fetch.fold"]},{"name":"fun <In : Any, Out : Any> FetchFlow<In>.mapFinished(transform: suspend (result: In) -> Fetch<Out>): FetchFlow<Out>","description":"nz.adjmunro.knomadic.fetch.mapFinished","location":"knomadic/nz.adjmunro.knomadic.fetch/map-finished.html","searchKeys":["mapFinished","fun <In : Any, Out : Any> FetchFlow<In>.mapFinished(transform: suspend (result: In) -> Fetch<Out>): FetchFlow<Out>","nz.adjmunro.knomadic.fetch.mapFinished"]},{"name":"fun <Ok : Any, EmbeddedError : AncestorError, OuterError : AncestorError, AncestorError : Any> Outcome<Outcome<Ok, EmbeddedError>, OuterError>.flattenNestedSuccess(): Outcome<Ok, AncestorError>","description":"nz.adjmunro.knomadic.outcome.flattenNestedSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome/flatten-nested-success.html","searchKeys":["flattenNestedSuccess","fun <Ok : Any, EmbeddedError : AncestorError, OuterError : AncestorError, AncestorError : Any> Outcome<Outcome<Ok, EmbeddedError>, OuterError>.flattenNestedSuccess(): Outcome<Ok, AncestorError>","nz.adjmunro.knomadic.outcome.flattenNestedSuccess"]},{"name":"fun <Ok : Any, Error : Any> Flow<Outcome<Ok, Error>>.filterOnlyFailure(): Flow<Outcome.Failure<Error>>","description":"nz.adjmunro.knomadic.outcome.filterOnlyFailure","location":"knomadic/nz.adjmunro.knomadic.outcome/filter-only-failure.html","searchKeys":["filterOnlyFailure","fun <Ok : Any, Error : Any> Flow<Outcome<Ok, Error>>.filterOnlyFailure(): Flow<Outcome.Failure<Error>>","nz.adjmunro.knomadic.outcome.filterOnlyFailure"]},{"name":"fun <Ok : Any, Error : Any> Flow<Outcome<Ok, Error>>.filterOnlySuccess(): Flow<Outcome.Success<Ok>>","description":"nz.adjmunro.knomadic.outcome.filterOnlySuccess","location":"knomadic/nz.adjmunro.knomadic.outcome/filter-only-success.html","searchKeys":["filterOnlySuccess","fun <Ok : Any, Error : Any> Flow<Outcome<Ok, Error>>.filterOnlySuccess(): Flow<Outcome.Success<Ok>>","nz.adjmunro.knomadic.outcome.filterOnlySuccess"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrNull(): Error?","description":"nz.adjmunro.knomadic.outcome.errorOrNull","location":"knomadic/nz.adjmunro.knomadic.outcome/error-or-null.html","searchKeys":["errorOrNull","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrNull(): Error?","nz.adjmunro.knomadic.outcome.errorOrNull"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrThrow(): Error","description":"nz.adjmunro.knomadic.outcome.errorOrThrow","location":"knomadic/nz.adjmunro.knomadic.outcome/error-or-throw.html","searchKeys":["errorOrThrow","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrThrow(): Error","nz.adjmunro.knomadic.outcome.errorOrThrow"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrNull(): Ok?","description":"nz.adjmunro.knomadic.outcome.getOrNull","location":"knomadic/nz.adjmunro.knomadic.outcome/get-or-null.html","searchKeys":["getOrNull","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrNull(): Ok?","nz.adjmunro.knomadic.outcome.getOrNull"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrThrow(): Ok","description":"nz.adjmunro.knomadic.outcome.getOrThrow","location":"knomadic/nz.adjmunro.knomadic.outcome/get-or-throw.html","searchKeys":["getOrThrow","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrThrow(): Ok","nz.adjmunro.knomadic.outcome.getOrThrow"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.invert(): Outcome<Error, Ok>","description":"nz.adjmunro.knomadic.outcome.invert","location":"knomadic/nz.adjmunro.knomadic.outcome/invert.html","searchKeys":["invert","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.invert(): Outcome<Error, Ok>","nz.adjmunro.knomadic.outcome.invert"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(): Boolean","description":"nz.adjmunro.knomadic.outcome.isFailure","location":"knomadic/nz.adjmunro.knomadic.outcome/is-failure.html","searchKeys":["isFailure","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(): Boolean","nz.adjmunro.knomadic.outcome.isFailure"]},{"name":"fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(): Boolean","description":"nz.adjmunro.knomadic.outcome.isSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome/is-success.html","searchKeys":["isSuccess","fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(): Boolean","nz.adjmunro.knomadic.outcome.isSuccess"]},{"name":"fun <OuterOk : AncestorOk, EmbeddedOk : AncestorOk, Error : Any, AncestorOk : Any> Outcome<OuterOk, Outcome<EmbeddedOk, Error>>.flattenNestedFailure(): Outcome<AncestorOk, Error>","description":"nz.adjmunro.knomadic.outcome.flattenNestedFailure","location":"knomadic/nz.adjmunro.knomadic.outcome/flatten-nested-failure.html","searchKeys":["flattenNestedFailure","fun <OuterOk : AncestorOk, EmbeddedOk : AncestorOk, Error : Any, AncestorOk : Any> Outcome<OuterOk, Outcome<EmbeddedOk, Error>>.flattenNestedFailure(): Outcome<AncestorOk, Error>","nz.adjmunro.knomadic.outcome.flattenNestedFailure"]},{"name":"fun <SuccessOk : AncestorOk, SuccessError : AncestorError, FailureOk : AncestorOk, FailureError : AncestorError, AncestorOk : Any, AncestorError : Any> Outcome<Outcome<SuccessOk, SuccessError>, Outcome<FailureOk, FailureError>>.flattenNestedBoth(): Outcome<AncestorOk, AncestorError>","description":"nz.adjmunro.knomadic.outcome.flattenNestedBoth","location":"knomadic/nz.adjmunro.knomadic.outcome/flatten-nested-both.html","searchKeys":["flattenNestedBoth","fun <SuccessOk : AncestorOk, SuccessError : AncestorError, FailureOk : AncestorOk, FailureError : AncestorError, AncestorOk : Any, AncestorError : Any> Outcome<Outcome<SuccessOk, SuccessError>, Outcome<FailureOk, FailureError>>.flattenNestedBoth(): Outcome<AncestorOk, AncestorError>","nz.adjmunro.knomadic.outcome.flattenNestedBoth"]},{"name":"fun <T : Any> Fetch<T>.isFinished(): Boolean","description":"nz.adjmunro.knomadic.fetch.isFinished","location":"knomadic/nz.adjmunro.knomadic.fetch/is-finished.html","searchKeys":["isFinished","fun <T : Any> Fetch<T>.isFinished(): Boolean","nz.adjmunro.knomadic.fetch.isFinished"]},{"name":"fun <T : Any> Fetch<T>.isFinished(predicate: (T) -> Boolean): Boolean","description":"nz.adjmunro.knomadic.fetch.isFinished","location":"knomadic/nz.adjmunro.knomadic.fetch/is-finished.html","searchKeys":["isFinished","fun <T : Any> Fetch<T>.isFinished(predicate: (T) -> Boolean): Boolean","nz.adjmunro.knomadic.fetch.isFinished"]},{"name":"fun <T : Any> FetchFlow<Fetch<T>>.flatten(): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.flatten","location":"knomadic/nz.adjmunro.knomadic.fetch/flatten.html","searchKeys":["flatten","fun <T : Any> FetchFlow<Fetch<T>>.flatten(): FetchFlow<T>","nz.adjmunro.knomadic.fetch.flatten"]},{"name":"fun <T : Any> FetchFlow<T>.filterOnlyFinished(): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.filterOnlyFinished","location":"knomadic/nz.adjmunro.knomadic.fetch/filter-only-finished.html","searchKeys":["filterOnlyFinished","fun <T : Any> FetchFlow<T>.filterOnlyFinished(): FetchFlow<T>","nz.adjmunro.knomadic.fetch.filterOnlyFinished"]},{"name":"fun <T : Any> FetchFlow<T>.onFetchFinished(action: suspend (T) -> Unit): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.onFetchFinished","location":"knomadic/nz.adjmunro.knomadic.fetch/on-fetch-finished.html","searchKeys":["onFetchFinished","fun <T : Any> FetchFlow<T>.onFetchFinished(action: suspend (T) -> Unit): FetchFlow<T>","nz.adjmunro.knomadic.fetch.onFetchFinished"]},{"name":"fun <T : Any> FetchFlow<T>.onFetchFinished(predicate: (T) -> Boolean, action: suspend (T) -> Unit): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.onFetchFinished","location":"knomadic/nz.adjmunro.knomadic.fetch/on-fetch-finished.html","searchKeys":["onFetchFinished","fun <T : Any> FetchFlow<T>.onFetchFinished(predicate: (T) -> Boolean, action: suspend (T) -> Unit): FetchFlow<T>","nz.adjmunro.knomadic.fetch.onFetchFinished"]},{"name":"fun <T : Any> FetchFlow<T>.onFetchFinished(predicate: Boolean, action: suspend (T) -> Unit): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.onFetchFinished","location":"knomadic/nz.adjmunro.knomadic.fetch/on-fetch-finished.html","searchKeys":["onFetchFinished","fun <T : Any> FetchFlow<T>.onFetchFinished(predicate: Boolean, action: suspend (T) -> Unit): FetchFlow<T>","nz.adjmunro.knomadic.fetch.onFetchFinished"]},{"name":"fun <T : Any> FetchFlow<T>.onFetchInProgress(action: suspend Fetch.InProgress.() -> Unit): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.onFetchInProgress","location":"knomadic/nz.adjmunro.knomadic.fetch/on-fetch-in-progress.html","searchKeys":["onFetchInProgress","fun <T : Any> FetchFlow<T>.onFetchInProgress(action: suspend Fetch.InProgress.() -> Unit): FetchFlow<T>","nz.adjmunro.knomadic.fetch.onFetchInProgress"]},{"name":"fun <T : Any> FetchFlow<T>.onFetchNotStarted(action: suspend Fetch.NotStarted.() -> Unit): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.onFetchNotStarted","location":"knomadic/nz.adjmunro.knomadic.fetch/on-fetch-not-started.html","searchKeys":["onFetchNotStarted","fun <T : Any> FetchFlow<T>.onFetchNotStarted(action: suspend Fetch.NotStarted.() -> Unit): FetchFlow<T>","nz.adjmunro.knomadic.fetch.onFetchNotStarted"]},{"name":"fun <T : Any> fetch(timeout: Duration = Duration.INFINITE, recover: FetchCollector<T>.(Throwable) -> Fetch<T> = { throw it }, block: suspend FetchCollector<T>.() -> T): FetchFlow<T>","description":"nz.adjmunro.knomadic.fetch.fetch","location":"knomadic/nz.adjmunro.knomadic.fetch/fetch.html","searchKeys":["fetch","fun <T : Any> fetch(timeout: Duration = Duration.INFINITE, recover: FetchCollector<T>.(Throwable) -> Fetch<T> = { throw it }, block: suspend FetchCollector<T>.() -> T): FetchFlow<T>","nz.adjmunro.knomadic.fetch.fetch"]},{"name":"fun <T> T.wrapOutcome(): Outcome<T & Any, Throwable>","description":"nz.adjmunro.knomadic.outcome.wrapOutcome","location":"knomadic/nz.adjmunro.knomadic.outcome/wrap-outcome.html","searchKeys":["wrapOutcome","fun <T> T.wrapOutcome(): Outcome<T & Any, Throwable>","nz.adjmunro.knomadic.outcome.wrapOutcome"]},{"name":"fun Throwable.isFatal(): Boolean","description":"nz.adjmunro.knomadic.util.isFatal","location":"knomadic/nz.adjmunro.knomadic.util/is-fatal.html","searchKeys":["isFatal","fun Throwable.isFatal(): Boolean","nz.adjmunro.knomadic.util.isFatal"]},{"name":"infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrDefault(default: Error): Error","description":"nz.adjmunro.knomadic.outcome.errorOrDefault","location":"knomadic/nz.adjmunro.knomadic.outcome/error-or-default.html","searchKeys":["errorOrDefault","infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrDefault(default: Error): Error","nz.adjmunro.knomadic.outcome.errorOrDefault"]},{"name":"infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrDefault(default: Ok): Ok","description":"nz.adjmunro.knomadic.outcome.getOrDefault","location":"knomadic/nz.adjmunro.knomadic.outcome/get-or-default.html","searchKeys":["getOrDefault","infix fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrDefault(default: Ok): Ok","nz.adjmunro.knomadic.outcome.getOrDefault"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrElse(transform: (Ok) -> Error): Error","description":"nz.adjmunro.knomadic.outcome.errorOrElse","location":"knomadic/nz.adjmunro.knomadic.outcome/error-or-else.html","searchKeys":["errorOrElse","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrElse(transform: (Ok) -> Error): Error","nz.adjmunro.knomadic.outcome.errorOrElse"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrThrow(throws: (Ok) -> Throwable): Error","description":"nz.adjmunro.knomadic.outcome.errorOrThrow","location":"knomadic/nz.adjmunro.knomadic.outcome/error-or-throw.html","searchKeys":["errorOrThrow","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.errorOrThrow(throws: (Ok) -> Throwable): Error","nz.adjmunro.knomadic.outcome.errorOrThrow"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrElse(recover: (Error) -> Ok): Ok","description":"nz.adjmunro.knomadic.outcome.getOrElse","location":"knomadic/nz.adjmunro.knomadic.outcome/get-or-else.html","searchKeys":["getOrElse","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrElse(recover: (Error) -> Ok): Ok","nz.adjmunro.knomadic.outcome.getOrElse"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrThrow(throws: (Error) -> Throwable): Ok","description":"nz.adjmunro.knomadic.outcome.getOrThrow","location":"knomadic/nz.adjmunro.knomadic.outcome/get-or-throw.html","searchKeys":["getOrThrow","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.getOrThrow(throws: (Error) -> Throwable): Ok","nz.adjmunro.knomadic.outcome.getOrThrow"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(predicate: (Error) -> Boolean): Boolean","description":"nz.adjmunro.knomadic.outcome.isFailure","location":"knomadic/nz.adjmunro.knomadic.outcome/is-failure.html","searchKeys":["isFailure","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isFailure(predicate: (Error) -> Boolean): Boolean","nz.adjmunro.knomadic.outcome.isFailure"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(predicate: (Ok) -> Boolean): Boolean","description":"nz.adjmunro.knomadic.outcome.isSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome/is-success.html","searchKeys":["isSuccess","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.isSuccess(predicate: (Ok) -> Boolean): Boolean","nz.adjmunro.knomadic.outcome.isSuccess"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onFailure(block: (Error) -> Unit): Outcome<Ok, Error>","description":"nz.adjmunro.knomadic.outcome.onFailure","location":"knomadic/nz.adjmunro.knomadic.outcome/on-failure.html","searchKeys":["onFailure","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onFailure(block: (Error) -> Unit): Outcome<Ok, Error>","nz.adjmunro.knomadic.outcome.onFailure"]},{"name":"infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onSuccess(block: (Ok) -> Unit): Outcome<Ok, Error>","description":"nz.adjmunro.knomadic.outcome.onSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome/on-success.html","searchKeys":["onSuccess","infix inline fun <Ok : Any, Error : Any> Outcome<Ok, Error>.onSuccess(block: (Ok) -> Unit): Outcome<Ok, Error>","nz.adjmunro.knomadic.outcome.onSuccess"]},{"name":"infix inline suspend fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.flatMapSuccess(crossinline transform: suspend (In) -> Outcome<Out, Error>): Outcome<Out, Error>","description":"nz.adjmunro.knomadic.outcome.flatMapSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome/flat-map-success.html","searchKeys":["flatMapSuccess","infix inline suspend fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.flatMapSuccess(crossinline transform: suspend (In) -> Outcome<Out, Error>): Outcome<Out, Error>","nz.adjmunro.knomadic.outcome.flatMapSuccess"]},{"name":"infix inline suspend fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.flatMaps(crossinline success: suspend (In) -> Outcome<Out, Error>): Outcome<Out, Error>","description":"nz.adjmunro.knomadic.outcome.flatMaps","location":"knomadic/nz.adjmunro.knomadic.outcome/flat-maps.html","searchKeys":["flatMaps","infix inline suspend fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.flatMaps(crossinline success: suspend (In) -> Outcome<Out, Error>): Outcome<Out, Error>","nz.adjmunro.knomadic.outcome.flatMaps"]},{"name":"infix inline suspend fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.mapSuccess(crossinline transform: suspend (In) -> Out): Outcome<Out, Error>","description":"nz.adjmunro.knomadic.outcome.mapSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome/map-success.html","searchKeys":["mapSuccess","infix inline suspend fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.mapSuccess(crossinline transform: suspend (In) -> Out): Outcome<Out, Error>","nz.adjmunro.knomadic.outcome.mapSuccess"]},{"name":"infix inline suspend fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.maps(crossinline success: suspend (In) -> Out): Outcome<Out, Error>","description":"nz.adjmunro.knomadic.outcome.maps","location":"knomadic/nz.adjmunro.knomadic.outcome/maps.html","searchKeys":["maps","infix inline suspend fun <In : Any, Out : Any, Error : Any> Outcome<In, Error>.maps(crossinline success: suspend (In) -> Out): Outcome<Out, Error>","nz.adjmunro.knomadic.outcome.maps"]},{"name":"infix inline suspend fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToFailure(crossinline falter: suspend (Ok) -> Error): Outcome.Failure<Error>","description":"nz.adjmunro.knomadic.outcome.coerceToFailure","location":"knomadic/nz.adjmunro.knomadic.outcome/coerce-to-failure.html","searchKeys":["coerceToFailure","infix inline suspend fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToFailure(crossinline falter: suspend (Ok) -> Error): Outcome.Failure<Error>","nz.adjmunro.knomadic.outcome.coerceToFailure"]},{"name":"infix inline suspend fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToSuccess(crossinline recover: suspend (Error) -> Ok): Outcome.Success<Ok>","description":"nz.adjmunro.knomadic.outcome.coerceToSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome/coerce-to-success.html","searchKeys":["coerceToSuccess","infix inline suspend fun <Ok : Any, Error : Any> Outcome<Ok, Error>.coerceToSuccess(crossinline recover: suspend (Error) -> Ok): Outcome.Success<Ok>","nz.adjmunro.knomadic.outcome.coerceToSuccess"]},{"name":"infix inline suspend fun <Ok : Any, Error : Any> Outcome<Ok, Error>.falter(crossinline transform: suspend (Ok) -> Error): Outcome.Failure<Error>","description":"nz.adjmunro.knomadic.outcome.falter","location":"knomadic/nz.adjmunro.knomadic.outcome/falter.html","searchKeys":["falter","infix inline suspend fun <Ok : Any, Error : Any> Outcome<Ok, Error>.falter(crossinline transform: suspend (Ok) -> Error): Outcome.Failure<Error>","nz.adjmunro.knomadic.outcome.falter"]},{"name":"infix inline suspend fun <Ok : Any, Error : Any> Outcome<Ok, Error>.recover(crossinline transform: suspend (Error) -> Ok): Outcome.Success<Ok>","description":"nz.adjmunro.knomadic.outcome.recover","location":"knomadic/nz.adjmunro.knomadic.outcome/recover.html","searchKeys":["recover","infix inline suspend fun <Ok : Any, Error : Any> Outcome<Ok, Error>.recover(crossinline transform: suspend (Error) -> Ok): Outcome.Success<Ok>","nz.adjmunro.knomadic.outcome.recover"]},{"name":"infix inline suspend fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.flatMapFailure(crossinline transform: suspend (ErrorIn) -> Outcome<Ok, ErrorOut>): Outcome<Ok, ErrorOut>","description":"nz.adjmunro.knomadic.outcome.flatMapFailure","location":"knomadic/nz.adjmunro.knomadic.outcome/flat-map-failure.html","searchKeys":["flatMapFailure","infix inline suspend fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.flatMapFailure(crossinline transform: suspend (ErrorIn) -> Outcome<Ok, ErrorOut>): Outcome<Ok, ErrorOut>","nz.adjmunro.knomadic.outcome.flatMapFailure"]},{"name":"infix inline suspend fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.flatMapf(crossinline failure: suspend (ErrorIn) -> Outcome<Ok, ErrorOut>): Outcome<Ok, ErrorOut>","description":"nz.adjmunro.knomadic.outcome.flatMapf","location":"knomadic/nz.adjmunro.knomadic.outcome/flat-mapf.html","searchKeys":["flatMapf","infix inline suspend fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.flatMapf(crossinline failure: suspend (ErrorIn) -> Outcome<Ok, ErrorOut>): Outcome<Ok, ErrorOut>","nz.adjmunro.knomadic.outcome.flatMapf"]},{"name":"infix inline suspend fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.mapFailure(crossinline transform: suspend (ErrorIn) -> ErrorOut): Outcome<Ok, ErrorOut>","description":"nz.adjmunro.knomadic.outcome.mapFailure","location":"knomadic/nz.adjmunro.knomadic.outcome/map-failure.html","searchKeys":["mapFailure","infix inline suspend fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.mapFailure(crossinline transform: suspend (ErrorIn) -> ErrorOut): Outcome<Ok, ErrorOut>","nz.adjmunro.knomadic.outcome.mapFailure"]},{"name":"infix inline suspend fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.mapf(crossinline failure: suspend (ErrorIn) -> ErrorOut): Outcome<Ok, ErrorOut>","description":"nz.adjmunro.knomadic.outcome.mapf","location":"knomadic/nz.adjmunro.knomadic.outcome/mapf.html","searchKeys":["mapf","infix inline suspend fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Outcome<Ok, ErrorIn>.mapf(crossinline failure: suspend (ErrorIn) -> ErrorOut): Outcome<Ok, ErrorOut>","nz.adjmunro.knomadic.outcome.mapf"]},{"name":"inline fun <Ancestor : Any, In : Ancestor, Out : Ancestor> FetchFlow<In>.foldAncestor(crossinline notStarted: suspend Fetch.NotStarted.() -> Fetch<Out> = { Fetch.NotStarted }, crossinline fetching: suspend Fetch.InProgress.() -> Fetch<Out> = { Fetch.InProgress }, crossinline finished: suspend (result: In) -> Fetch<Ancestor> = {\n        Fetch.Finished(it)\n    }): FetchFlow<Ancestor>","description":"nz.adjmunro.knomadic.fetch.foldAncestor","location":"knomadic/nz.adjmunro.knomadic.fetch/fold-ancestor.html","searchKeys":["foldAncestor","inline fun <Ancestor : Any, In : Ancestor, Out : Ancestor> FetchFlow<In>.foldAncestor(crossinline notStarted: suspend Fetch.NotStarted.() -> Fetch<Out> = { Fetch.NotStarted }, crossinline fetching: suspend Fetch.InProgress.() -> Fetch<Out> = { Fetch.InProgress }, crossinline finished: suspend (result: In) -> Fetch<Ancestor> = {\n        Fetch.Finished(it)\n    }): FetchFlow<Ancestor>","nz.adjmunro.knomadic.fetch.foldAncestor"]},{"name":"inline fun <Error : Any> RaiseScope<Error>.ensure(condition: Boolean, raise: () -> Error)","description":"nz.adjmunro.knomadic.raise.ensure","location":"knomadic/nz.adjmunro.knomadic.raise/ensure.html","searchKeys":["ensure","inline fun <Error : Any> RaiseScope<Error>.ensure(condition: Boolean, raise: () -> Error)","nz.adjmunro.knomadic.raise.ensure"]},{"name":"inline fun <Error : Any> RaiseScope<Error>.raise(error: () -> Error): Nothing","description":"nz.adjmunro.knomadic.raise.RaiseScope.Companion.raise","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-companion/raise.html","searchKeys":["raise","inline fun <Error : Any> RaiseScope<Error>.raise(error: () -> Error): Nothing","nz.adjmunro.knomadic.raise.RaiseScope.Companion.raise"]},{"name":"inline fun <Error : Any> failureOf(error: Error): Outcome.Failure<Error>","description":"nz.adjmunro.knomadic.outcome.failureOf","location":"knomadic/nz.adjmunro.knomadic.outcome/failure-of.html","searchKeys":["failureOf","inline fun <Error : Any> failureOf(error: Error): Outcome.Failure<Error>","nz.adjmunro.knomadic.outcome.failureOf"]},{"name":"inline fun <Error : Any> faultyOf(crossinline catch: (throwable: Throwable) -> Faulty<Error> = ::rethrow, crossinline block: RaiseScope<Error>.() -> Unit): Faulty<Error>","description":"nz.adjmunro.knomadic.outcome.faultyOf","location":"knomadic/nz.adjmunro.knomadic.outcome/faulty-of.html","searchKeys":["faultyOf","inline fun <Error : Any> faultyOf(crossinline catch: (throwable: Throwable) -> Faulty<Error> = ::rethrow, crossinline block: RaiseScope<Error>.() -> Unit): Faulty<Error>","nz.adjmunro.knomadic.outcome.faultyOf"]},{"name":"inline fun <Error : Throwable> Error.wrapFaulty(): Faulty<Error>","description":"nz.adjmunro.knomadic.outcome.wrapFaulty","location":"knomadic/nz.adjmunro.knomadic.outcome/wrap-faulty.html","searchKeys":["wrapFaulty","inline fun <Error : Throwable> Error.wrapFaulty(): Faulty<Error>","nz.adjmunro.knomadic.outcome.wrapFaulty"]},{"name":"inline fun <In : Any, Out : Any, Error : Any> Flow<Outcome<In, Error>>.mapEachSuccess(crossinline transform: suspend (In) -> Out): Flow<Outcome<Out, Error>>","description":"nz.adjmunro.knomadic.outcome.mapEachSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome/map-each-success.html","searchKeys":["mapEachSuccess","inline fun <In : Any, Out : Any, Error : Any> Flow<Outcome<In, Error>>.mapEachSuccess(crossinline transform: suspend (In) -> Out): Flow<Outcome<Out, Error>>","nz.adjmunro.knomadic.outcome.mapEachSuccess"]},{"name":"inline fun <In : Any, Out : Any, Error : Any> fold(block: (scope: RaiseScope<Error>) -> In, catch: (throwable: Throwable) -> Out = ::rethrow, recover: (error: Error) -> Out, transform: (value: In) -> Out): Out","description":"nz.adjmunro.knomadic.raise.RaiseScope.Companion.fold","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-companion/fold.html","searchKeys":["fold","inline fun <In : Any, Out : Any, Error : Any> fold(block: (scope: RaiseScope<Error>) -> In, catch: (throwable: Throwable) -> Out = ::rethrow, recover: (error: Error) -> Out, transform: (value: In) -> Out): Out","nz.adjmunro.knomadic.raise.RaiseScope.Companion.fold"]},{"name":"inline fun <In, Out> In.nullfold(none: (NullPointerException) -> Out, some: (In & Any) -> Out): Out","description":"nz.adjmunro.knomadic.util.nullfold","location":"knomadic/nz.adjmunro.knomadic.util/nullfold.html","searchKeys":["nullfold","inline fun <In, Out> In.nullfold(none: (NullPointerException) -> Out, some: (In & Any) -> Out): Out","nz.adjmunro.knomadic.util.nullfold"]},{"name":"inline fun <In, Out> In.throwfold(throws: (Throwable) -> Out, pass: (In) -> Out): Out","description":"nz.adjmunro.knomadic.util.throwfold","location":"knomadic/nz.adjmunro.knomadic.util/throwfold.html","searchKeys":["throwfold","inline fun <In, Out> In.throwfold(throws: (Throwable) -> Out, pass: (In) -> Out): Out","nz.adjmunro.knomadic.util.throwfold"]},{"name":"inline fun <Ok : Any, Error : Any, Output> Flow<Outcome<Ok, Error>>.collapse(crossinline success: suspend (Ok) -> Output, crossinline failure: suspend (Error) -> Output): Flow<Output>","description":"nz.adjmunro.knomadic.outcome.collapse","location":"knomadic/nz.adjmunro.knomadic.outcome/collapse.html","searchKeys":["collapse","inline fun <Ok : Any, Error : Any, Output> Flow<Outcome<Ok, Error>>.collapse(crossinline success: suspend (Ok) -> Output, crossinline failure: suspend (Error) -> Output): Flow<Output>","nz.adjmunro.knomadic.outcome.collapse"]},{"name":"inline fun <Ok : Any, Error : Any> Flow<Outcome<Ok, Error>>.onEachFailure(crossinline block: suspend (Error) -> Unit): Flow<Outcome<Ok, Error>>","description":"nz.adjmunro.knomadic.outcome.onEachFailure","location":"knomadic/nz.adjmunro.knomadic.outcome/on-each-failure.html","searchKeys":["onEachFailure","inline fun <Ok : Any, Error : Any> Flow<Outcome<Ok, Error>>.onEachFailure(crossinline block: suspend (Error) -> Unit): Flow<Outcome<Ok, Error>>","nz.adjmunro.knomadic.outcome.onEachFailure"]},{"name":"inline fun <Ok : Any, Error : Any> Flow<Outcome<Ok, Error>>.onEachSuccess(crossinline block: suspend (Ok) -> Unit): Flow<Outcome<Ok, Error>>","description":"nz.adjmunro.knomadic.outcome.onEachSuccess","location":"knomadic/nz.adjmunro.knomadic.outcome/on-each-success.html","searchKeys":["onEachSuccess","inline fun <Ok : Any, Error : Any> Flow<Outcome<Ok, Error>>.onEachSuccess(crossinline block: suspend (Ok) -> Unit): Flow<Outcome<Ok, Error>>","nz.adjmunro.knomadic.outcome.onEachSuccess"]},{"name":"inline fun <Ok : Any, Error : Any> RaiseScope<Error>.catch(catch: (throwable: Throwable) -> Error = ::rethrow, block: RaiseScope<Error>.() -> Ok): Ok","description":"nz.adjmunro.knomadic.raise.RaiseScope.Companion.catch","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-companion/catch.html","searchKeys":["catch","inline fun <Ok : Any, Error : Any> RaiseScope<Error>.catch(catch: (throwable: Throwable) -> Error = ::rethrow, block: RaiseScope<Error>.() -> Ok): Ok","nz.adjmunro.knomadic.raise.RaiseScope.Companion.catch"]},{"name":"inline fun <Ok : Any, Error : Any> RaiseScope<Error>.ensureNotNull(value: Ok?, raise: () -> Error): Ok","description":"nz.adjmunro.knomadic.raise.ensureNotNull","location":"knomadic/nz.adjmunro.knomadic.raise/ensure-not-null.html","searchKeys":["ensureNotNull","inline fun <Ok : Any, Error : Any> RaiseScope<Error>.ensureNotNull(value: Ok?, raise: () -> Error): Ok","nz.adjmunro.knomadic.raise.ensureNotNull"]},{"name":"inline fun <Ok : Any, Error : Any> outcomeOf(crossinline catch: (throwable: Throwable) -> Outcome<Ok, Error> = ::rethrow, crossinline block: RaiseScope<Error>.() -> Ok): Outcome<Ok, Error>","description":"nz.adjmunro.knomadic.outcome.outcomeOf","location":"knomadic/nz.adjmunro.knomadic.outcome/outcome-of.html","searchKeys":["outcomeOf","inline fun <Ok : Any, Error : Any> outcomeOf(crossinline catch: (throwable: Throwable) -> Outcome<Ok, Error> = ::rethrow, crossinline block: RaiseScope<Error>.() -> Ok): Outcome<Ok, Error>","nz.adjmunro.knomadic.outcome.outcomeOf"]},{"name":"inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Flow<Outcome<Ok, ErrorIn>>.mapEachFailure(crossinline transform: suspend (ErrorIn) -> ErrorOut): Flow<Outcome<Ok, ErrorOut>>","description":"nz.adjmunro.knomadic.outcome.mapEachFailure","location":"knomadic/nz.adjmunro.knomadic.outcome/map-each-failure.html","searchKeys":["mapEachFailure","inline fun <Ok : Any, ErrorIn : Any, ErrorOut : Any> Flow<Outcome<Ok, ErrorIn>>.mapEachFailure(crossinline transform: suspend (ErrorIn) -> ErrorOut): Flow<Outcome<Ok, ErrorOut>>","nz.adjmunro.knomadic.outcome.mapEachFailure"]},{"name":"inline fun <Ok : Any> maybeOf(crossinline catch: (throwable: Throwable) -> Maybe<Ok> = ::rethrow, crossinline block: RaiseScope<Any>.() -> Ok): Maybe<Ok>","description":"nz.adjmunro.knomadic.outcome.maybeOf","location":"knomadic/nz.adjmunro.knomadic.outcome/maybe-of.html","searchKeys":["maybeOf","inline fun <Ok : Any> maybeOf(crossinline catch: (throwable: Throwable) -> Maybe<Ok> = ::rethrow, crossinline block: RaiseScope<Any>.() -> Ok): Maybe<Ok>","nz.adjmunro.knomadic.outcome.maybeOf"]},{"name":"inline fun <Ok : Any> successOf(value: Ok): Outcome.Success<Ok>","description":"nz.adjmunro.knomadic.outcome.successOf","location":"knomadic/nz.adjmunro.knomadic.outcome/success-of.html","searchKeys":["successOf","inline fun <Ok : Any> successOf(value: Ok): Outcome.Success<Ok>","nz.adjmunro.knomadic.outcome.successOf"]},{"name":"inline fun <T : Any> Fetch<T>.onFinished(action: (T) -> Unit): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.onFinished","location":"knomadic/nz.adjmunro.knomadic.fetch/on-finished.html","searchKeys":["onFinished","inline fun <T : Any> Fetch<T>.onFinished(action: (T) -> Unit): Fetch<T>","nz.adjmunro.knomadic.fetch.onFinished"]},{"name":"inline fun <T : Any> Fetch<T>.onFinished(noinline predicate: (result: T) -> Boolean, action: (T) -> Unit): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.onFinished","location":"knomadic/nz.adjmunro.knomadic.fetch/on-finished.html","searchKeys":["onFinished","inline fun <T : Any> Fetch<T>.onFinished(noinline predicate: (result: T) -> Boolean, action: (T) -> Unit): Fetch<T>","nz.adjmunro.knomadic.fetch.onFinished"]},{"name":"inline fun <T : Any> Fetch<T>.onFinished(predicate: Boolean, action: Fetch.Finished<T>.() -> Unit): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.onFinished","location":"knomadic/nz.adjmunro.knomadic.fetch/on-finished.html","searchKeys":["onFinished","inline fun <T : Any> Fetch<T>.onFinished(predicate: Boolean, action: Fetch.Finished<T>.() -> Unit): Fetch<T>","nz.adjmunro.knomadic.fetch.onFinished"]},{"name":"inline fun <T : Any> Fetch<T>.onInProgress(action: Fetch.InProgress.() -> Unit): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.onInProgress","location":"knomadic/nz.adjmunro.knomadic.fetch/on-in-progress.html","searchKeys":["onInProgress","inline fun <T : Any> Fetch<T>.onInProgress(action: Fetch.InProgress.() -> Unit): Fetch<T>","nz.adjmunro.knomadic.fetch.onInProgress"]},{"name":"inline fun <T : Any> Fetch<T>.onNotStarted(action: Fetch.NotStarted.() -> Unit): Fetch<T>","description":"nz.adjmunro.knomadic.fetch.onNotStarted","location":"knomadic/nz.adjmunro.knomadic.fetch/on-not-started.html","searchKeys":["onNotStarted","inline fun <T : Any> Fetch<T>.onNotStarted(action: Fetch.NotStarted.() -> Unit): Fetch<T>","nz.adjmunro.knomadic.fetch.onNotStarted"]},{"name":"inline fun <T> T.caller(ignore: Any? = null): T","description":"nz.adjmunro.knomadic.util.caller","location":"knomadic/nz.adjmunro.knomadic.util/caller.html","searchKeys":["caller","inline fun <T> T.caller(ignore: Any? = null): T","nz.adjmunro.knomadic.util.caller"]},{"name":"inline fun <T> T.wrapFaulty(): Faulty<Throwable>","description":"nz.adjmunro.knomadic.outcome.wrapFaulty","location":"knomadic/nz.adjmunro.knomadic.outcome/wrap-faulty.html","searchKeys":["wrapFaulty","inline fun <T> T.wrapFaulty(): Faulty<Throwable>","nz.adjmunro.knomadic.outcome.wrapFaulty"]},{"name":"inline fun <T> T.wrapMaybe(): Maybe<T & Any>","description":"nz.adjmunro.knomadic.outcome.wrapMaybe","location":"knomadic/nz.adjmunro.knomadic.outcome/wrap-maybe.html","searchKeys":["wrapMaybe","inline fun <T> T.wrapMaybe(): Maybe<T & Any>","nz.adjmunro.knomadic.outcome.wrapMaybe"]},{"name":"inline fun <T> itself(value: T): T","description":"nz.adjmunro.knomadic.util.itself","location":"knomadic/nz.adjmunro.knomadic.util/itself.html","searchKeys":["itself","inline fun <T> itself(value: T): T","nz.adjmunro.knomadic.util.itself"]},{"name":"inline fun <T> nullable(block: () -> T): T?","description":"nz.adjmunro.knomadic.util.nullable","location":"knomadic/nz.adjmunro.knomadic.util/nullable.html","searchKeys":["nullable","inline fun <T> nullable(block: () -> T): T?","nz.adjmunro.knomadic.util.nullable"]},{"name":"inline fun <T> resultOf(block: () -> T): KotlinResult<T>","description":"nz.adjmunro.knomadic.util.resultOf","location":"knomadic/nz.adjmunro.knomadic.util/result-of.html","searchKeys":["resultOf","inline fun <T> resultOf(block: () -> T): KotlinResult<T>","nz.adjmunro.knomadic.util.resultOf"]},{"name":"inline fun nulls(ignore: Any? = null): Unit?","description":"nz.adjmunro.knomadic.util.nulls","location":"knomadic/nz.adjmunro.knomadic.util/nulls.html","searchKeys":["nulls","inline fun nulls(ignore: Any? = null): Unit?","nz.adjmunro.knomadic.util.nulls"]},{"name":"inline fun outcomeFailed(ignore: Any? = null): Outcome.Failure<Unit>","description":"nz.adjmunro.knomadic.outcome.outcomeFailed","location":"knomadic/nz.adjmunro.knomadic.outcome/outcome-failed.html","searchKeys":["outcomeFailed","inline fun outcomeFailed(ignore: Any? = null): Outcome.Failure<Unit>","nz.adjmunro.knomadic.outcome.outcomeFailed"]},{"name":"inline fun outcomePassed(ignore: Any? = null): Outcome.Success<Unit>","description":"nz.adjmunro.knomadic.outcome.outcomePassed","location":"knomadic/nz.adjmunro.knomadic.outcome/outcome-passed.html","searchKeys":["outcomePassed","inline fun outcomePassed(ignore: Any? = null): Outcome.Success<Unit>","nz.adjmunro.knomadic.outcome.outcomePassed"]},{"name":"inline fun rethrow(throwable: Throwable): Nothing","description":"nz.adjmunro.knomadic.util.rethrow","location":"knomadic/nz.adjmunro.knomadic.util/rethrow.html","searchKeys":["rethrow","inline fun rethrow(throwable: Throwable): Nothing","nz.adjmunro.knomadic.util.rethrow"]},{"name":"inline suspend fun <In : Any, Out : Any, ErrorIn : Any, ErrorOut : Any> Outcome<In, ErrorIn>.flatFold(crossinline success: suspend (In) -> Outcome<Out, ErrorOut>, crossinline failure: suspend (ErrorIn) -> Outcome<Out, ErrorOut>): Outcome<Out, ErrorOut>","description":"nz.adjmunro.knomadic.outcome.flatFold","location":"knomadic/nz.adjmunro.knomadic.outcome/flat-fold.html","searchKeys":["flatFold","inline suspend fun <In : Any, Out : Any, ErrorIn : Any, ErrorOut : Any> Outcome<In, ErrorIn>.flatFold(crossinline success: suspend (In) -> Outcome<Out, ErrorOut>, crossinline failure: suspend (ErrorIn) -> Outcome<Out, ErrorOut>): Outcome<Out, ErrorOut>","nz.adjmunro.knomadic.outcome.flatFold"]},{"name":"inline suspend fun <In : Any, Out : Any, ErrorIn : Any, ErrorOut : Any> Outcome<In, ErrorIn>.fold(crossinline success: suspend (In) -> Out, crossinline failure: suspend (ErrorIn) -> ErrorOut): Outcome<Out, ErrorOut>","description":"nz.adjmunro.knomadic.outcome.fold","location":"knomadic/nz.adjmunro.knomadic.outcome/fold.html","searchKeys":["fold","inline suspend fun <In : Any, Out : Any, ErrorIn : Any, ErrorOut : Any> Outcome<In, ErrorIn>.fold(crossinline success: suspend (In) -> Out, crossinline failure: suspend (ErrorIn) -> ErrorOut): Outcome<Out, ErrorOut>","nz.adjmunro.knomadic.outcome.fold"]},{"name":"inline suspend fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.collapseFold(crossinline success: suspend (Ok) -> Output, crossinline failure: suspend (Error) -> Output): Output","description":"nz.adjmunro.knomadic.outcome.collapseFold","location":"knomadic/nz.adjmunro.knomadic.outcome/collapse-fold.html","searchKeys":["collapseFold","inline suspend fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.collapseFold(crossinline success: suspend (Ok) -> Output, crossinline failure: suspend (Error) -> Output): Output","nz.adjmunro.knomadic.outcome.collapseFold"]},{"name":"inline suspend fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.collapseToAncestor(crossinline success: suspend (Ok) -> Output, crossinline failure: suspend (Error) -> Output): Output","description":"nz.adjmunro.knomadic.outcome.collapseToAncestor","location":"knomadic/nz.adjmunro.knomadic.outcome/collapse-to-ancestor.html","searchKeys":["collapseToAncestor","inline suspend fun <Ok : Any, Error : Any, Output> Outcome<Ok, Error>.collapseToAncestor(crossinline success: suspend (Ok) -> Output, crossinline failure: suspend (Error) -> Output): Output","nz.adjmunro.knomadic.outcome.collapseToAncestor"]},{"name":"inline suspend fun <T : Any> FetchCollector<T>.finished(result: T)","description":"nz.adjmunro.knomadic.fetch.finished","location":"knomadic/nz.adjmunro.knomadic.fetch/finished.html","searchKeys":["finished","inline suspend fun <T : Any> FetchCollector<T>.finished(result: T)","nz.adjmunro.knomadic.fetch.finished"]},{"name":"inline suspend fun <T> FlowCollector<T>.emit(recover: FlowCollector<T>.(Throwable) -> T = { throw it }, block: FlowCollector<T>.() -> T)","description":"nz.adjmunro.knomadic.fetch.emit","location":"knomadic/nz.adjmunro.knomadic.fetch/emit.html","searchKeys":["emit","inline suspend fun <T> FlowCollector<T>.emit(recover: FlowCollector<T>.(Throwable) -> T = { throw it }, block: FlowCollector<T>.() -> T)","nz.adjmunro.knomadic.fetch.emit"]},{"name":"inline suspend fun FetchCollector<Nothing>.fetching()","description":"nz.adjmunro.knomadic.fetch.fetching","location":"knomadic/nz.adjmunro.knomadic.fetch/fetching.html","searchKeys":["fetching","inline suspend fun FetchCollector<Nothing>.fetching()","nz.adjmunro.knomadic.fetch.fetching"]},{"name":"inline suspend fun FetchCollector<Nothing>.reset()","description":"nz.adjmunro.knomadic.fetch.reset","location":"knomadic/nz.adjmunro.knomadic.fetch/reset.html","searchKeys":["reset","inline suspend fun FetchCollector<Nothing>.reset()","nz.adjmunro.knomadic.fetch.reset"]},{"name":"object Companion","description":"nz.adjmunro.knomadic.raise.RaiseScope.Companion","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-companion/index.html","searchKeys":["Companion","object Companion","nz.adjmunro.knomadic.raise.RaiseScope.Companion"]},{"name":"open operator fun component1(): Ok?","description":"nz.adjmunro.knomadic.outcome.Outcome.component1","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/component1.html","searchKeys":["component1","open operator fun component1(): Ok?","nz.adjmunro.knomadic.outcome.Outcome.component1"]},{"name":"open operator fun component2(): Error?","description":"nz.adjmunro.knomadic.outcome.Outcome.component2","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/component2.html","searchKeys":["component2","open operator fun component2(): Error?","nz.adjmunro.knomadic.outcome.Outcome.component2"]},{"name":"open operator override fun component1(): Ok","description":"nz.adjmunro.knomadic.outcome.Outcome.Success.component1","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-success/component1.html","searchKeys":["component1","open operator override fun component1(): Ok","nz.adjmunro.knomadic.outcome.Outcome.Success.component1"]},{"name":"open operator override fun component2(): Error","description":"nz.adjmunro.knomadic.outcome.Outcome.Failure.component2","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-failure/component2.html","searchKeys":["component2","open operator override fun component2(): Error","nz.adjmunro.knomadic.outcome.Outcome.Failure.component2"]},{"name":"open override fun complete()","description":"nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise.complete","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-default-raise/complete.html","searchKeys":["complete","open override fun complete()","nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise.complete"]},{"name":"open override fun raised(error: Error): Nothing","description":"nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise.raised","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/-default-raise/raised.html","searchKeys":["raised","open override fun raised(error: Error): Nothing","nz.adjmunro.knomadic.raise.RaiseScope.DefaultRaise.raised"]},{"name":"open override fun toString(): String","description":"nz.adjmunro.knomadic.fetch.Fetch.Finished.toString","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-finished/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.adjmunro.knomadic.fetch.Fetch.Finished.toString"]},{"name":"open override fun toString(): String","description":"nz.adjmunro.knomadic.outcome.Outcome.Failure.toString","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-failure/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.adjmunro.knomadic.outcome.Outcome.Failure.toString"]},{"name":"open override fun toString(): String","description":"nz.adjmunro.knomadic.outcome.Outcome.Success.toString","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-success/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.adjmunro.knomadic.outcome.Outcome.Success.toString"]},{"name":"open suspend override fun collectSafely(collector: FetchCollector<T>)","description":"nz.adjmunro.knomadic.fetch.SafeFetchFlow.collectSafely","location":"knomadic/nz.adjmunro.knomadic.fetch/-safe-fetch-flow/collect-safely.html","searchKeys":["collectSafely","open suspend override fun collectSafely(collector: FetchCollector<T>)","nz.adjmunro.knomadic.fetch.SafeFetchFlow.collectSafely"]},{"name":"operator fun component1(): T","description":"nz.adjmunro.knomadic.fetch.Fetch.Finished.component1","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-finished/component1.html","searchKeys":["component1","operator fun component1(): T","nz.adjmunro.knomadic.fetch.Fetch.Finished.component1"]},{"name":"sealed interface Fetch<out T : Any>","description":"nz.adjmunro.knomadic.fetch.Fetch","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/index.html","searchKeys":["Fetch","sealed interface Fetch<out T : Any>","nz.adjmunro.knomadic.fetch.Fetch"]},{"name":"sealed interface Outcome<out Ok : Any, out Error : Any>","description":"nz.adjmunro.knomadic.outcome.Outcome","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/index.html","searchKeys":["Outcome","sealed interface Outcome<out Ok : Any, out Error : Any>","nz.adjmunro.knomadic.outcome.Outcome"]},{"name":"sealed interface RaiseScope<in Error : Any>","description":"nz.adjmunro.knomadic.raise.RaiseScope","location":"knomadic/nz.adjmunro.knomadic.raise/-raise-scope/index.html","searchKeys":["RaiseScope","sealed interface RaiseScope<in Error : Any>","nz.adjmunro.knomadic.raise.RaiseScope"]},{"name":"typealias Faulty<Error> = Outcome<Unit, Error>","description":"nz.adjmunro.knomadic.outcome.Faulty","location":"knomadic/nz.adjmunro.knomadic.outcome/-faulty/index.html","searchKeys":["Faulty","typealias Faulty<Error> = Outcome<Unit, Error>","nz.adjmunro.knomadic.outcome.Faulty"]},{"name":"typealias FaultyFetch<Error> = Flow<Fetch<Faulty<Error>>>","description":"nz.adjmunro.knomadic.FaultyFetch","location":"knomadic/nz.adjmunro.knomadic/-faulty-fetch/index.html","searchKeys":["FaultyFetch","typealias FaultyFetch<Error> = Flow<Fetch<Faulty<Error>>>","nz.adjmunro.knomadic.FaultyFetch"]},{"name":"typealias FaultyFlow<Error> = Flow<Faulty<Error>>","description":"nz.adjmunro.knomadic.FaultyFlow","location":"knomadic/nz.adjmunro.knomadic/-faulty-flow/index.html","searchKeys":["FaultyFlow","typealias FaultyFlow<Error> = Flow<Faulty<Error>>","nz.adjmunro.knomadic.FaultyFlow"]},{"name":"typealias FetchFlow<T> = Flow<Fetch<T>>","description":"nz.adjmunro.knomadic.FetchFlow","location":"knomadic/nz.adjmunro.knomadic/-fetch-flow/index.html","searchKeys":["FetchFlow","typealias FetchFlow<T> = Flow<Fetch<T>>","nz.adjmunro.knomadic.FetchFlow"]},{"name":"typealias KotlinResult<T> = Result<T>","description":"nz.adjmunro.knomadic.KotlinResult","location":"knomadic/nz.adjmunro.knomadic/-kotlin-result/index.html","searchKeys":["KotlinResult","typealias KotlinResult<T> = Result<T>","nz.adjmunro.knomadic.KotlinResult"]},{"name":"typealias Maybe<Ok> = Outcome<Ok, Unit>","description":"nz.adjmunro.knomadic.outcome.Maybe","location":"knomadic/nz.adjmunro.knomadic.outcome/-maybe/index.html","searchKeys":["Maybe","typealias Maybe<Ok> = Outcome<Ok, Unit>","nz.adjmunro.knomadic.outcome.Maybe"]},{"name":"typealias MaybeFetch<Ok> = Flow<Fetch<Maybe<Ok>>>","description":"nz.adjmunro.knomadic.MaybeFetch","location":"knomadic/nz.adjmunro.knomadic/-maybe-fetch/index.html","searchKeys":["MaybeFetch","typealias MaybeFetch<Ok> = Flow<Fetch<Maybe<Ok>>>","nz.adjmunro.knomadic.MaybeFetch"]},{"name":"typealias MaybeFlow<Ok> = Flow<Maybe<Ok>>","description":"nz.adjmunro.knomadic.MaybeFlow","location":"knomadic/nz.adjmunro.knomadic/-maybe-flow/index.html","searchKeys":["MaybeFlow","typealias MaybeFlow<Ok> = Flow<Maybe<Ok>>","nz.adjmunro.knomadic.MaybeFlow"]},{"name":"typealias OutcomeFetch<Ok, Error> = Flow<Fetch<Outcome<Ok, Error>>>","description":"nz.adjmunro.knomadic.OutcomeFetch","location":"knomadic/nz.adjmunro.knomadic/-outcome-fetch/index.html","searchKeys":["OutcomeFetch","typealias OutcomeFetch<Ok, Error> = Flow<Fetch<Outcome<Ok, Error>>>","nz.adjmunro.knomadic.OutcomeFetch"]},{"name":"typealias OutcomeFlow<Ok, Error> = Flow<Outcome<Ok, Error>>","description":"nz.adjmunro.knomadic.OutcomeFlow","location":"knomadic/nz.adjmunro.knomadic/-outcome-flow/index.html","searchKeys":["OutcomeFlow","typealias OutcomeFlow<Ok, Error> = Flow<Outcome<Ok, Error>>","nz.adjmunro.knomadic.OutcomeFlow"]},{"name":"typealias ResultFetch<Ok> = Flow<Fetch<KotlinResult<Ok>>>","description":"nz.adjmunro.knomadic.ResultFetch","location":"knomadic/nz.adjmunro.knomadic/-result-fetch/index.html","searchKeys":["ResultFetch","typealias ResultFetch<Ok> = Flow<Fetch<KotlinResult<Ok>>>","nz.adjmunro.knomadic.ResultFetch"]},{"name":"typealias ResultFlow<Ok> = Flow<KotlinResult<Ok>>","description":"nz.adjmunro.knomadic.ResultFlow","location":"knomadic/nz.adjmunro.knomadic/-result-flow/index.html","searchKeys":["ResultFlow","typealias ResultFlow<Ok> = Flow<KotlinResult<Ok>>","nz.adjmunro.knomadic.ResultFlow"]},{"name":"val <Ok : Any, EmbeddedError : AncestorError, OuterError : AncestorError, AncestorError : Any> Outcome<Outcome<Ok, EmbeddedError>, OuterError>.flatten: Outcome<Ok, AncestorError>","description":"nz.adjmunro.knomadic.outcome.flatten","location":"knomadic/nz.adjmunro.knomadic.outcome/flatten.html","searchKeys":["flatten","val <Ok : Any, EmbeddedError : AncestorError, OuterError : AncestorError, AncestorError : Any> Outcome<Outcome<Ok, EmbeddedError>, OuterError>.flatten: Outcome<Ok, AncestorError>","nz.adjmunro.knomadic.outcome.flatten"]},{"name":"val <OuterOk : AncestorOk, EmbeddedOk : AncestorOk, Error : Any, AncestorOk : Any> Outcome<OuterOk, Outcome<EmbeddedOk, Error>>.flatten: Outcome<AncestorOk, Error>","description":"nz.adjmunro.knomadic.outcome.flatten","location":"knomadic/nz.adjmunro.knomadic.outcome/flatten.html","searchKeys":["flatten","val <OuterOk : AncestorOk, EmbeddedOk : AncestorOk, Error : Any, AncestorOk : Any> Outcome<OuterOk, Outcome<EmbeddedOk, Error>>.flatten: Outcome<AncestorOk, Error>","nz.adjmunro.knomadic.outcome.flatten"]},{"name":"val <SuccessOk : AncestorOk, SuccessError : AncestorError, FailureOk : AncestorOk, FailureError : AncestorError, AncestorOk : Any, AncestorError : Any> Outcome<Outcome<SuccessOk, SuccessError>, Outcome<FailureOk, FailureError>>.flatten: Outcome<AncestorOk, AncestorError>","description":"nz.adjmunro.knomadic.outcome.flatten","location":"knomadic/nz.adjmunro.knomadic.outcome/flatten.html","searchKeys":["flatten","val <SuccessOk : AncestorOk, SuccessError : AncestorError, FailureOk : AncestorOk, FailureError : AncestorError, AncestorOk : Any, AncestorError : Any> Outcome<Outcome<SuccessOk, SuccessError>, Outcome<FailureOk, FailureError>>.flatten: Outcome<AncestorOk, AncestorError>","nz.adjmunro.knomadic.outcome.flatten"]},{"name":"val <T : Any> Fetch<T>.hasNotStarted: Boolean","description":"nz.adjmunro.knomadic.fetch.hasNotStarted","location":"knomadic/nz.adjmunro.knomadic.fetch/has-not-started.html","searchKeys":["hasNotStarted","val <T : Any> Fetch<T>.hasNotStarted: Boolean","nz.adjmunro.knomadic.fetch.hasNotStarted"]},{"name":"val <T : Any> Fetch<T>.hasStarted: Boolean","description":"nz.adjmunro.knomadic.fetch.hasStarted","location":"knomadic/nz.adjmunro.knomadic.fetch/has-started.html","searchKeys":["hasStarted","val <T : Any> Fetch<T>.hasStarted: Boolean","nz.adjmunro.knomadic.fetch.hasStarted"]},{"name":"val <T : Any> Fetch<T>.isFetching: Boolean","description":"nz.adjmunro.knomadic.fetch.isFetching","location":"knomadic/nz.adjmunro.knomadic.fetch/is-fetching.html","searchKeys":["isFetching","val <T : Any> Fetch<T>.isFetching: Boolean","nz.adjmunro.knomadic.fetch.isFetching"]},{"name":"val <T : Any> Fetch<T>.isInProgress: Boolean","description":"nz.adjmunro.knomadic.fetch.isInProgress","location":"knomadic/nz.adjmunro.knomadic.fetch/is-in-progress.html","searchKeys":["isInProgress","val <T : Any> Fetch<T>.isInProgress: Boolean","nz.adjmunro.knomadic.fetch.isInProgress"]},{"name":"val <T : Any> Fetch<T>.isNotFinished: Boolean","description":"nz.adjmunro.knomadic.fetch.isNotFinished","location":"knomadic/nz.adjmunro.knomadic.fetch/is-not-finished.html","searchKeys":["isNotFinished","val <T : Any> Fetch<T>.isNotFinished: Boolean","nz.adjmunro.knomadic.fetch.isNotFinished"]},{"name":"val cache: Ok? = null","description":"nz.adjmunro.knomadic.fetch.ErrorWithCache.cache","location":"knomadic/nz.adjmunro.knomadic.fetch/-error-with-cache/cache.html","searchKeys":["cache","val cache: Ok? = null","nz.adjmunro.knomadic.fetch.ErrorWithCache.cache"]},{"name":"val error: Error","description":"nz.adjmunro.knomadic.fetch.ErrorWithCache.error","location":"knomadic/nz.adjmunro.knomadic.fetch/-error-with-cache/error.html","searchKeys":["error","val error: Error","nz.adjmunro.knomadic.fetch.ErrorWithCache.error"]},{"name":"val error: Error","description":"nz.adjmunro.knomadic.outcome.Outcome.Failure.error","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-failure/error.html","searchKeys":["error","val error: Error","nz.adjmunro.knomadic.outcome.Outcome.Failure.error"]},{"name":"val hasCache: Boolean","description":"nz.adjmunro.knomadic.fetch.ErrorWithCache.hasCache","location":"knomadic/nz.adjmunro.knomadic.fetch/-error-with-cache/has-cache.html","searchKeys":["hasCache","val hasCache: Boolean","nz.adjmunro.knomadic.fetch.ErrorWithCache.hasCache"]},{"name":"val result: T","description":"nz.adjmunro.knomadic.fetch.Fetch.Finished.result","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-finished/result.html","searchKeys":["result","val result: T","nz.adjmunro.knomadic.fetch.Fetch.Finished.result"]},{"name":"val value: Ok","description":"nz.adjmunro.knomadic.outcome.Outcome.Success.value","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-success/value.html","searchKeys":["value","val value: Ok","nz.adjmunro.knomadic.outcome.Outcome.Success.value"]},{"name":"value class Failure<out Error : Any>(val error: Error) : Outcome<Nothing, Error> ","description":"nz.adjmunro.knomadic.outcome.Outcome.Failure","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-failure/index.html","searchKeys":["Failure","value class Failure<out Error : Any>(val error: Error) : Outcome<Nothing, Error> ","nz.adjmunro.knomadic.outcome.Outcome.Failure"]},{"name":"value class Finished<out T : Any>(val result: T) : Fetch<T> ","description":"nz.adjmunro.knomadic.fetch.Fetch.Finished","location":"knomadic/nz.adjmunro.knomadic.fetch/-fetch/-finished/index.html","searchKeys":["Finished","value class Finished<out T : Any>(val result: T) : Fetch<T> ","nz.adjmunro.knomadic.fetch.Fetch.Finished"]},{"name":"value class Success<out Ok : Any>(val value: Ok) : Outcome<Ok, Nothing> ","description":"nz.adjmunro.knomadic.outcome.Outcome.Success","location":"knomadic/nz.adjmunro.knomadic.outcome/-outcome/-success/index.html","searchKeys":["Success","value class Success<out Ok : Any>(val value: Ok) : Outcome<Ok, Nothing> ","nz.adjmunro.knomadic.outcome.Outcome.Success"]}]