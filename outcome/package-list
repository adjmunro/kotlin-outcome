$dokka.format:html-v1
$dokka.linkExtension:html
$dokka.location:nz.adjmunro.outcome.fetch.flow////PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/index.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//filterIsNotEmpty/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/filter-is-not-empty.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//flatMapFetching/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Fetching[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/flat-map-fetching.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//flatMapFinished/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Finished[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/flat-map-finished.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//flatMapPrefetch/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Prefetch,nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/flat-map-prefetch.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//flatten/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/flatten.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//fold/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Prefetch,TypeParam(bounds=[kotlin.Any?])]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Fetching[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?])]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Finished[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/fold.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//mapFetching/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Fetching[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],TypeParam(bounds=[kotlin.Any])?]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/map-fetching.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//mapFinished/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Finished[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/map-finished.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//mapToCache/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Finished[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/map-to-cache.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//mapToFaulty/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[*]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/map-to-faulty.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//mapToMaybe/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/map-to-maybe.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//mapToOutcome/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/map-to-outcome.html
$dokka.location:nz.adjmunro.outcome.fetch.flow//onEach/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Prefetch,kotlin.Unit]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Fetching[TypeParam(bounds=[kotlin.Any])],kotlin.Unit]#kotlin.coroutines.SuspendFunction1[nz.adjmunro.outcome.fetch.Finished[TypeParam(bounds=[kotlin.Any])],kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.flow/on-each.html
$dokka.location:nz.adjmunro.outcome.fetch.members////PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/index.html
$dokka.location:nz.adjmunro.outcome.fetch.members//flatMapFetching/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Fetching[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/flat-map-fetching.html
$dokka.location:nz.adjmunro.outcome.fetch.members//flatMapFinished/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Finished[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/flat-map-finished.html
$dokka.location:nz.adjmunro.outcome.fetch.members//flatMapPrefetch/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Prefetch,nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/flat-map-prefetch.html
$dokka.location:nz.adjmunro.outcome.fetch.members//flatten/nz.adjmunro.outcome.fetch.Fetch[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/flatten.html
$dokka.location:nz.adjmunro.outcome.fetch.members//fold/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Prefetch,TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Fetching[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Finished[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/fold.html
$dokka.location:nz.adjmunro.outcome.fetch.members//getOrDefault/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/get-or-default.html
$dokka.location:nz.adjmunro.outcome.fetch.members//getOrElse/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any?])],TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/get-or-else.html
$dokka.location:nz.adjmunro.outcome.fetch.members//getOrNull/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/get-or-null.html
$dokka.location:nz.adjmunro.outcome.fetch.members//getOrThrow/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/get-or-throw.html
$dokka.location:nz.adjmunro.outcome.fetch.members//isEmpty/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/is-empty.html
$dokka.location:nz.adjmunro.outcome.fetch.members//isFetching/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/is-fetching.html
$dokka.location:nz.adjmunro.outcome.fetch.members//isFetching/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Fetching[TypeParam(bounds=[kotlin.Any])],kotlin.Boolean]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/is-fetching.html
$dokka.location:nz.adjmunro.outcome.fetch.members//isFinished/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/is-finished.html
$dokka.location:nz.adjmunro.outcome.fetch.members//isFinished/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Finished[TypeParam(bounds=[kotlin.Any])],kotlin.Boolean]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/is-finished.html
$dokka.location:nz.adjmunro.outcome.fetch.members//isNotEmpty/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/is-not-empty.html
$dokka.location:nz.adjmunro.outcome.fetch.members//isNotFetching/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/is-not-fetching.html
$dokka.location:nz.adjmunro.outcome.fetch.members//isNotFinished/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/is-not-finished.html
$dokka.location:nz.adjmunro.outcome.fetch.members//isPrefetch/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/is-prefetch.html
$dokka.location:nz.adjmunro.outcome.fetch.members//isStarted/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/is-started.html
$dokka.location:nz.adjmunro.outcome.fetch.members//mapFetching/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Fetching[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],TypeParam(bounds=[kotlin.Any])?]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/map-fetching.html
$dokka.location:nz.adjmunro.outcome.fetch.members//mapFinished/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Finished[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/map-finished.html
$dokka.location:nz.adjmunro.outcome.fetch.members//mapToCache/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Finished[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],TypeParam(bounds=[kotlin.Any])?]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/map-to-cache.html
$dokka.location:nz.adjmunro.outcome.fetch.members//onFetching/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Fetching[TypeParam(bounds=[kotlin.Any])],kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/on-fetching.html
$dokka.location:nz.adjmunro.outcome.fetch.members//onFinished/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Finished[TypeParam(bounds=[kotlin.Any])],kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/on-finished.html
$dokka.location:nz.adjmunro.outcome.fetch.members//onPrefetch/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[nz.adjmunro.outcome.fetch.Prefetch,kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/on-prefetch.html
$dokka.location:nz.adjmunro.outcome.fetch.members//toFaulty/nz.adjmunro.outcome.fetch.Fetch[*]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/to-faulty.html
$dokka.location:nz.adjmunro.outcome.fetch.members//toKotlinResult/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/to-kotlin-result.html
$dokka.location:nz.adjmunro.outcome.fetch.members//toMaybe/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/to-maybe.html
$dokka.location:nz.adjmunro.outcome.fetch.members//toOutcome/nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch.members/to-outcome.html
$dokka.location:nz.adjmunro.outcome.fetch////PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/index.html
$dokka.location:nz.adjmunro.outcome.fetch//emit/kotlinx.coroutines.flow.FlowCollector[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function2[kotlinx.coroutines.flow.FlowCollector[TypeParam(bounds=[kotlin.Any?])],kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[kotlinx.coroutines.flow.FlowCollector[TypeParam(bounds=[kotlin.Any?])],TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/emit.html
$dokka.location:nz.adjmunro.outcome.fetch//fetch/#kotlin.time.Duration#kotlin.Function2[kotlinx.coroutines.flow.FlowCollector[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]],kotlin.Throwable,nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]#kotlin.coroutines.SuspendFunction1[kotlinx.coroutines.flow.FlowCollector[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]],TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/fetch.html
$dokka.location:nz.adjmunro.outcome.fetch//fetching/kotlinx.coroutines.flow.FlowCollector[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]#TypeParam(bounds=[kotlin.Any])?/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/fetching.html
$dokka.location:nz.adjmunro.outcome.fetch//finished/kotlinx.coroutines.flow.FlowCollector[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/finished.html
$dokka.location:nz.adjmunro.outcome.fetch//map/nz.adjmunro.outcome.fetch.ErrorWithCache[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any])?,TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/map.html
$dokka.location:nz.adjmunro.outcome.fetch//mapCache/nz.adjmunro.outcome.fetch.ErrorWithCache[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any])?,TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/map-cache.html
$dokka.location:nz.adjmunro.outcome.fetch//mapError/nz.adjmunro.outcome.fetch.ErrorWithCache[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/map-error.html
$dokka.location:nz.adjmunro.outcome.fetch//prefetch/kotlinx.coroutines.flow.FlowCollector[nz.adjmunro.outcome.fetch.Fetch[kotlin.Nothing]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/prefetch.html
$dokka.location:nz.adjmunro.outcome.fetch/ErrorWithCache///PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-error-with-cache/index.html
$dokka.location:nz.adjmunro.outcome.fetch/ErrorWithCache/ErrorWithCache/#TypeParam(bounds=[kotlin.Any])#TypeParam(bounds=[kotlin.Any])?/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-error-with-cache/-error-with-cache.html
$dokka.location:nz.adjmunro.outcome.fetch/ErrorWithCache/cache/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-error-with-cache/cache.html
$dokka.location:nz.adjmunro.outcome.fetch/ErrorWithCache/error/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-error-with-cache/error.html
$dokka.location:nz.adjmunro.outcome.fetch/ErrorWithCache/hasCache/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-error-with-cache/has-cache.html
$dokka.location:nz.adjmunro.outcome.fetch/FaultyFetch///PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-faulty-fetch/index.html
$dokka.location:nz.adjmunro.outcome.fetch/Fetch///PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-fetch/index.html
$dokka.location:nz.adjmunro.outcome.fetch/FetchFlow///PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-fetch-flow/index.html
$dokka.location:nz.adjmunro.outcome.fetch/Fetching///PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-fetching/index.html
$dokka.location:nz.adjmunro.outcome.fetch/Fetching/Fetching/#TypeParam(bounds=[kotlin.Any])?/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-fetching/-fetching.html
$dokka.location:nz.adjmunro.outcome.fetch/Fetching/cache/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-fetching/cache.html
$dokka.location:nz.adjmunro.outcome.fetch/Fetching/component1/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-fetching/component1.html
$dokka.location:nz.adjmunro.outcome.fetch/Fetching/toString/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-fetching/to-string.html
$dokka.location:nz.adjmunro.outcome.fetch/Finished///PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-finished/index.html
$dokka.location:nz.adjmunro.outcome.fetch/Finished/Finished/#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-finished/-finished.html
$dokka.location:nz.adjmunro.outcome.fetch/Finished/component1/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-finished/component1.html
$dokka.location:nz.adjmunro.outcome.fetch/Finished/result/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-finished/result.html
$dokka.location:nz.adjmunro.outcome.fetch/Finished/toString/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-finished/to-string.html
$dokka.location:nz.adjmunro.outcome.fetch/MaybeFetch///PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-maybe-fetch/index.html
$dokka.location:nz.adjmunro.outcome.fetch/OutcomeFetch///PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-outcome-fetch/index.html
$dokka.location:nz.adjmunro.outcome.fetch/Prefetch///PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-prefetch/index.html
$dokka.location:nz.adjmunro.outcome.fetch/ResultFetch///PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-result-fetch/index.html
$dokka.location:nz.adjmunro.outcome.fetch/SafeFetchFlow///PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-safe-fetch-flow/index.html
$dokka.location:nz.adjmunro.outcome.fetch/SafeFetchFlow/collectSafely/#kotlinx.coroutines.flow.FlowCollector[nz.adjmunro.outcome.fetch.Fetch[TypeParam(bounds=[kotlin.Any])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.fetch/-safe-fetch-flow/collect-safely.html
$dokka.location:nz.adjmunro.outcome.outcome.flow////PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.flow/index.html
$dokka.location:nz.adjmunro.outcome.outcome.flow//collapse/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])]),TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.flow/collapse.html
$dokka.location:nz.adjmunro.outcome.outcome.flow//filterOnlyFailure/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.flow/filter-only-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.flow//filterOnlySuccess/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.flow/filter-only-success.html
$dokka.location:nz.adjmunro.outcome.outcome.flow//foldOutcome/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any?])]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.flow/fold-outcome.html
$dokka.location:nz.adjmunro.outcome.outcome.flow//mapFailure/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.flow/map-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.flow//mapSuccess/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.flow/map-success.html
$dokka.location:nz.adjmunro.outcome.outcome.flow//onEachFailure/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.flow/on-each-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.flow//onEachSuccess/kotlinx.coroutines.flow.Flow[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.flow/on-each-success.html
$dokka.location:nz.adjmunro.outcome.outcome.members////PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/index.html
$dokka.location:nz.adjmunro.outcome.outcome.members//aggregate/kotlin.collections.Iterable[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#kotlin.Function1[kotlin.collections.List[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/aggregate.html
$dokka.location:nz.adjmunro.outcome.outcome.members//andIf/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Boolean]#kotlin.Function1[kotlin.Throwable,nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#kotlin.Function2[nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/and-if.html
$dokka.location:nz.adjmunro.outcome.outcome.members//andThen/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[kotlin.Throwable,nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#kotlin.Function2[nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/and-then.html
$dokka.location:nz.adjmunro.outcome.outcome.members//asFailure/TypeParam(bounds=[kotlin.Any])#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/as-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.members//asFaulty/nz.adjmunro.outcome.outcome.Outcome[*,TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/as-faulty.html
$dokka.location:nz.adjmunro.outcome.outcome.members//asMaybe/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),*]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/as-maybe.html
$dokka.location:nz.adjmunro.outcome.outcome.members//asSuccess/TypeParam(bounds=[kotlin.Any])#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/as-success.html
$dokka.location:nz.adjmunro.outcome.outcome.members//catch/#kotlin.Function1[nz.adjmunro.outcome.raise.RaiseScope[kotlin.Throwable],TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/catch.html
$dokka.location:nz.adjmunro.outcome.outcome.members//catch/TypeParam(bounds=[kotlin.Any?])#kotlin.Function2[nz.adjmunro.outcome.raise.RaiseScope[kotlin.Throwable],TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/catch.html
$dokka.location:nz.adjmunro.outcome.outcome.members//coerceToFailure/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/coerce-to-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.members//coerceToSuccess/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/coerce-to-success.html
$dokka.location:nz.adjmunro.outcome.outcome.members//collapse/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])]),TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/collapse.html
$dokka.location:nz.adjmunro.outcome.outcome.members//emptyFailure/#kotlin.Any?/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/empty-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.members//emptySuccess/#kotlin.Any?/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/empty-success.html
$dokka.location:nz.adjmunro.outcome.outcome.members//errorOrDefault/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/error-or-default.html
$dokka.location:nz.adjmunro.outcome.outcome.members//errorOrElse/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/error-or-else.html
$dokka.location:nz.adjmunro.outcome.outcome.members//errorOrNull/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/error-or-null.html
$dokka.location:nz.adjmunro.outcome.outcome.members//errorOrThrow/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/error-or-throw.html
$dokka.location:nz.adjmunro.outcome.outcome.members//failureOf/#kotlin.Function0[TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/failure-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//failureOf/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/failure-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//falter/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/falter.html
$dokka.location:nz.adjmunro.outcome.outcome.members//faulty/TypeParam(bounds=[kotlin.Any?])#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/faulty.html
$dokka.location:nz.adjmunro.outcome.outcome.members//faulty/TypeParam(bounds=[kotlin.Any])#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Boolean]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/faulty.html
$dokka.location:nz.adjmunro.outcome.outcome.members//faultyOf/#kotlin.Function1[kotlin.Throwable,nz.adjmunro.outcome.outcome.Outcome[kotlin.Unit,TypeParam(bounds=[kotlin.Any])]]#kotlin.Function1[nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])],kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/faulty-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//faultyOf/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[kotlin.Throwable,nz.adjmunro.outcome.outcome.Outcome[kotlin.Unit,TypeParam(bounds=[kotlin.Any])]]#kotlin.Function2[nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?]),kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/faulty-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//flatMapFailure/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/flat-map-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.members//flatMapSuccess/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/flat-map-success.html
$dokka.location:nz.adjmunro.outcome.outcome.members//flatten/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])]),nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])]),TypeParam(bounds=[kotlin.Any])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/flatten.html
$dokka.location:nz.adjmunro.outcome.outcome.members//flatten/nz.adjmunro.outcome.outcome.Outcome[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])]),TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])]),TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/flatten.html
$dokka.location:nz.adjmunro.outcome.outcome.members//flatten/nz.adjmunro.outcome.outcome.Outcome[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/flatten.html
$dokka.location:nz.adjmunro.outcome.outcome.members//flattenNestedBoth/nz.adjmunro.outcome.outcome.Outcome[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])]),TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])]),TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/flatten-nested-both.html
$dokka.location:nz.adjmunro.outcome.outcome.members//flattenNestedFailure/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])]),nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])]),TypeParam(bounds=[kotlin.Any])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/flatten-nested-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.members//flattenNestedSuccess/nz.adjmunro.outcome.outcome.Outcome[nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])],TypeParam(bounds=[TypeParam(bounds=[kotlin.Any])])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/flatten-nested-success.html
$dokka.location:nz.adjmunro.outcome.outcome.members//fold/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[nz.adjmunro.outcome.outcome.Failure[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[nz.adjmunro.outcome.outcome.Success[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/fold.html
$dokka.location:nz.adjmunro.outcome.outcome.members//getOrDefault/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/get-or-default.html
$dokka.location:nz.adjmunro.outcome.outcome.members//getOrElse/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/get-or-else.html
$dokka.location:nz.adjmunro.outcome.outcome.members//getOrNull/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/get-or-null.html
$dokka.location:nz.adjmunro.outcome.outcome.members//getOrThrow/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/get-or-throw.html
$dokka.location:nz.adjmunro.outcome.outcome.members//invert/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/invert.html
$dokka.location:nz.adjmunro.outcome.outcome.members//isFailure/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/is-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.members//isFailure/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Boolean]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/is-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.members//isSuccess/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/is-success.html
$dokka.location:nz.adjmunro.outcome.outcome.members//isSuccess/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Boolean]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/is-success.html
$dokka.location:nz.adjmunro.outcome.outcome.members//map/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/map.html
$dokka.location:nz.adjmunro.outcome.outcome.members//mapFailure/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/map-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.members//mapSuccess/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/map-success.html
$dokka.location:nz.adjmunro.outcome.outcome.members//maybe/TypeParam(bounds=[kotlin.Any?])#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/maybe.html
$dokka.location:nz.adjmunro.outcome.outcome.members//maybe/TypeParam(bounds=[kotlin.Any])#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Boolean]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/maybe.html
$dokka.location:nz.adjmunro.outcome.outcome.members//maybeOf/#kotlin.Function1[kotlin.Throwable,nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]]#kotlin.Function1[nz.adjmunro.outcome.raise.RaiseScope[kotlin.Unit],TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/maybe-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//maybeOf/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[kotlin.Throwable,nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]]#kotlin.Function2[nz.adjmunro.outcome.raise.RaiseScope[kotlin.Unit],TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/maybe-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//nullableOf/#kotlin.Function1[nz.adjmunro.outcome.raise.RaiseScope[kotlin.Unit],TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/nullable-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//nullableOf/TypeParam(bounds=[kotlin.Any?])#kotlin.Function2[nz.adjmunro.outcome.raise.RaiseScope[kotlin.Unit],TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/nullable-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//onFailure/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/on-failure.html
$dokka.location:nz.adjmunro.outcome.outcome.members//onSuccess/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/on-success.html
$dokka.location:nz.adjmunro.outcome.outcome.members//outcome/#kotlin.Function1[nz.adjmunro.outcome.raise.RaiseScope[kotlin.String],TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/outcome.html
$dokka.location:nz.adjmunro.outcome.outcome.members//outcome/TypeParam(bounds=[kotlin.Any?])#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/outcome.html
$dokka.location:nz.adjmunro.outcome.outcome.members//outcome/TypeParam(bounds=[kotlin.Any?])#kotlin.Function2[nz.adjmunro.outcome.raise.RaiseScope[kotlin.String],TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/outcome.html
$dokka.location:nz.adjmunro.outcome.outcome.members//outcome/TypeParam(bounds=[kotlin.Any])#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),kotlin.Boolean]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/outcome.html
$dokka.location:nz.adjmunro.outcome.outcome.members//outcomeOf/#kotlin.Function1[kotlin.Throwable,nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#kotlin.Function1[nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/outcome-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//outcomeOf/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[kotlin.Throwable,nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#kotlin.Function2[nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/outcome-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//recover/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/recover.html
$dokka.location:nz.adjmunro.outcome.outcome.members//rfold/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[nz.adjmunro.outcome.outcome.Success[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[nz.adjmunro.outcome.outcome.Failure[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/rfold.html
$dokka.location:nz.adjmunro.outcome.outcome.members//safely/#kotlin.Function1[kotlin.Any,TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[nz.adjmunro.outcome.raise.RaiseScope[kotlin.Unit],TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/safely.html
$dokka.location:nz.adjmunro.outcome.outcome.members//safely/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[kotlin.Any,TypeParam(bounds=[kotlin.Any])]#kotlin.Function2[nz.adjmunro.outcome.raise.RaiseScope[kotlin.Unit],TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/safely.html
$dokka.location:nz.adjmunro.outcome.outcome.members//successOf/#kotlin.Function0[TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/success-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//successOf/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/success-of.html
$dokka.location:nz.adjmunro.outcome.outcome.members//tryRecover/nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[kotlin.Throwable,nz.adjmunro.outcome.outcome.Outcome[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]]#kotlin.Function2[nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome.members/try-recover.html
$dokka.location:nz.adjmunro.outcome.outcome////PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/index.html
$dokka.location:nz.adjmunro.outcome.outcome/Failure///PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-failure/index.html
$dokka.location:nz.adjmunro.outcome.outcome/Failure/Failure/#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-failure/-failure.html
$dokka.location:nz.adjmunro.outcome.outcome/Failure/component2/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-failure/component2.html
$dokka.location:nz.adjmunro.outcome.outcome/Failure/error/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-failure/error.html
$dokka.location:nz.adjmunro.outcome.outcome/Failure/toString/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-failure/to-string.html
$dokka.location:nz.adjmunro.outcome.outcome/Faulty///PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-faulty/index.html
$dokka.location:nz.adjmunro.outcome.outcome/FaultyFlow///PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-faulty-flow/index.html
$dokka.location:nz.adjmunro.outcome.outcome/FaultyScope///PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-faulty-scope/index.html
$dokka.location:nz.adjmunro.outcome.outcome/Maybe///PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-maybe/index.html
$dokka.location:nz.adjmunro.outcome.outcome/MaybeFlow///PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-maybe-flow/index.html
$dokka.location:nz.adjmunro.outcome.outcome/MaybeScope///PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-maybe-scope/index.html
$dokka.location:nz.adjmunro.outcome.outcome/Outcome///PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-outcome/index.html
$dokka.location:nz.adjmunro.outcome.outcome/Outcome/component1/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-outcome/component1.html
$dokka.location:nz.adjmunro.outcome.outcome/Outcome/component2/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-outcome/component2.html
$dokka.location:nz.adjmunro.outcome.outcome/OutcomeFlow///PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-outcome-flow/index.html
$dokka.location:nz.adjmunro.outcome.outcome/OutcomeScope///PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-outcome-scope/index.html
$dokka.location:nz.adjmunro.outcome.outcome/Success///PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-success/index.html
$dokka.location:nz.adjmunro.outcome.outcome/Success/Success/#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-success/-success.html
$dokka.location:nz.adjmunro.outcome.outcome/Success/component1/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-success/component1.html
$dokka.location:nz.adjmunro.outcome.outcome/Success/toString/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-success/to-string.html
$dokka.location:nz.adjmunro.outcome.outcome/Success/value/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.outcome/-success/value.html
$dokka.location:nz.adjmunro.outcome.raise////PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/index.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope.Companion///PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/index.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope.Companion/catch/nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[kotlin.Throwable,TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/catch.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope.Companion/default/nz.adjmunro.outcome.raise.RaiseScope.Companion#kotlin.Function1[nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/default.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope.Companion/ensure/nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])]#kotlin.Boolean#kotlin.Function0[TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/ensure.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope.Companion/ensureNotNull/nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])]#TypeParam(bounds=[kotlin.Any])?#kotlin.Function0[TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/ensure-not-null.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope.Companion/fold/nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])]#kotlin.Function1[nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])],TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/fold.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope.Companion/raise/nz.adjmunro.outcome.raise.RaiseScope[TypeParam(bounds=[kotlin.Any])]#kotlin.Function0[TypeParam(bounds=[kotlin.Any])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/-companion/raise.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope.DefaultRaise///PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/-default-raise/index.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope.DefaultRaise/complete/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/-default-raise/complete.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope.DefaultRaise/raised/#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/-default-raise/raised.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope///PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/index.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope/complete/#/PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/complete.html
$dokka.location:nz.adjmunro.outcome.raise/RaiseScope/raised/#TypeParam(bounds=[kotlin.Any])/PointingToDeclaration/outcome/nz.adjmunro.outcome.raise/-raise-scope/raised.html
$dokka.location:nz.adjmunro.outcome.result.members////PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/index.html
$dokka.location:nz.adjmunro.outcome.result.members//aggregate/kotlin.collections.Iterable[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.Function1[kotlin.collections.List[kotlin.Throwable],kotlin.Throwable]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/aggregate.html
$dokka.location:nz.adjmunro.outcome.result.members//andIf/kotlin.Result[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/and-if.html
$dokka.location:nz.adjmunro.outcome.result.members//andThen/kotlin.Result[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/and-then.html
$dokka.location:nz.adjmunro.outcome.result.members//andThenEach/kotlin.collections.Iterable[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/and-then-each.html
$dokka.location:nz.adjmunro.outcome.result.members//andThenEach/kotlin.sequences.Sequence[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/and-then-each.html
$dokka.location:nz.adjmunro.outcome.result.members//exceptionOrDefault/kotlin.Result[TypeParam(bounds=[kotlin.Any?])]#kotlin.Throwable/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/exception-or-default.html
$dokka.location:nz.adjmunro.outcome.result.members//exceptionOrElse/kotlin.Result[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Throwable]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/exception-or-else.html
$dokka.location:nz.adjmunro.outcome.result.members//exceptionOrThrow/kotlin.Result[TypeParam(bounds=[kotlin.Any?])]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/exception-or-throw.html
$dokka.location:nz.adjmunro.outcome.result.members//flatMap/kotlin.Result[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/flat-map.html
$dokka.location:nz.adjmunro.outcome.result.members//flatten/kotlin.Result[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/flatten.html
$dokka.location:nz.adjmunro.outcome.result.members//foldEach/kotlin.collections.Iterable[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/fold-each.html
$dokka.location:nz.adjmunro.outcome.result.members//foldEach/kotlin.sequences.Sequence[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/fold-each.html
$dokka.location:nz.adjmunro.outcome.result.members//mapFailure/kotlin.Result[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[kotlin.Throwable,kotlin.Throwable]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/map-failure.html
$dokka.location:nz.adjmunro.outcome.result.members//nullable/#kotlin.Function0[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/nullable.html
$dokka.location:nz.adjmunro.outcome.result.members//nullable/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/nullable.html
$dokka.location:nz.adjmunro.outcome.result.members//resultOf/#kotlin.Function0[TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/result-of.html
$dokka.location:nz.adjmunro.outcome.result.members//resultOf/TypeParam(bounds=[kotlin.Any?])#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/result-of.html
$dokka.location:nz.adjmunro.outcome.result.members//resultOfEach/#kotlin.Array[kotlin.Function0[TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/result-of-each.html
$dokka.location:nz.adjmunro.outcome.result.members//resultOfEach/kotlin.collections.Iterable[kotlin.Function0[TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/result-of-each.html
$dokka.location:nz.adjmunro.outcome.result.members//resultOfEach/kotlin.sequences.Sequence[kotlin.Function0[TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/result-of-each.html
$dokka.location:nz.adjmunro.outcome.result.members//tryRecover/kotlin.Result[TypeParam(bounds=[kotlin.Any?])]#kotlin.Function1[kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/try-recover.html
$dokka.location:nz.adjmunro.outcome.result.members//tryRecoverEach/kotlin.collections.Iterable[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.Function1[kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/try-recover-each.html
$dokka.location:nz.adjmunro.outcome.result.members//tryRecoverEach/kotlin.sequences.Sequence[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.Function1[kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.members/try-recover-each.html
$dokka.location:nz.adjmunro.outcome.result.suspend////PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/index.html
$dokka.location:nz.adjmunro.outcome.result.suspend//andThen/kotlinx.coroutines.flow.Flow[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.Function1[TypeParam(bounds=[kotlin.Any?]),kotlin.Boolean]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/and-then.html
$dokka.location:nz.adjmunro.outcome.result.suspend//andThen/kotlinx.coroutines.flow.Flow[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/and-then.html
$dokka.location:nz.adjmunro.outcome.result.suspend//filterFailure/kotlinx.coroutines.flow.Flow[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/filter-failure.html
$dokka.location:nz.adjmunro.outcome.result.suspend//filterSuccess/kotlinx.coroutines.flow.Flow[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/filter-success.html
$dokka.location:nz.adjmunro.outcome.result.suspend//flatten/kotlinx.coroutines.flow.Flow[kotlin.Result[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/flatten.html
$dokka.location:nz.adjmunro.outcome.result.suspend//foldResult/kotlinx.coroutines.flow.Flow[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.coroutines.SuspendFunction1[kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/fold-result.html
$dokka.location:nz.adjmunro.outcome.result.suspend//mapFailure/kotlinx.coroutines.flow.Flow[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction1[kotlin.Throwable,kotlin.Throwable]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/map-failure.html
$dokka.location:nz.adjmunro.outcome.result.suspend//mapSuccess/kotlinx.coroutines.flow.Flow[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/map-success.html
$dokka.location:nz.adjmunro.outcome.result.suspend//onEachFailure/kotlinx.coroutines.flow.Flow[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction1[kotlin.Throwable,kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/on-each-failure.html
$dokka.location:nz.adjmunro.outcome.result.suspend//onEachResult/kotlinx.coroutines.flow.Flow[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Unit]#kotlin.coroutines.SuspendFunction1[kotlin.Throwable,kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/on-each-result.html
$dokka.location:nz.adjmunro.outcome.result.suspend//onEachSuccess/kotlinx.coroutines.flow.Flow[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction1[TypeParam(bounds=[kotlin.Any?]),kotlin.Unit]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/on-each-success.html
$dokka.location:nz.adjmunro.outcome.result.suspend//parallelAndThen/kotlin.collections.Iterable[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction2[kotlinx.coroutines.CoroutineScope,TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/parallel-and-then.html
$dokka.location:nz.adjmunro.outcome.result.suspend//parallelAndThen/kotlin.sequences.Sequence[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction2[kotlinx.coroutines.CoroutineScope,TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/parallel-and-then.html
$dokka.location:nz.adjmunro.outcome.result.suspend//parallelFold/kotlin.collections.Iterable[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction2[kotlinx.coroutines.CoroutineScope,TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.coroutines.SuspendFunction2[kotlinx.coroutines.CoroutineScope,kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/parallel-fold.html
$dokka.location:nz.adjmunro.outcome.result.suspend//parallelFold/kotlin.sequences.Sequence[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction2[kotlinx.coroutines.CoroutineScope,TypeParam(bounds=[kotlin.Any?]),TypeParam(bounds=[kotlin.Any?])]#kotlin.coroutines.SuspendFunction2[kotlinx.coroutines.CoroutineScope,kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/parallel-fold.html
$dokka.location:nz.adjmunro.outcome.result.suspend//parallelResult/kotlin.collections.Iterable[kotlin.coroutines.SuspendFunction1[kotlinx.coroutines.CoroutineScope,TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/parallel-result.html
$dokka.location:nz.adjmunro.outcome.result.suspend//parallelResult/kotlin.sequences.Sequence[kotlin.coroutines.SuspendFunction1[kotlinx.coroutines.CoroutineScope,TypeParam(bounds=[kotlin.Any?])]]#/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/parallel-result.html
$dokka.location:nz.adjmunro.outcome.result.suspend//parallelResultOf/#kotlin.Array[kotlin.coroutines.SuspendFunction1[kotlinx.coroutines.CoroutineScope,TypeParam(bounds=[kotlin.Any?])]]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/parallel-result-of.html
$dokka.location:nz.adjmunro.outcome.result.suspend//parallelTryRecover/kotlin.collections.Iterable[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction2[kotlinx.coroutines.CoroutineScope,kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/parallel-try-recover.html
$dokka.location:nz.adjmunro.outcome.result.suspend//parallelTryRecover/kotlin.sequences.Sequence[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction2[kotlinx.coroutines.CoroutineScope,kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/parallel-try-recover.html
$dokka.location:nz.adjmunro.outcome.result.suspend//tryRecover/kotlinx.coroutines.flow.Flow[kotlin.Result[TypeParam(bounds=[kotlin.Any?])]]#kotlin.coroutines.SuspendFunction1[kotlin.Throwable,TypeParam(bounds=[kotlin.Any?])]/PointingToDeclaration/outcome/nz.adjmunro.outcome.result.suspend/try-recover.html
$dokka.location:nz.adjmunro.outcome.result////PointingToDeclaration/outcome/nz.adjmunro.outcome.result/index.html
$dokka.location:nz.adjmunro.outcome.result/KotlinResult///PointingToDeclaration/outcome/nz.adjmunro.outcome.result/-kotlin-result/index.html
$dokka.location:nz.adjmunro.outcome.result/ResultFlow///PointingToDeclaration/outcome/nz.adjmunro.outcome.result/-result-flow/index.html
$dokka.location:nz.adjmunro.outcome.util////PointingToDeclaration/outcome/nz.adjmunro.outcome.util/index.html
$dokka.location:nz.adjmunro.outcome.util//isFatal/kotlin.Throwable#/PointingToDeclaration/outcome/nz.adjmunro.outcome.util/is-fatal.html
$dokka.location:nz.adjmunro.outcome.util//nonFatalOrThrow/TypeParam(bounds=[kotlin.Throwable])#/PointingToDeclaration/outcome/nz.adjmunro.outcome.util/non-fatal-or-throw.html
nz.adjmunro.outcome.fetch
nz.adjmunro.outcome.fetch.flow
nz.adjmunro.outcome.fetch.members
nz.adjmunro.outcome.outcome
nz.adjmunro.outcome.outcome.flow
nz.adjmunro.outcome.outcome.members
nz.adjmunro.outcome.raise
nz.adjmunro.outcome.result
nz.adjmunro.outcome.result.members
nz.adjmunro.outcome.result.suspend
nz.adjmunro.outcome.util
